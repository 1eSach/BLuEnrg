
BLE_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b704  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800b7c4  0800b7c4  0001b7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd8  0800bbd8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbd8  0800bbd8  0001bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbe0  0800bbe0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbe0  0800bbe0  0001bbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbe4  0800bbe4  0001bbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800bbe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  20000088  0800bc70  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  0800bc70  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb73  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003663  00000000  00000000  0003cc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  00040288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001490  00000000  00000000  00041878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9f9  00000000  00000000  00042d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8f5  00000000  00000000  0005f701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15a1  00000000  00000000  00079ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d08  00000000  00000000  0011b5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b7ac 	.word	0x0800b7ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	0800b7ac 	.word	0x0800b7ac

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f84a 	bl	80004d0 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_ul2d>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	0006      	movs	r6, r0
 80004a8:	0008      	movs	r0, r1
 80004aa:	f000 ffcb 	bl	8001444 <__aeabi_ui2d>
 80004ae:	2200      	movs	r2, #0
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_ul2d+0x28>)
 80004b2:	f000 fd5b 	bl	8000f6c <__aeabi_dmul>
 80004b6:	000d      	movs	r5, r1
 80004b8:	0004      	movs	r4, r0
 80004ba:	0030      	movs	r0, r6
 80004bc:	f000 ffc2 	bl	8001444 <__aeabi_ui2d>
 80004c0:	002b      	movs	r3, r5
 80004c2:	0022      	movs	r2, r4
 80004c4:	f000 fa16 	bl	80008f4 <__aeabi_dadd>
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41f00000 	.word	0x41f00000

080004d0 <__udivmoddi4>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	4657      	mov	r7, sl
 80004d4:	464e      	mov	r6, r9
 80004d6:	4645      	mov	r5, r8
 80004d8:	46de      	mov	lr, fp
 80004da:	b5e0      	push	{r5, r6, r7, lr}
 80004dc:	0004      	movs	r4, r0
 80004de:	000d      	movs	r5, r1
 80004e0:	4692      	mov	sl, r2
 80004e2:	4699      	mov	r9, r3
 80004e4:	b083      	sub	sp, #12
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d830      	bhi.n	800054c <__udivmoddi4+0x7c>
 80004ea:	d02d      	beq.n	8000548 <__udivmoddi4+0x78>
 80004ec:	4649      	mov	r1, r9
 80004ee:	4650      	mov	r0, sl
 80004f0:	f001 f874 	bl	80015dc <__clzdi2>
 80004f4:	0029      	movs	r1, r5
 80004f6:	0006      	movs	r6, r0
 80004f8:	0020      	movs	r0, r4
 80004fa:	f001 f86f 	bl	80015dc <__clzdi2>
 80004fe:	1a33      	subs	r3, r6, r0
 8000500:	4698      	mov	r8, r3
 8000502:	3b20      	subs	r3, #32
 8000504:	469b      	mov	fp, r3
 8000506:	d433      	bmi.n	8000570 <__udivmoddi4+0xa0>
 8000508:	465a      	mov	r2, fp
 800050a:	4653      	mov	r3, sl
 800050c:	4093      	lsls	r3, r2
 800050e:	4642      	mov	r2, r8
 8000510:	001f      	movs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d83a      	bhi.n	8000592 <__udivmoddi4+0xc2>
 800051c:	42af      	cmp	r7, r5
 800051e:	d100      	bne.n	8000522 <__udivmoddi4+0x52>
 8000520:	e078      	b.n	8000614 <__udivmoddi4+0x144>
 8000522:	465b      	mov	r3, fp
 8000524:	1ba4      	subs	r4, r4, r6
 8000526:	41bd      	sbcs	r5, r7
 8000528:	2b00      	cmp	r3, #0
 800052a:	da00      	bge.n	800052e <__udivmoddi4+0x5e>
 800052c:	e075      	b.n	800061a <__udivmoddi4+0x14a>
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	465a      	mov	r2, fp
 800053a:	4093      	lsls	r3, r2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	4642      	mov	r2, r8
 8000542:	4093      	lsls	r3, r2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	e028      	b.n	800059a <__udivmoddi4+0xca>
 8000548:	4282      	cmp	r2, r0
 800054a:	d9cf      	bls.n	80004ec <__udivmoddi4+0x1c>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <__udivmoddi4+0x8e>
 800055a:	601c      	str	r4, [r3, #0]
 800055c:	605d      	str	r5, [r3, #4]
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	b003      	add	sp, #12
 8000564:	bcf0      	pop	{r4, r5, r6, r7}
 8000566:	46bb      	mov	fp, r7
 8000568:	46b2      	mov	sl, r6
 800056a:	46a9      	mov	r9, r5
 800056c:	46a0      	mov	r8, r4
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	4642      	mov	r2, r8
 8000572:	2320      	movs	r3, #32
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	4652      	mov	r2, sl
 8000578:	40da      	lsrs	r2, r3
 800057a:	4641      	mov	r1, r8
 800057c:	0013      	movs	r3, r2
 800057e:	464a      	mov	r2, r9
 8000580:	408a      	lsls	r2, r1
 8000582:	0017      	movs	r7, r2
 8000584:	4642      	mov	r2, r8
 8000586:	431f      	orrs	r7, r3
 8000588:	4653      	mov	r3, sl
 800058a:	4093      	lsls	r3, r2
 800058c:	001e      	movs	r6, r3
 800058e:	42af      	cmp	r7, r5
 8000590:	d9c4      	bls.n	800051c <__udivmoddi4+0x4c>
 8000592:	2200      	movs	r2, #0
 8000594:	2300      	movs	r3, #0
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	4643      	mov	r3, r8
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0d9      	beq.n	8000554 <__udivmoddi4+0x84>
 80005a0:	07fb      	lsls	r3, r7, #31
 80005a2:	0872      	lsrs	r2, r6, #1
 80005a4:	431a      	orrs	r2, r3
 80005a6:	4646      	mov	r6, r8
 80005a8:	087b      	lsrs	r3, r7, #1
 80005aa:	e00e      	b.n	80005ca <__udivmoddi4+0xfa>
 80005ac:	42ab      	cmp	r3, r5
 80005ae:	d101      	bne.n	80005b4 <__udivmoddi4+0xe4>
 80005b0:	42a2      	cmp	r2, r4
 80005b2:	d80c      	bhi.n	80005ce <__udivmoddi4+0xfe>
 80005b4:	1aa4      	subs	r4, r4, r2
 80005b6:	419d      	sbcs	r5, r3
 80005b8:	2001      	movs	r0, #1
 80005ba:	1924      	adds	r4, r4, r4
 80005bc:	416d      	adcs	r5, r5
 80005be:	2100      	movs	r1, #0
 80005c0:	3e01      	subs	r6, #1
 80005c2:	1824      	adds	r4, r4, r0
 80005c4:	414d      	adcs	r5, r1
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d006      	beq.n	80005d8 <__udivmoddi4+0x108>
 80005ca:	42ab      	cmp	r3, r5
 80005cc:	d9ee      	bls.n	80005ac <__udivmoddi4+0xdc>
 80005ce:	3e01      	subs	r6, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2e00      	cmp	r6, #0
 80005d6:	d1f8      	bne.n	80005ca <__udivmoddi4+0xfa>
 80005d8:	9800      	ldr	r0, [sp, #0]
 80005da:	9901      	ldr	r1, [sp, #4]
 80005dc:	465b      	mov	r3, fp
 80005de:	1900      	adds	r0, r0, r4
 80005e0:	4169      	adcs	r1, r5
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	db24      	blt.n	8000630 <__udivmoddi4+0x160>
 80005e6:	002b      	movs	r3, r5
 80005e8:	465a      	mov	r2, fp
 80005ea:	4644      	mov	r4, r8
 80005ec:	40d3      	lsrs	r3, r2
 80005ee:	002a      	movs	r2, r5
 80005f0:	40e2      	lsrs	r2, r4
 80005f2:	001c      	movs	r4, r3
 80005f4:	465b      	mov	r3, fp
 80005f6:	0015      	movs	r5, r2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db2a      	blt.n	8000652 <__udivmoddi4+0x182>
 80005fc:	0026      	movs	r6, r4
 80005fe:	409e      	lsls	r6, r3
 8000600:	0033      	movs	r3, r6
 8000602:	0026      	movs	r6, r4
 8000604:	4647      	mov	r7, r8
 8000606:	40be      	lsls	r6, r7
 8000608:	0032      	movs	r2, r6
 800060a:	1a80      	subs	r0, r0, r2
 800060c:	4199      	sbcs	r1, r3
 800060e:	9000      	str	r0, [sp, #0]
 8000610:	9101      	str	r1, [sp, #4]
 8000612:	e79f      	b.n	8000554 <__udivmoddi4+0x84>
 8000614:	42a3      	cmp	r3, r4
 8000616:	d8bc      	bhi.n	8000592 <__udivmoddi4+0xc2>
 8000618:	e783      	b.n	8000522 <__udivmoddi4+0x52>
 800061a:	4642      	mov	r2, r8
 800061c:	2320      	movs	r3, #32
 800061e:	2100      	movs	r1, #0
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	2200      	movs	r2, #0
 8000624:	9100      	str	r1, [sp, #0]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	2201      	movs	r2, #1
 800062a:	40da      	lsrs	r2, r3
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	e786      	b.n	800053e <__udivmoddi4+0x6e>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	002a      	movs	r2, r5
 8000638:	4646      	mov	r6, r8
 800063a:	409a      	lsls	r2, r3
 800063c:	0023      	movs	r3, r4
 800063e:	40f3      	lsrs	r3, r6
 8000640:	4644      	mov	r4, r8
 8000642:	4313      	orrs	r3, r2
 8000644:	002a      	movs	r2, r5
 8000646:	40e2      	lsrs	r2, r4
 8000648:	001c      	movs	r4, r3
 800064a:	465b      	mov	r3, fp
 800064c:	0015      	movs	r5, r2
 800064e:	2b00      	cmp	r3, #0
 8000650:	dad4      	bge.n	80005fc <__udivmoddi4+0x12c>
 8000652:	4642      	mov	r2, r8
 8000654:	002f      	movs	r7, r5
 8000656:	2320      	movs	r3, #32
 8000658:	0026      	movs	r6, r4
 800065a:	4097      	lsls	r7, r2
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	40de      	lsrs	r6, r3
 8000660:	003b      	movs	r3, r7
 8000662:	4333      	orrs	r3, r6
 8000664:	e7cd      	b.n	8000602 <__udivmoddi4+0x132>
 8000666:	46c0      	nop			; (mov r8, r8)

08000668 <__aeabi_fmul>:
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	464f      	mov	r7, r9
 800066c:	4646      	mov	r6, r8
 800066e:	46d6      	mov	lr, sl
 8000670:	0244      	lsls	r4, r0, #9
 8000672:	0045      	lsls	r5, r0, #1
 8000674:	b5c0      	push	{r6, r7, lr}
 8000676:	0a64      	lsrs	r4, r4, #9
 8000678:	1c0f      	adds	r7, r1, #0
 800067a:	0e2d      	lsrs	r5, r5, #24
 800067c:	0fc6      	lsrs	r6, r0, #31
 800067e:	2d00      	cmp	r5, #0
 8000680:	d100      	bne.n	8000684 <__aeabi_fmul+0x1c>
 8000682:	e08d      	b.n	80007a0 <__aeabi_fmul+0x138>
 8000684:	2dff      	cmp	r5, #255	; 0xff
 8000686:	d100      	bne.n	800068a <__aeabi_fmul+0x22>
 8000688:	e092      	b.n	80007b0 <__aeabi_fmul+0x148>
 800068a:	2300      	movs	r3, #0
 800068c:	2080      	movs	r0, #128	; 0x80
 800068e:	4699      	mov	r9, r3
 8000690:	469a      	mov	sl, r3
 8000692:	00e4      	lsls	r4, r4, #3
 8000694:	04c0      	lsls	r0, r0, #19
 8000696:	4304      	orrs	r4, r0
 8000698:	3d7f      	subs	r5, #127	; 0x7f
 800069a:	0278      	lsls	r0, r7, #9
 800069c:	0a43      	lsrs	r3, r0, #9
 800069e:	4698      	mov	r8, r3
 80006a0:	007b      	lsls	r3, r7, #1
 80006a2:	0e1b      	lsrs	r3, r3, #24
 80006a4:	0fff      	lsrs	r7, r7, #31
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fmul+0x44>
 80006aa:	e070      	b.n	800078e <__aeabi_fmul+0x126>
 80006ac:	2bff      	cmp	r3, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fmul+0x4a>
 80006b0:	e086      	b.n	80007c0 <__aeabi_fmul+0x158>
 80006b2:	4642      	mov	r2, r8
 80006b4:	00d0      	lsls	r0, r2, #3
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	3b7f      	subs	r3, #127	; 0x7f
 80006ba:	18ed      	adds	r5, r5, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	04d2      	lsls	r2, r2, #19
 80006c0:	4302      	orrs	r2, r0
 80006c2:	4690      	mov	r8, r2
 80006c4:	469c      	mov	ip, r3
 80006c6:	0031      	movs	r1, r6
 80006c8:	464b      	mov	r3, r9
 80006ca:	4079      	eors	r1, r7
 80006cc:	1c68      	adds	r0, r5, #1
 80006ce:	2b0f      	cmp	r3, #15
 80006d0:	d81c      	bhi.n	800070c <__aeabi_fmul+0xa4>
 80006d2:	4a76      	ldr	r2, [pc, #472]	; (80008ac <__aeabi_fmul+0x244>)
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	58d3      	ldr	r3, [r2, r3]
 80006d8:	469f      	mov	pc, r3
 80006da:	0039      	movs	r1, r7
 80006dc:	4644      	mov	r4, r8
 80006de:	46e2      	mov	sl, ip
 80006e0:	4653      	mov	r3, sl
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d00f      	beq.n	8000706 <__aeabi_fmul+0x9e>
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d100      	bne.n	80006ec <__aeabi_fmul+0x84>
 80006ea:	e0d7      	b.n	800089c <__aeabi_fmul+0x234>
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d137      	bne.n	8000760 <__aeabi_fmul+0xf8>
 80006f0:	2000      	movs	r0, #0
 80006f2:	2400      	movs	r4, #0
 80006f4:	05c0      	lsls	r0, r0, #23
 80006f6:	4320      	orrs	r0, r4
 80006f8:	07c9      	lsls	r1, r1, #31
 80006fa:	4308      	orrs	r0, r1
 80006fc:	bce0      	pop	{r5, r6, r7}
 80006fe:	46ba      	mov	sl, r7
 8000700:	46b1      	mov	r9, r6
 8000702:	46a8      	mov	r8, r5
 8000704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000706:	20ff      	movs	r0, #255	; 0xff
 8000708:	2400      	movs	r4, #0
 800070a:	e7f3      	b.n	80006f4 <__aeabi_fmul+0x8c>
 800070c:	0c26      	lsrs	r6, r4, #16
 800070e:	0424      	lsls	r4, r4, #16
 8000710:	0c22      	lsrs	r2, r4, #16
 8000712:	4644      	mov	r4, r8
 8000714:	0424      	lsls	r4, r4, #16
 8000716:	0c24      	lsrs	r4, r4, #16
 8000718:	4643      	mov	r3, r8
 800071a:	0027      	movs	r7, r4
 800071c:	0c1b      	lsrs	r3, r3, #16
 800071e:	4357      	muls	r7, r2
 8000720:	4374      	muls	r4, r6
 8000722:	435a      	muls	r2, r3
 8000724:	435e      	muls	r6, r3
 8000726:	1912      	adds	r2, r2, r4
 8000728:	0c3b      	lsrs	r3, r7, #16
 800072a:	189b      	adds	r3, r3, r2
 800072c:	429c      	cmp	r4, r3
 800072e:	d903      	bls.n	8000738 <__aeabi_fmul+0xd0>
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0252      	lsls	r2, r2, #9
 8000734:	4694      	mov	ip, r2
 8000736:	4466      	add	r6, ip
 8000738:	043f      	lsls	r7, r7, #16
 800073a:	041a      	lsls	r2, r3, #16
 800073c:	0c3f      	lsrs	r7, r7, #16
 800073e:	19d2      	adds	r2, r2, r7
 8000740:	0194      	lsls	r4, r2, #6
 8000742:	1e67      	subs	r7, r4, #1
 8000744:	41bc      	sbcs	r4, r7
 8000746:	0c1b      	lsrs	r3, r3, #16
 8000748:	0e92      	lsrs	r2, r2, #26
 800074a:	199b      	adds	r3, r3, r6
 800074c:	4314      	orrs	r4, r2
 800074e:	019b      	lsls	r3, r3, #6
 8000750:	431c      	orrs	r4, r3
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	d400      	bmi.n	8000758 <__aeabi_fmul+0xf0>
 8000756:	e09b      	b.n	8000890 <__aeabi_fmul+0x228>
 8000758:	2301      	movs	r3, #1
 800075a:	0862      	lsrs	r2, r4, #1
 800075c:	401c      	ands	r4, r3
 800075e:	4314      	orrs	r4, r2
 8000760:	0002      	movs	r2, r0
 8000762:	327f      	adds	r2, #127	; 0x7f
 8000764:	2a00      	cmp	r2, #0
 8000766:	dd64      	ble.n	8000832 <__aeabi_fmul+0x1ca>
 8000768:	0763      	lsls	r3, r4, #29
 800076a:	d004      	beq.n	8000776 <__aeabi_fmul+0x10e>
 800076c:	230f      	movs	r3, #15
 800076e:	4023      	ands	r3, r4
 8000770:	2b04      	cmp	r3, #4
 8000772:	d000      	beq.n	8000776 <__aeabi_fmul+0x10e>
 8000774:	3404      	adds	r4, #4
 8000776:	0123      	lsls	r3, r4, #4
 8000778:	d503      	bpl.n	8000782 <__aeabi_fmul+0x11a>
 800077a:	0002      	movs	r2, r0
 800077c:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <__aeabi_fmul+0x248>)
 800077e:	3280      	adds	r2, #128	; 0x80
 8000780:	401c      	ands	r4, r3
 8000782:	2afe      	cmp	r2, #254	; 0xfe
 8000784:	dcbf      	bgt.n	8000706 <__aeabi_fmul+0x9e>
 8000786:	01a4      	lsls	r4, r4, #6
 8000788:	0a64      	lsrs	r4, r4, #9
 800078a:	b2d0      	uxtb	r0, r2
 800078c:	e7b2      	b.n	80006f4 <__aeabi_fmul+0x8c>
 800078e:	4643      	mov	r3, r8
 8000790:	2b00      	cmp	r3, #0
 8000792:	d13d      	bne.n	8000810 <__aeabi_fmul+0x1a8>
 8000794:	464a      	mov	r2, r9
 8000796:	3301      	adds	r3, #1
 8000798:	431a      	orrs	r2, r3
 800079a:	4691      	mov	r9, r2
 800079c:	469c      	mov	ip, r3
 800079e:	e792      	b.n	80006c6 <__aeabi_fmul+0x5e>
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	d129      	bne.n	80007f8 <__aeabi_fmul+0x190>
 80007a4:	2304      	movs	r3, #4
 80007a6:	4699      	mov	r9, r3
 80007a8:	3b03      	subs	r3, #3
 80007aa:	2500      	movs	r5, #0
 80007ac:	469a      	mov	sl, r3
 80007ae:	e774      	b.n	800069a <__aeabi_fmul+0x32>
 80007b0:	2c00      	cmp	r4, #0
 80007b2:	d11b      	bne.n	80007ec <__aeabi_fmul+0x184>
 80007b4:	2308      	movs	r3, #8
 80007b6:	4699      	mov	r9, r3
 80007b8:	3b06      	subs	r3, #6
 80007ba:	25ff      	movs	r5, #255	; 0xff
 80007bc:	469a      	mov	sl, r3
 80007be:	e76c      	b.n	800069a <__aeabi_fmul+0x32>
 80007c0:	4643      	mov	r3, r8
 80007c2:	35ff      	adds	r5, #255	; 0xff
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10b      	bne.n	80007e0 <__aeabi_fmul+0x178>
 80007c8:	2302      	movs	r3, #2
 80007ca:	464a      	mov	r2, r9
 80007cc:	431a      	orrs	r2, r3
 80007ce:	4691      	mov	r9, r2
 80007d0:	469c      	mov	ip, r3
 80007d2:	e778      	b.n	80006c6 <__aeabi_fmul+0x5e>
 80007d4:	4653      	mov	r3, sl
 80007d6:	0031      	movs	r1, r6
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d000      	beq.n	80007de <__aeabi_fmul+0x176>
 80007dc:	e783      	b.n	80006e6 <__aeabi_fmul+0x7e>
 80007de:	e792      	b.n	8000706 <__aeabi_fmul+0x9e>
 80007e0:	2303      	movs	r3, #3
 80007e2:	464a      	mov	r2, r9
 80007e4:	431a      	orrs	r2, r3
 80007e6:	4691      	mov	r9, r2
 80007e8:	469c      	mov	ip, r3
 80007ea:	e76c      	b.n	80006c6 <__aeabi_fmul+0x5e>
 80007ec:	230c      	movs	r3, #12
 80007ee:	4699      	mov	r9, r3
 80007f0:	3b09      	subs	r3, #9
 80007f2:	25ff      	movs	r5, #255	; 0xff
 80007f4:	469a      	mov	sl, r3
 80007f6:	e750      	b.n	800069a <__aeabi_fmul+0x32>
 80007f8:	0020      	movs	r0, r4
 80007fa:	f000 fed1 	bl	80015a0 <__clzsi2>
 80007fe:	2576      	movs	r5, #118	; 0x76
 8000800:	1f43      	subs	r3, r0, #5
 8000802:	409c      	lsls	r4, r3
 8000804:	2300      	movs	r3, #0
 8000806:	426d      	negs	r5, r5
 8000808:	4699      	mov	r9, r3
 800080a:	469a      	mov	sl, r3
 800080c:	1a2d      	subs	r5, r5, r0
 800080e:	e744      	b.n	800069a <__aeabi_fmul+0x32>
 8000810:	4640      	mov	r0, r8
 8000812:	f000 fec5 	bl	80015a0 <__clzsi2>
 8000816:	4642      	mov	r2, r8
 8000818:	1f43      	subs	r3, r0, #5
 800081a:	409a      	lsls	r2, r3
 800081c:	2300      	movs	r3, #0
 800081e:	1a2d      	subs	r5, r5, r0
 8000820:	4690      	mov	r8, r2
 8000822:	469c      	mov	ip, r3
 8000824:	3d76      	subs	r5, #118	; 0x76
 8000826:	e74e      	b.n	80006c6 <__aeabi_fmul+0x5e>
 8000828:	2480      	movs	r4, #128	; 0x80
 800082a:	2100      	movs	r1, #0
 800082c:	20ff      	movs	r0, #255	; 0xff
 800082e:	03e4      	lsls	r4, r4, #15
 8000830:	e760      	b.n	80006f4 <__aeabi_fmul+0x8c>
 8000832:	2301      	movs	r3, #1
 8000834:	1a9b      	subs	r3, r3, r2
 8000836:	2b1b      	cmp	r3, #27
 8000838:	dd00      	ble.n	800083c <__aeabi_fmul+0x1d4>
 800083a:	e759      	b.n	80006f0 <__aeabi_fmul+0x88>
 800083c:	0022      	movs	r2, r4
 800083e:	309e      	adds	r0, #158	; 0x9e
 8000840:	40da      	lsrs	r2, r3
 8000842:	4084      	lsls	r4, r0
 8000844:	0013      	movs	r3, r2
 8000846:	1e62      	subs	r2, r4, #1
 8000848:	4194      	sbcs	r4, r2
 800084a:	431c      	orrs	r4, r3
 800084c:	0763      	lsls	r3, r4, #29
 800084e:	d004      	beq.n	800085a <__aeabi_fmul+0x1f2>
 8000850:	230f      	movs	r3, #15
 8000852:	4023      	ands	r3, r4
 8000854:	2b04      	cmp	r3, #4
 8000856:	d000      	beq.n	800085a <__aeabi_fmul+0x1f2>
 8000858:	3404      	adds	r4, #4
 800085a:	0163      	lsls	r3, r4, #5
 800085c:	d51a      	bpl.n	8000894 <__aeabi_fmul+0x22c>
 800085e:	2001      	movs	r0, #1
 8000860:	2400      	movs	r4, #0
 8000862:	e747      	b.n	80006f4 <__aeabi_fmul+0x8c>
 8000864:	2080      	movs	r0, #128	; 0x80
 8000866:	03c0      	lsls	r0, r0, #15
 8000868:	4204      	tst	r4, r0
 800086a:	d009      	beq.n	8000880 <__aeabi_fmul+0x218>
 800086c:	4643      	mov	r3, r8
 800086e:	4203      	tst	r3, r0
 8000870:	d106      	bne.n	8000880 <__aeabi_fmul+0x218>
 8000872:	4644      	mov	r4, r8
 8000874:	4304      	orrs	r4, r0
 8000876:	0264      	lsls	r4, r4, #9
 8000878:	0039      	movs	r1, r7
 800087a:	20ff      	movs	r0, #255	; 0xff
 800087c:	0a64      	lsrs	r4, r4, #9
 800087e:	e739      	b.n	80006f4 <__aeabi_fmul+0x8c>
 8000880:	2080      	movs	r0, #128	; 0x80
 8000882:	03c0      	lsls	r0, r0, #15
 8000884:	4304      	orrs	r4, r0
 8000886:	0264      	lsls	r4, r4, #9
 8000888:	0031      	movs	r1, r6
 800088a:	20ff      	movs	r0, #255	; 0xff
 800088c:	0a64      	lsrs	r4, r4, #9
 800088e:	e731      	b.n	80006f4 <__aeabi_fmul+0x8c>
 8000890:	0028      	movs	r0, r5
 8000892:	e765      	b.n	8000760 <__aeabi_fmul+0xf8>
 8000894:	01a4      	lsls	r4, r4, #6
 8000896:	2000      	movs	r0, #0
 8000898:	0a64      	lsrs	r4, r4, #9
 800089a:	e72b      	b.n	80006f4 <__aeabi_fmul+0x8c>
 800089c:	2080      	movs	r0, #128	; 0x80
 800089e:	03c0      	lsls	r0, r0, #15
 80008a0:	4304      	orrs	r4, r0
 80008a2:	0264      	lsls	r4, r4, #9
 80008a4:	20ff      	movs	r0, #255	; 0xff
 80008a6:	0a64      	lsrs	r4, r4, #9
 80008a8:	e724      	b.n	80006f4 <__aeabi_fmul+0x8c>
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	0800b7e4 	.word	0x0800b7e4
 80008b0:	f7ffffff 	.word	0xf7ffffff

080008b4 <__aeabi_f2iz>:
 80008b4:	0241      	lsls	r1, r0, #9
 80008b6:	0042      	lsls	r2, r0, #1
 80008b8:	0fc3      	lsrs	r3, r0, #31
 80008ba:	0a49      	lsrs	r1, r1, #9
 80008bc:	2000      	movs	r0, #0
 80008be:	0e12      	lsrs	r2, r2, #24
 80008c0:	2a7e      	cmp	r2, #126	; 0x7e
 80008c2:	dd03      	ble.n	80008cc <__aeabi_f2iz+0x18>
 80008c4:	2a9d      	cmp	r2, #157	; 0x9d
 80008c6:	dd02      	ble.n	80008ce <__aeabi_f2iz+0x1a>
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <__aeabi_f2iz+0x3c>)
 80008ca:	1898      	adds	r0, r3, r2
 80008cc:	4770      	bx	lr
 80008ce:	2080      	movs	r0, #128	; 0x80
 80008d0:	0400      	lsls	r0, r0, #16
 80008d2:	4301      	orrs	r1, r0
 80008d4:	2a95      	cmp	r2, #149	; 0x95
 80008d6:	dc07      	bgt.n	80008e8 <__aeabi_f2iz+0x34>
 80008d8:	2096      	movs	r0, #150	; 0x96
 80008da:	1a82      	subs	r2, r0, r2
 80008dc:	40d1      	lsrs	r1, r2
 80008de:	4248      	negs	r0, r1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1f3      	bne.n	80008cc <__aeabi_f2iz+0x18>
 80008e4:	0008      	movs	r0, r1
 80008e6:	e7f1      	b.n	80008cc <__aeabi_f2iz+0x18>
 80008e8:	3a96      	subs	r2, #150	; 0x96
 80008ea:	4091      	lsls	r1, r2
 80008ec:	e7f7      	b.n	80008de <__aeabi_f2iz+0x2a>
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	7fffffff 	.word	0x7fffffff

080008f4 <__aeabi_dadd>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	464f      	mov	r7, r9
 80008f8:	4646      	mov	r6, r8
 80008fa:	46d6      	mov	lr, sl
 80008fc:	000d      	movs	r5, r1
 80008fe:	0004      	movs	r4, r0
 8000900:	b5c0      	push	{r6, r7, lr}
 8000902:	001f      	movs	r7, r3
 8000904:	0011      	movs	r1, r2
 8000906:	0328      	lsls	r0, r5, #12
 8000908:	0f62      	lsrs	r2, r4, #29
 800090a:	0a40      	lsrs	r0, r0, #9
 800090c:	4310      	orrs	r0, r2
 800090e:	007a      	lsls	r2, r7, #1
 8000910:	0d52      	lsrs	r2, r2, #21
 8000912:	00e3      	lsls	r3, r4, #3
 8000914:	033c      	lsls	r4, r7, #12
 8000916:	4691      	mov	r9, r2
 8000918:	0a64      	lsrs	r4, r4, #9
 800091a:	0ffa      	lsrs	r2, r7, #31
 800091c:	0f4f      	lsrs	r7, r1, #29
 800091e:	006e      	lsls	r6, r5, #1
 8000920:	4327      	orrs	r7, r4
 8000922:	4692      	mov	sl, r2
 8000924:	46b8      	mov	r8, r7
 8000926:	0d76      	lsrs	r6, r6, #21
 8000928:	0fed      	lsrs	r5, r5, #31
 800092a:	00c9      	lsls	r1, r1, #3
 800092c:	4295      	cmp	r5, r2
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x3e>
 8000930:	e099      	b.n	8000a66 <__aeabi_dadd+0x172>
 8000932:	464c      	mov	r4, r9
 8000934:	1b34      	subs	r4, r6, r4
 8000936:	46a4      	mov	ip, r4
 8000938:	2c00      	cmp	r4, #0
 800093a:	dc00      	bgt.n	800093e <__aeabi_dadd+0x4a>
 800093c:	e07c      	b.n	8000a38 <__aeabi_dadd+0x144>
 800093e:	464a      	mov	r2, r9
 8000940:	2a00      	cmp	r2, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x52>
 8000944:	e0b8      	b.n	8000ab8 <__aeabi_dadd+0x1c4>
 8000946:	4ac5      	ldr	r2, [pc, #788]	; (8000c5c <__aeabi_dadd+0x368>)
 8000948:	4296      	cmp	r6, r2
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x5a>
 800094c:	e11c      	b.n	8000b88 <__aeabi_dadd+0x294>
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	003c      	movs	r4, r7
 8000952:	0412      	lsls	r2, r2, #16
 8000954:	4314      	orrs	r4, r2
 8000956:	46a0      	mov	r8, r4
 8000958:	4662      	mov	r2, ip
 800095a:	2a38      	cmp	r2, #56	; 0x38
 800095c:	dd00      	ble.n	8000960 <__aeabi_dadd+0x6c>
 800095e:	e161      	b.n	8000c24 <__aeabi_dadd+0x330>
 8000960:	2a1f      	cmp	r2, #31
 8000962:	dd00      	ble.n	8000966 <__aeabi_dadd+0x72>
 8000964:	e1cc      	b.n	8000d00 <__aeabi_dadd+0x40c>
 8000966:	4664      	mov	r4, ip
 8000968:	2220      	movs	r2, #32
 800096a:	1b12      	subs	r2, r2, r4
 800096c:	4644      	mov	r4, r8
 800096e:	4094      	lsls	r4, r2
 8000970:	000f      	movs	r7, r1
 8000972:	46a1      	mov	r9, r4
 8000974:	4664      	mov	r4, ip
 8000976:	4091      	lsls	r1, r2
 8000978:	40e7      	lsrs	r7, r4
 800097a:	464c      	mov	r4, r9
 800097c:	1e4a      	subs	r2, r1, #1
 800097e:	4191      	sbcs	r1, r2
 8000980:	433c      	orrs	r4, r7
 8000982:	4642      	mov	r2, r8
 8000984:	4321      	orrs	r1, r4
 8000986:	4664      	mov	r4, ip
 8000988:	40e2      	lsrs	r2, r4
 800098a:	1a80      	subs	r0, r0, r2
 800098c:	1a5c      	subs	r4, r3, r1
 800098e:	42a3      	cmp	r3, r4
 8000990:	419b      	sbcs	r3, r3
 8000992:	425f      	negs	r7, r3
 8000994:	1bc7      	subs	r7, r0, r7
 8000996:	023b      	lsls	r3, r7, #8
 8000998:	d400      	bmi.n	800099c <__aeabi_dadd+0xa8>
 800099a:	e0d0      	b.n	8000b3e <__aeabi_dadd+0x24a>
 800099c:	027f      	lsls	r7, r7, #9
 800099e:	0a7f      	lsrs	r7, r7, #9
 80009a0:	2f00      	cmp	r7, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0xb2>
 80009a4:	e0ff      	b.n	8000ba6 <__aeabi_dadd+0x2b2>
 80009a6:	0038      	movs	r0, r7
 80009a8:	f000 fdfa 	bl	80015a0 <__clzsi2>
 80009ac:	0001      	movs	r1, r0
 80009ae:	3908      	subs	r1, #8
 80009b0:	2320      	movs	r3, #32
 80009b2:	0022      	movs	r2, r4
 80009b4:	1a5b      	subs	r3, r3, r1
 80009b6:	408f      	lsls	r7, r1
 80009b8:	40da      	lsrs	r2, r3
 80009ba:	408c      	lsls	r4, r1
 80009bc:	4317      	orrs	r7, r2
 80009be:	42b1      	cmp	r1, r6
 80009c0:	da00      	bge.n	80009c4 <__aeabi_dadd+0xd0>
 80009c2:	e0ff      	b.n	8000bc4 <__aeabi_dadd+0x2d0>
 80009c4:	1b89      	subs	r1, r1, r6
 80009c6:	1c4b      	adds	r3, r1, #1
 80009c8:	2b1f      	cmp	r3, #31
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dadd+0xda>
 80009cc:	e0a8      	b.n	8000b20 <__aeabi_dadd+0x22c>
 80009ce:	2220      	movs	r2, #32
 80009d0:	0039      	movs	r1, r7
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	0020      	movs	r0, r4
 80009d6:	4094      	lsls	r4, r2
 80009d8:	4091      	lsls	r1, r2
 80009da:	40d8      	lsrs	r0, r3
 80009dc:	1e62      	subs	r2, r4, #1
 80009de:	4194      	sbcs	r4, r2
 80009e0:	40df      	lsrs	r7, r3
 80009e2:	2600      	movs	r6, #0
 80009e4:	4301      	orrs	r1, r0
 80009e6:	430c      	orrs	r4, r1
 80009e8:	0763      	lsls	r3, r4, #29
 80009ea:	d009      	beq.n	8000a00 <__aeabi_dadd+0x10c>
 80009ec:	230f      	movs	r3, #15
 80009ee:	4023      	ands	r3, r4
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d005      	beq.n	8000a00 <__aeabi_dadd+0x10c>
 80009f4:	1d23      	adds	r3, r4, #4
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	41a4      	sbcs	r4, r4
 80009fa:	4264      	negs	r4, r4
 80009fc:	193f      	adds	r7, r7, r4
 80009fe:	001c      	movs	r4, r3
 8000a00:	023b      	lsls	r3, r7, #8
 8000a02:	d400      	bmi.n	8000a06 <__aeabi_dadd+0x112>
 8000a04:	e09e      	b.n	8000b44 <__aeabi_dadd+0x250>
 8000a06:	4b95      	ldr	r3, [pc, #596]	; (8000c5c <__aeabi_dadd+0x368>)
 8000a08:	3601      	adds	r6, #1
 8000a0a:	429e      	cmp	r6, r3
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dadd+0x11c>
 8000a0e:	e0b7      	b.n	8000b80 <__aeabi_dadd+0x28c>
 8000a10:	4a93      	ldr	r2, [pc, #588]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000a12:	08e4      	lsrs	r4, r4, #3
 8000a14:	4017      	ands	r7, r2
 8000a16:	077b      	lsls	r3, r7, #29
 8000a18:	0571      	lsls	r1, r6, #21
 8000a1a:	027f      	lsls	r7, r7, #9
 8000a1c:	4323      	orrs	r3, r4
 8000a1e:	0b3f      	lsrs	r7, r7, #12
 8000a20:	0d4a      	lsrs	r2, r1, #21
 8000a22:	0512      	lsls	r2, r2, #20
 8000a24:	433a      	orrs	r2, r7
 8000a26:	07ed      	lsls	r5, r5, #31
 8000a28:	432a      	orrs	r2, r5
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	bce0      	pop	{r5, r6, r7}
 8000a30:	46ba      	mov	sl, r7
 8000a32:	46b1      	mov	r9, r6
 8000a34:	46a8      	mov	r8, r5
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	d04b      	beq.n	8000ad4 <__aeabi_dadd+0x1e0>
 8000a3c:	464c      	mov	r4, r9
 8000a3e:	1ba4      	subs	r4, r4, r6
 8000a40:	46a4      	mov	ip, r4
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d000      	beq.n	8000a48 <__aeabi_dadd+0x154>
 8000a46:	e123      	b.n	8000c90 <__aeabi_dadd+0x39c>
 8000a48:	0004      	movs	r4, r0
 8000a4a:	431c      	orrs	r4, r3
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dadd+0x15c>
 8000a4e:	e1af      	b.n	8000db0 <__aeabi_dadd+0x4bc>
 8000a50:	4662      	mov	r2, ip
 8000a52:	1e54      	subs	r4, r2, #1
 8000a54:	2a01      	cmp	r2, #1
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x166>
 8000a58:	e215      	b.n	8000e86 <__aeabi_dadd+0x592>
 8000a5a:	4d80      	ldr	r5, [pc, #512]	; (8000c5c <__aeabi_dadd+0x368>)
 8000a5c:	45ac      	cmp	ip, r5
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_dadd+0x16e>
 8000a60:	e1c8      	b.n	8000df4 <__aeabi_dadd+0x500>
 8000a62:	46a4      	mov	ip, r4
 8000a64:	e11b      	b.n	8000c9e <__aeabi_dadd+0x3aa>
 8000a66:	464a      	mov	r2, r9
 8000a68:	1ab2      	subs	r2, r6, r2
 8000a6a:	4694      	mov	ip, r2
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	dc00      	bgt.n	8000a72 <__aeabi_dadd+0x17e>
 8000a70:	e0ac      	b.n	8000bcc <__aeabi_dadd+0x2d8>
 8000a72:	464a      	mov	r2, r9
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d043      	beq.n	8000b00 <__aeabi_dadd+0x20c>
 8000a78:	4a78      	ldr	r2, [pc, #480]	; (8000c5c <__aeabi_dadd+0x368>)
 8000a7a:	4296      	cmp	r6, r2
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x18c>
 8000a7e:	e1af      	b.n	8000de0 <__aeabi_dadd+0x4ec>
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	003c      	movs	r4, r7
 8000a84:	0412      	lsls	r2, r2, #16
 8000a86:	4314      	orrs	r4, r2
 8000a88:	46a0      	mov	r8, r4
 8000a8a:	4662      	mov	r2, ip
 8000a8c:	2a38      	cmp	r2, #56	; 0x38
 8000a8e:	dc67      	bgt.n	8000b60 <__aeabi_dadd+0x26c>
 8000a90:	2a1f      	cmp	r2, #31
 8000a92:	dc00      	bgt.n	8000a96 <__aeabi_dadd+0x1a2>
 8000a94:	e15f      	b.n	8000d56 <__aeabi_dadd+0x462>
 8000a96:	4647      	mov	r7, r8
 8000a98:	3a20      	subs	r2, #32
 8000a9a:	40d7      	lsrs	r7, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	2a20      	cmp	r2, #32
 8000aa0:	d005      	beq.n	8000aae <__aeabi_dadd+0x1ba>
 8000aa2:	4664      	mov	r4, ip
 8000aa4:	2240      	movs	r2, #64	; 0x40
 8000aa6:	1b12      	subs	r2, r2, r4
 8000aa8:	4644      	mov	r4, r8
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	4321      	orrs	r1, r4
 8000aae:	1e4a      	subs	r2, r1, #1
 8000ab0:	4191      	sbcs	r1, r2
 8000ab2:	000c      	movs	r4, r1
 8000ab4:	433c      	orrs	r4, r7
 8000ab6:	e057      	b.n	8000b68 <__aeabi_dadd+0x274>
 8000ab8:	003a      	movs	r2, r7
 8000aba:	430a      	orrs	r2, r1
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x1cc>
 8000abe:	e105      	b.n	8000ccc <__aeabi_dadd+0x3d8>
 8000ac0:	0022      	movs	r2, r4
 8000ac2:	3a01      	subs	r2, #1
 8000ac4:	2c01      	cmp	r4, #1
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x1d6>
 8000ac8:	e182      	b.n	8000dd0 <__aeabi_dadd+0x4dc>
 8000aca:	4c64      	ldr	r4, [pc, #400]	; (8000c5c <__aeabi_dadd+0x368>)
 8000acc:	45a4      	cmp	ip, r4
 8000ace:	d05b      	beq.n	8000b88 <__aeabi_dadd+0x294>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	e741      	b.n	8000958 <__aeabi_dadd+0x64>
 8000ad4:	4c63      	ldr	r4, [pc, #396]	; (8000c64 <__aeabi_dadd+0x370>)
 8000ad6:	1c77      	adds	r7, r6, #1
 8000ad8:	4227      	tst	r7, r4
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x1ea>
 8000adc:	e0c4      	b.n	8000c68 <__aeabi_dadd+0x374>
 8000ade:	0004      	movs	r4, r0
 8000ae0:	431c      	orrs	r4, r3
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_dadd+0x1f4>
 8000ae6:	e169      	b.n	8000dbc <__aeabi_dadd+0x4c8>
 8000ae8:	2c00      	cmp	r4, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_dadd+0x1fa>
 8000aec:	e1bf      	b.n	8000e6e <__aeabi_dadd+0x57a>
 8000aee:	4644      	mov	r4, r8
 8000af0:	430c      	orrs	r4, r1
 8000af2:	d000      	beq.n	8000af6 <__aeabi_dadd+0x202>
 8000af4:	e1d0      	b.n	8000e98 <__aeabi_dadd+0x5a4>
 8000af6:	0742      	lsls	r2, r0, #29
 8000af8:	08db      	lsrs	r3, r3, #3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	08c0      	lsrs	r0, r0, #3
 8000afe:	e029      	b.n	8000b54 <__aeabi_dadd+0x260>
 8000b00:	003a      	movs	r2, r7
 8000b02:	430a      	orrs	r2, r1
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dadd+0x214>
 8000b06:	e170      	b.n	8000dea <__aeabi_dadd+0x4f6>
 8000b08:	4662      	mov	r2, ip
 8000b0a:	4664      	mov	r4, ip
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	2c01      	cmp	r4, #1
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x220>
 8000b12:	e0e0      	b.n	8000cd6 <__aeabi_dadd+0x3e2>
 8000b14:	4c51      	ldr	r4, [pc, #324]	; (8000c5c <__aeabi_dadd+0x368>)
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x228>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x4ec>
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	e7b4      	b.n	8000a8a <__aeabi_dadd+0x196>
 8000b20:	003a      	movs	r2, r7
 8000b22:	391f      	subs	r1, #31
 8000b24:	40ca      	lsrs	r2, r1
 8000b26:	0011      	movs	r1, r2
 8000b28:	2b20      	cmp	r3, #32
 8000b2a:	d003      	beq.n	8000b34 <__aeabi_dadd+0x240>
 8000b2c:	2240      	movs	r2, #64	; 0x40
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	409f      	lsls	r7, r3
 8000b32:	433c      	orrs	r4, r7
 8000b34:	1e63      	subs	r3, r4, #1
 8000b36:	419c      	sbcs	r4, r3
 8000b38:	2700      	movs	r7, #0
 8000b3a:	2600      	movs	r6, #0
 8000b3c:	430c      	orrs	r4, r1
 8000b3e:	0763      	lsls	r3, r4, #29
 8000b40:	d000      	beq.n	8000b44 <__aeabi_dadd+0x250>
 8000b42:	e753      	b.n	80009ec <__aeabi_dadd+0xf8>
 8000b44:	46b4      	mov	ip, r6
 8000b46:	08e4      	lsrs	r4, r4, #3
 8000b48:	077b      	lsls	r3, r7, #29
 8000b4a:	4323      	orrs	r3, r4
 8000b4c:	08f8      	lsrs	r0, r7, #3
 8000b4e:	4a43      	ldr	r2, [pc, #268]	; (8000c5c <__aeabi_dadd+0x368>)
 8000b50:	4594      	cmp	ip, r2
 8000b52:	d01d      	beq.n	8000b90 <__aeabi_dadd+0x29c>
 8000b54:	4662      	mov	r2, ip
 8000b56:	0307      	lsls	r7, r0, #12
 8000b58:	0552      	lsls	r2, r2, #21
 8000b5a:	0b3f      	lsrs	r7, r7, #12
 8000b5c:	0d52      	lsrs	r2, r2, #21
 8000b5e:	e760      	b.n	8000a22 <__aeabi_dadd+0x12e>
 8000b60:	4644      	mov	r4, r8
 8000b62:	430c      	orrs	r4, r1
 8000b64:	1e62      	subs	r2, r4, #1
 8000b66:	4194      	sbcs	r4, r2
 8000b68:	18e4      	adds	r4, r4, r3
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	419b      	sbcs	r3, r3
 8000b6e:	425f      	negs	r7, r3
 8000b70:	183f      	adds	r7, r7, r0
 8000b72:	023b      	lsls	r3, r7, #8
 8000b74:	d5e3      	bpl.n	8000b3e <__aeabi_dadd+0x24a>
 8000b76:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <__aeabi_dadd+0x368>)
 8000b78:	3601      	adds	r6, #1
 8000b7a:	429e      	cmp	r6, r3
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_dadd+0x28c>
 8000b7e:	e0b5      	b.n	8000cec <__aeabi_dadd+0x3f8>
 8000b80:	0032      	movs	r2, r6
 8000b82:	2700      	movs	r7, #0
 8000b84:	2300      	movs	r3, #0
 8000b86:	e74c      	b.n	8000a22 <__aeabi_dadd+0x12e>
 8000b88:	0742      	lsls	r2, r0, #29
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	08c0      	lsrs	r0, r0, #3
 8000b90:	001a      	movs	r2, r3
 8000b92:	4302      	orrs	r2, r0
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x2a4>
 8000b96:	e1e1      	b.n	8000f5c <__aeabi_dadd+0x668>
 8000b98:	2780      	movs	r7, #128	; 0x80
 8000b9a:	033f      	lsls	r7, r7, #12
 8000b9c:	4307      	orrs	r7, r0
 8000b9e:	033f      	lsls	r7, r7, #12
 8000ba0:	4a2e      	ldr	r2, [pc, #184]	; (8000c5c <__aeabi_dadd+0x368>)
 8000ba2:	0b3f      	lsrs	r7, r7, #12
 8000ba4:	e73d      	b.n	8000a22 <__aeabi_dadd+0x12e>
 8000ba6:	0020      	movs	r0, r4
 8000ba8:	f000 fcfa 	bl	80015a0 <__clzsi2>
 8000bac:	0001      	movs	r1, r0
 8000bae:	3118      	adds	r1, #24
 8000bb0:	291f      	cmp	r1, #31
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_dadd+0x2c2>
 8000bb4:	e6fc      	b.n	80009b0 <__aeabi_dadd+0xbc>
 8000bb6:	3808      	subs	r0, #8
 8000bb8:	4084      	lsls	r4, r0
 8000bba:	0027      	movs	r7, r4
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	42b1      	cmp	r1, r6
 8000bc0:	db00      	blt.n	8000bc4 <__aeabi_dadd+0x2d0>
 8000bc2:	e6ff      	b.n	80009c4 <__aeabi_dadd+0xd0>
 8000bc4:	4a26      	ldr	r2, [pc, #152]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000bc6:	1a76      	subs	r6, r6, r1
 8000bc8:	4017      	ands	r7, r2
 8000bca:	e70d      	b.n	80009e8 <__aeabi_dadd+0xf4>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d02f      	beq.n	8000c30 <__aeabi_dadd+0x33c>
 8000bd0:	464a      	mov	r2, r9
 8000bd2:	1b92      	subs	r2, r2, r6
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dadd+0x2e8>
 8000bda:	e0ad      	b.n	8000d38 <__aeabi_dadd+0x444>
 8000bdc:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <__aeabi_dadd+0x368>)
 8000bde:	4591      	cmp	r9, r2
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0x2f0>
 8000be2:	e10f      	b.n	8000e04 <__aeabi_dadd+0x510>
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	0412      	lsls	r2, r2, #16
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4662      	mov	r2, ip
 8000bec:	2a38      	cmp	r2, #56	; 0x38
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_dadd+0x2fe>
 8000bf0:	e10f      	b.n	8000e12 <__aeabi_dadd+0x51e>
 8000bf2:	2a1f      	cmp	r2, #31
 8000bf4:	dd00      	ble.n	8000bf8 <__aeabi_dadd+0x304>
 8000bf6:	e180      	b.n	8000efa <__aeabi_dadd+0x606>
 8000bf8:	4664      	mov	r4, ip
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	001e      	movs	r6, r3
 8000bfe:	1b12      	subs	r2, r2, r4
 8000c00:	4667      	mov	r7, ip
 8000c02:	0004      	movs	r4, r0
 8000c04:	4093      	lsls	r3, r2
 8000c06:	4094      	lsls	r4, r2
 8000c08:	40fe      	lsrs	r6, r7
 8000c0a:	1e5a      	subs	r2, r3, #1
 8000c0c:	4193      	sbcs	r3, r2
 8000c0e:	40f8      	lsrs	r0, r7
 8000c10:	4334      	orrs	r4, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	4480      	add	r8, r0
 8000c16:	1864      	adds	r4, r4, r1
 8000c18:	428c      	cmp	r4, r1
 8000c1a:	41bf      	sbcs	r7, r7
 8000c1c:	427f      	negs	r7, r7
 8000c1e:	464e      	mov	r6, r9
 8000c20:	4447      	add	r7, r8
 8000c22:	e7a6      	b.n	8000b72 <__aeabi_dadd+0x27e>
 8000c24:	4642      	mov	r2, r8
 8000c26:	430a      	orrs	r2, r1
 8000c28:	0011      	movs	r1, r2
 8000c2a:	1e4a      	subs	r2, r1, #1
 8000c2c:	4191      	sbcs	r1, r2
 8000c2e:	e6ad      	b.n	800098c <__aeabi_dadd+0x98>
 8000c30:	4c0c      	ldr	r4, [pc, #48]	; (8000c64 <__aeabi_dadd+0x370>)
 8000c32:	1c72      	adds	r2, r6, #1
 8000c34:	4222      	tst	r2, r4
 8000c36:	d000      	beq.n	8000c3a <__aeabi_dadd+0x346>
 8000c38:	e0a1      	b.n	8000d7e <__aeabi_dadd+0x48a>
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x350>
 8000c42:	e0fa      	b.n	8000e3a <__aeabi_dadd+0x546>
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dadd+0x356>
 8000c48:	e145      	b.n	8000ed6 <__aeabi_dadd+0x5e2>
 8000c4a:	003a      	movs	r2, r7
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	d000      	beq.n	8000c52 <__aeabi_dadd+0x35e>
 8000c50:	e146      	b.n	8000ee0 <__aeabi_dadd+0x5ec>
 8000c52:	0742      	lsls	r2, r0, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c0      	lsrs	r0, r0, #3
 8000c5a:	e77b      	b.n	8000b54 <__aeabi_dadd+0x260>
 8000c5c:	000007ff 	.word	0x000007ff
 8000c60:	ff7fffff 	.word	0xff7fffff
 8000c64:	000007fe 	.word	0x000007fe
 8000c68:	4647      	mov	r7, r8
 8000c6a:	1a5c      	subs	r4, r3, r1
 8000c6c:	1bc2      	subs	r2, r0, r7
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	41bf      	sbcs	r7, r7
 8000c72:	427f      	negs	r7, r7
 8000c74:	46b9      	mov	r9, r7
 8000c76:	0017      	movs	r7, r2
 8000c78:	464a      	mov	r2, r9
 8000c7a:	1abf      	subs	r7, r7, r2
 8000c7c:	023a      	lsls	r2, r7, #8
 8000c7e:	d500      	bpl.n	8000c82 <__aeabi_dadd+0x38e>
 8000c80:	e08d      	b.n	8000d9e <__aeabi_dadd+0x4aa>
 8000c82:	0023      	movs	r3, r4
 8000c84:	433b      	orrs	r3, r7
 8000c86:	d000      	beq.n	8000c8a <__aeabi_dadd+0x396>
 8000c88:	e68a      	b.n	80009a0 <__aeabi_dadd+0xac>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	e761      	b.n	8000b54 <__aeabi_dadd+0x260>
 8000c90:	4cb4      	ldr	r4, [pc, #720]	; (8000f64 <__aeabi_dadd+0x670>)
 8000c92:	45a1      	cmp	r9, r4
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x3a4>
 8000c96:	e0ad      	b.n	8000df4 <__aeabi_dadd+0x500>
 8000c98:	2480      	movs	r4, #128	; 0x80
 8000c9a:	0424      	lsls	r4, r4, #16
 8000c9c:	4320      	orrs	r0, r4
 8000c9e:	4664      	mov	r4, ip
 8000ca0:	2c38      	cmp	r4, #56	; 0x38
 8000ca2:	dc3d      	bgt.n	8000d20 <__aeabi_dadd+0x42c>
 8000ca4:	4662      	mov	r2, ip
 8000ca6:	2c1f      	cmp	r4, #31
 8000ca8:	dd00      	ble.n	8000cac <__aeabi_dadd+0x3b8>
 8000caa:	e0b7      	b.n	8000e1c <__aeabi_dadd+0x528>
 8000cac:	2520      	movs	r5, #32
 8000cae:	001e      	movs	r6, r3
 8000cb0:	1b2d      	subs	r5, r5, r4
 8000cb2:	0004      	movs	r4, r0
 8000cb4:	40ab      	lsls	r3, r5
 8000cb6:	40ac      	lsls	r4, r5
 8000cb8:	40d6      	lsrs	r6, r2
 8000cba:	40d0      	lsrs	r0, r2
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	1e5d      	subs	r5, r3, #1
 8000cc0:	41ab      	sbcs	r3, r5
 8000cc2:	4334      	orrs	r4, r6
 8000cc4:	1a12      	subs	r2, r2, r0
 8000cc6:	4690      	mov	r8, r2
 8000cc8:	4323      	orrs	r3, r4
 8000cca:	e02c      	b.n	8000d26 <__aeabi_dadd+0x432>
 8000ccc:	0742      	lsls	r2, r0, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c0      	lsrs	r0, r0, #3
 8000cd4:	e73b      	b.n	8000b4e <__aeabi_dadd+0x25a>
 8000cd6:	185c      	adds	r4, r3, r1
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	4440      	add	r0, r8
 8000cde:	425b      	negs	r3, r3
 8000ce0:	18c7      	adds	r7, r0, r3
 8000ce2:	2601      	movs	r6, #1
 8000ce4:	023b      	lsls	r3, r7, #8
 8000ce6:	d400      	bmi.n	8000cea <__aeabi_dadd+0x3f6>
 8000ce8:	e729      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000cea:	2602      	movs	r6, #2
 8000cec:	4a9e      	ldr	r2, [pc, #632]	; (8000f68 <__aeabi_dadd+0x674>)
 8000cee:	0863      	lsrs	r3, r4, #1
 8000cf0:	4017      	ands	r7, r2
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4014      	ands	r4, r2
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	07fb      	lsls	r3, r7, #31
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	087f      	lsrs	r7, r7, #1
 8000cfe:	e673      	b.n	80009e8 <__aeabi_dadd+0xf4>
 8000d00:	4644      	mov	r4, r8
 8000d02:	3a20      	subs	r2, #32
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	4662      	mov	r2, ip
 8000d08:	2a20      	cmp	r2, #32
 8000d0a:	d005      	beq.n	8000d18 <__aeabi_dadd+0x424>
 8000d0c:	4667      	mov	r7, ip
 8000d0e:	2240      	movs	r2, #64	; 0x40
 8000d10:	1bd2      	subs	r2, r2, r7
 8000d12:	4647      	mov	r7, r8
 8000d14:	4097      	lsls	r7, r2
 8000d16:	4339      	orrs	r1, r7
 8000d18:	1e4a      	subs	r2, r1, #1
 8000d1a:	4191      	sbcs	r1, r2
 8000d1c:	4321      	orrs	r1, r4
 8000d1e:	e635      	b.n	800098c <__aeabi_dadd+0x98>
 8000d20:	4303      	orrs	r3, r0
 8000d22:	1e58      	subs	r0, r3, #1
 8000d24:	4183      	sbcs	r3, r0
 8000d26:	1acc      	subs	r4, r1, r3
 8000d28:	42a1      	cmp	r1, r4
 8000d2a:	41bf      	sbcs	r7, r7
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	427f      	negs	r7, r7
 8000d30:	4655      	mov	r5, sl
 8000d32:	464e      	mov	r6, r9
 8000d34:	1bdf      	subs	r7, r3, r7
 8000d36:	e62e      	b.n	8000996 <__aeabi_dadd+0xa2>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dadd+0x44c>
 8000d3e:	e0bd      	b.n	8000ebc <__aeabi_dadd+0x5c8>
 8000d40:	4662      	mov	r2, ip
 8000d42:	4664      	mov	r4, ip
 8000d44:	3a01      	subs	r2, #1
 8000d46:	2c01      	cmp	r4, #1
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x458>
 8000d4a:	e0e5      	b.n	8000f18 <__aeabi_dadd+0x624>
 8000d4c:	4c85      	ldr	r4, [pc, #532]	; (8000f64 <__aeabi_dadd+0x670>)
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d058      	beq.n	8000e04 <__aeabi_dadd+0x510>
 8000d52:	4694      	mov	ip, r2
 8000d54:	e749      	b.n	8000bea <__aeabi_dadd+0x2f6>
 8000d56:	4664      	mov	r4, ip
 8000d58:	2220      	movs	r2, #32
 8000d5a:	1b12      	subs	r2, r2, r4
 8000d5c:	4644      	mov	r4, r8
 8000d5e:	4094      	lsls	r4, r2
 8000d60:	000f      	movs	r7, r1
 8000d62:	46a1      	mov	r9, r4
 8000d64:	4664      	mov	r4, ip
 8000d66:	4091      	lsls	r1, r2
 8000d68:	40e7      	lsrs	r7, r4
 8000d6a:	464c      	mov	r4, r9
 8000d6c:	1e4a      	subs	r2, r1, #1
 8000d6e:	4191      	sbcs	r1, r2
 8000d70:	433c      	orrs	r4, r7
 8000d72:	4642      	mov	r2, r8
 8000d74:	430c      	orrs	r4, r1
 8000d76:	4661      	mov	r1, ip
 8000d78:	40ca      	lsrs	r2, r1
 8000d7a:	1880      	adds	r0, r0, r2
 8000d7c:	e6f4      	b.n	8000b68 <__aeabi_dadd+0x274>
 8000d7e:	4c79      	ldr	r4, [pc, #484]	; (8000f64 <__aeabi_dadd+0x670>)
 8000d80:	42a2      	cmp	r2, r4
 8000d82:	d100      	bne.n	8000d86 <__aeabi_dadd+0x492>
 8000d84:	e6fd      	b.n	8000b82 <__aeabi_dadd+0x28e>
 8000d86:	1859      	adds	r1, r3, r1
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	419b      	sbcs	r3, r3
 8000d8c:	4440      	add	r0, r8
 8000d8e:	425f      	negs	r7, r3
 8000d90:	19c7      	adds	r7, r0, r7
 8000d92:	07fc      	lsls	r4, r7, #31
 8000d94:	0849      	lsrs	r1, r1, #1
 8000d96:	0016      	movs	r6, r2
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	087f      	lsrs	r7, r7, #1
 8000d9c:	e6cf      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000d9e:	1acc      	subs	r4, r1, r3
 8000da0:	42a1      	cmp	r1, r4
 8000da2:	41bf      	sbcs	r7, r7
 8000da4:	4643      	mov	r3, r8
 8000da6:	427f      	negs	r7, r7
 8000da8:	1a18      	subs	r0, r3, r0
 8000daa:	4655      	mov	r5, sl
 8000dac:	1bc7      	subs	r7, r0, r7
 8000dae:	e5f7      	b.n	80009a0 <__aeabi_dadd+0xac>
 8000db0:	08c9      	lsrs	r1, r1, #3
 8000db2:	077b      	lsls	r3, r7, #29
 8000db4:	4655      	mov	r5, sl
 8000db6:	430b      	orrs	r3, r1
 8000db8:	08f8      	lsrs	r0, r7, #3
 8000dba:	e6c8      	b.n	8000b4e <__aeabi_dadd+0x25a>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d000      	beq.n	8000dc2 <__aeabi_dadd+0x4ce>
 8000dc0:	e081      	b.n	8000ec6 <__aeabi_dadd+0x5d2>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	d115      	bne.n	8000df4 <__aeabi_dadd+0x500>
 8000dc8:	2080      	movs	r0, #128	; 0x80
 8000dca:	2500      	movs	r5, #0
 8000dcc:	0300      	lsls	r0, r0, #12
 8000dce:	e6e3      	b.n	8000b98 <__aeabi_dadd+0x2a4>
 8000dd0:	1a5c      	subs	r4, r3, r1
 8000dd2:	42a3      	cmp	r3, r4
 8000dd4:	419b      	sbcs	r3, r3
 8000dd6:	1bc7      	subs	r7, r0, r7
 8000dd8:	425b      	negs	r3, r3
 8000dda:	2601      	movs	r6, #1
 8000ddc:	1aff      	subs	r7, r7, r3
 8000dde:	e5da      	b.n	8000996 <__aeabi_dadd+0xa2>
 8000de0:	0742      	lsls	r2, r0, #29
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	08c0      	lsrs	r0, r0, #3
 8000de8:	e6d2      	b.n	8000b90 <__aeabi_dadd+0x29c>
 8000dea:	0742      	lsls	r2, r0, #29
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	08c0      	lsrs	r0, r0, #3
 8000df2:	e6ac      	b.n	8000b4e <__aeabi_dadd+0x25a>
 8000df4:	4643      	mov	r3, r8
 8000df6:	4642      	mov	r2, r8
 8000df8:	08c9      	lsrs	r1, r1, #3
 8000dfa:	075b      	lsls	r3, r3, #29
 8000dfc:	4655      	mov	r5, sl
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	08d0      	lsrs	r0, r2, #3
 8000e02:	e6c5      	b.n	8000b90 <__aeabi_dadd+0x29c>
 8000e04:	4643      	mov	r3, r8
 8000e06:	4642      	mov	r2, r8
 8000e08:	075b      	lsls	r3, r3, #29
 8000e0a:	08c9      	lsrs	r1, r1, #3
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	08d0      	lsrs	r0, r2, #3
 8000e10:	e6be      	b.n	8000b90 <__aeabi_dadd+0x29c>
 8000e12:	4303      	orrs	r3, r0
 8000e14:	001c      	movs	r4, r3
 8000e16:	1e63      	subs	r3, r4, #1
 8000e18:	419c      	sbcs	r4, r3
 8000e1a:	e6fc      	b.n	8000c16 <__aeabi_dadd+0x322>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	3c20      	subs	r4, #32
 8000e20:	40e2      	lsrs	r2, r4
 8000e22:	0014      	movs	r4, r2
 8000e24:	4662      	mov	r2, ip
 8000e26:	2a20      	cmp	r2, #32
 8000e28:	d003      	beq.n	8000e32 <__aeabi_dadd+0x53e>
 8000e2a:	2540      	movs	r5, #64	; 0x40
 8000e2c:	1aad      	subs	r5, r5, r2
 8000e2e:	40a8      	lsls	r0, r5
 8000e30:	4303      	orrs	r3, r0
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	4183      	sbcs	r3, r0
 8000e36:	4323      	orrs	r3, r4
 8000e38:	e775      	b.n	8000d26 <__aeabi_dadd+0x432>
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	d0e2      	beq.n	8000e04 <__aeabi_dadd+0x510>
 8000e3e:	003a      	movs	r2, r7
 8000e40:	430a      	orrs	r2, r1
 8000e42:	d0cd      	beq.n	8000de0 <__aeabi_dadd+0x4ec>
 8000e44:	0742      	lsls	r2, r0, #29
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	08c0      	lsrs	r0, r0, #3
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	4210      	tst	r0, r2
 8000e52:	d006      	beq.n	8000e62 <__aeabi_dadd+0x56e>
 8000e54:	08fc      	lsrs	r4, r7, #3
 8000e56:	4214      	tst	r4, r2
 8000e58:	d103      	bne.n	8000e62 <__aeabi_dadd+0x56e>
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	08cb      	lsrs	r3, r1, #3
 8000e5e:	077a      	lsls	r2, r7, #29
 8000e60:	4313      	orrs	r3, r2
 8000e62:	0f5a      	lsrs	r2, r3, #29
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	0752      	lsls	r2, r2, #29
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	e690      	b.n	8000b90 <__aeabi_dadd+0x29c>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	430b      	orrs	r3, r1
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dadd+0x582>
 8000e74:	e709      	b.n	8000c8a <__aeabi_dadd+0x396>
 8000e76:	4643      	mov	r3, r8
 8000e78:	4642      	mov	r2, r8
 8000e7a:	08c9      	lsrs	r1, r1, #3
 8000e7c:	075b      	lsls	r3, r3, #29
 8000e7e:	4655      	mov	r5, sl
 8000e80:	430b      	orrs	r3, r1
 8000e82:	08d0      	lsrs	r0, r2, #3
 8000e84:	e666      	b.n	8000b54 <__aeabi_dadd+0x260>
 8000e86:	1acc      	subs	r4, r1, r3
 8000e88:	42a1      	cmp	r1, r4
 8000e8a:	4189      	sbcs	r1, r1
 8000e8c:	1a3f      	subs	r7, r7, r0
 8000e8e:	4249      	negs	r1, r1
 8000e90:	4655      	mov	r5, sl
 8000e92:	2601      	movs	r6, #1
 8000e94:	1a7f      	subs	r7, r7, r1
 8000e96:	e57e      	b.n	8000996 <__aeabi_dadd+0xa2>
 8000e98:	4642      	mov	r2, r8
 8000e9a:	1a5c      	subs	r4, r3, r1
 8000e9c:	1a87      	subs	r7, r0, r2
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	4192      	sbcs	r2, r2
 8000ea2:	4252      	negs	r2, r2
 8000ea4:	1abf      	subs	r7, r7, r2
 8000ea6:	023a      	lsls	r2, r7, #8
 8000ea8:	d53d      	bpl.n	8000f26 <__aeabi_dadd+0x632>
 8000eaa:	1acc      	subs	r4, r1, r3
 8000eac:	42a1      	cmp	r1, r4
 8000eae:	4189      	sbcs	r1, r1
 8000eb0:	4643      	mov	r3, r8
 8000eb2:	4249      	negs	r1, r1
 8000eb4:	1a1f      	subs	r7, r3, r0
 8000eb6:	4655      	mov	r5, sl
 8000eb8:	1a7f      	subs	r7, r7, r1
 8000eba:	e595      	b.n	80009e8 <__aeabi_dadd+0xf4>
 8000ebc:	077b      	lsls	r3, r7, #29
 8000ebe:	08c9      	lsrs	r1, r1, #3
 8000ec0:	430b      	orrs	r3, r1
 8000ec2:	08f8      	lsrs	r0, r7, #3
 8000ec4:	e643      	b.n	8000b4e <__aeabi_dadd+0x25a>
 8000ec6:	4644      	mov	r4, r8
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	430c      	orrs	r4, r1
 8000ecc:	d130      	bne.n	8000f30 <__aeabi_dadd+0x63c>
 8000ece:	0742      	lsls	r2, r0, #29
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	08c0      	lsrs	r0, r0, #3
 8000ed4:	e65c      	b.n	8000b90 <__aeabi_dadd+0x29c>
 8000ed6:	077b      	lsls	r3, r7, #29
 8000ed8:	08c9      	lsrs	r1, r1, #3
 8000eda:	430b      	orrs	r3, r1
 8000edc:	08f8      	lsrs	r0, r7, #3
 8000ede:	e639      	b.n	8000b54 <__aeabi_dadd+0x260>
 8000ee0:	185c      	adds	r4, r3, r1
 8000ee2:	429c      	cmp	r4, r3
 8000ee4:	419b      	sbcs	r3, r3
 8000ee6:	4440      	add	r0, r8
 8000ee8:	425b      	negs	r3, r3
 8000eea:	18c7      	adds	r7, r0, r3
 8000eec:	023b      	lsls	r3, r7, #8
 8000eee:	d400      	bmi.n	8000ef2 <__aeabi_dadd+0x5fe>
 8000ef0:	e625      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <__aeabi_dadd+0x674>)
 8000ef4:	2601      	movs	r6, #1
 8000ef6:	401f      	ands	r7, r3
 8000ef8:	e621      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000efa:	0004      	movs	r4, r0
 8000efc:	3a20      	subs	r2, #32
 8000efe:	40d4      	lsrs	r4, r2
 8000f00:	4662      	mov	r2, ip
 8000f02:	2a20      	cmp	r2, #32
 8000f04:	d004      	beq.n	8000f10 <__aeabi_dadd+0x61c>
 8000f06:	2240      	movs	r2, #64	; 0x40
 8000f08:	4666      	mov	r6, ip
 8000f0a:	1b92      	subs	r2, r2, r6
 8000f0c:	4090      	lsls	r0, r2
 8000f0e:	4303      	orrs	r3, r0
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	4193      	sbcs	r3, r2
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e67e      	b.n	8000c16 <__aeabi_dadd+0x322>
 8000f18:	185c      	adds	r4, r3, r1
 8000f1a:	428c      	cmp	r4, r1
 8000f1c:	4189      	sbcs	r1, r1
 8000f1e:	4440      	add	r0, r8
 8000f20:	4249      	negs	r1, r1
 8000f22:	1847      	adds	r7, r0, r1
 8000f24:	e6dd      	b.n	8000ce2 <__aeabi_dadd+0x3ee>
 8000f26:	0023      	movs	r3, r4
 8000f28:	433b      	orrs	r3, r7
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x63a>
 8000f2c:	e6ad      	b.n	8000c8a <__aeabi_dadd+0x396>
 8000f2e:	e606      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000f30:	0744      	lsls	r4, r0, #29
 8000f32:	4323      	orrs	r3, r4
 8000f34:	2480      	movs	r4, #128	; 0x80
 8000f36:	08c0      	lsrs	r0, r0, #3
 8000f38:	0324      	lsls	r4, r4, #12
 8000f3a:	4220      	tst	r0, r4
 8000f3c:	d008      	beq.n	8000f50 <__aeabi_dadd+0x65c>
 8000f3e:	4642      	mov	r2, r8
 8000f40:	08d6      	lsrs	r6, r2, #3
 8000f42:	4226      	tst	r6, r4
 8000f44:	d104      	bne.n	8000f50 <__aeabi_dadd+0x65c>
 8000f46:	4655      	mov	r5, sl
 8000f48:	0030      	movs	r0, r6
 8000f4a:	08cb      	lsrs	r3, r1, #3
 8000f4c:	0751      	lsls	r1, r2, #29
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	0f5a      	lsrs	r2, r3, #29
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	0752      	lsls	r2, r2, #29
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	e619      	b.n	8000b90 <__aeabi_dadd+0x29c>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4a01      	ldr	r2, [pc, #4]	; (8000f64 <__aeabi_dadd+0x670>)
 8000f60:	001f      	movs	r7, r3
 8000f62:	e55e      	b.n	8000a22 <__aeabi_dadd+0x12e>
 8000f64:	000007ff 	.word	0x000007ff
 8000f68:	ff7fffff 	.word	0xff7fffff

08000f6c <__aeabi_dmul>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	4657      	mov	r7, sl
 8000f70:	464e      	mov	r6, r9
 8000f72:	4645      	mov	r5, r8
 8000f74:	46de      	mov	lr, fp
 8000f76:	b5e0      	push	{r5, r6, r7, lr}
 8000f78:	4698      	mov	r8, r3
 8000f7a:	030c      	lsls	r4, r1, #12
 8000f7c:	004b      	lsls	r3, r1, #1
 8000f7e:	0006      	movs	r6, r0
 8000f80:	4692      	mov	sl, r2
 8000f82:	b087      	sub	sp, #28
 8000f84:	0b24      	lsrs	r4, r4, #12
 8000f86:	0d5b      	lsrs	r3, r3, #21
 8000f88:	0fcf      	lsrs	r7, r1, #31
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dmul+0x24>
 8000f8e:	e15c      	b.n	800124a <__aeabi_dmul+0x2de>
 8000f90:	4ad9      	ldr	r2, [pc, #868]	; (80012f8 <__aeabi_dmul+0x38c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dmul+0x2c>
 8000f96:	e175      	b.n	8001284 <__aeabi_dmul+0x318>
 8000f98:	0f42      	lsrs	r2, r0, #29
 8000f9a:	00e4      	lsls	r4, r4, #3
 8000f9c:	4314      	orrs	r4, r2
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	0412      	lsls	r2, r2, #16
 8000fa2:	4314      	orrs	r4, r2
 8000fa4:	4ad5      	ldr	r2, [pc, #852]	; (80012fc <__aeabi_dmul+0x390>)
 8000fa6:	00c5      	lsls	r5, r0, #3
 8000fa8:	4694      	mov	ip, r2
 8000faa:	4463      	add	r3, ip
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	469b      	mov	fp, r3
 8000fb4:	4643      	mov	r3, r8
 8000fb6:	4642      	mov	r2, r8
 8000fb8:	031e      	lsls	r6, r3, #12
 8000fba:	0fd2      	lsrs	r2, r2, #31
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4650      	mov	r0, sl
 8000fc0:	4690      	mov	r8, r2
 8000fc2:	0b36      	lsrs	r6, r6, #12
 8000fc4:	0d5b      	lsrs	r3, r3, #21
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dmul+0x5e>
 8000fc8:	e120      	b.n	800120c <__aeabi_dmul+0x2a0>
 8000fca:	4acb      	ldr	r2, [pc, #812]	; (80012f8 <__aeabi_dmul+0x38c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_dmul+0x66>
 8000fd0:	e162      	b.n	8001298 <__aeabi_dmul+0x32c>
 8000fd2:	49ca      	ldr	r1, [pc, #808]	; (80012fc <__aeabi_dmul+0x390>)
 8000fd4:	0f42      	lsrs	r2, r0, #29
 8000fd6:	468c      	mov	ip, r1
 8000fd8:	9900      	ldr	r1, [sp, #0]
 8000fda:	4463      	add	r3, ip
 8000fdc:	00f6      	lsls	r6, r6, #3
 8000fde:	468c      	mov	ip, r1
 8000fe0:	4316      	orrs	r6, r2
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	449c      	add	ip, r3
 8000fe6:	0412      	lsls	r2, r2, #16
 8000fe8:	4663      	mov	r3, ip
 8000fea:	4316      	orrs	r6, r2
 8000fec:	00c2      	lsls	r2, r0, #3
 8000fee:	2000      	movs	r0, #0
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	9900      	ldr	r1, [sp, #0]
 8000ff4:	4643      	mov	r3, r8
 8000ff6:	3101      	adds	r1, #1
 8000ff8:	468c      	mov	ip, r1
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	407b      	eors	r3, r7
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	290f      	cmp	r1, #15
 8001002:	d826      	bhi.n	8001052 <__aeabi_dmul+0xe6>
 8001004:	4bbe      	ldr	r3, [pc, #760]	; (8001300 <__aeabi_dmul+0x394>)
 8001006:	0089      	lsls	r1, r1, #2
 8001008:	5859      	ldr	r1, [r3, r1]
 800100a:	468f      	mov	pc, r1
 800100c:	4643      	mov	r3, r8
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	0034      	movs	r4, r6
 8001012:	0015      	movs	r5, r2
 8001014:	4683      	mov	fp, r0
 8001016:	465b      	mov	r3, fp
 8001018:	2b02      	cmp	r3, #2
 800101a:	d016      	beq.n	800104a <__aeabi_dmul+0xde>
 800101c:	2b03      	cmp	r3, #3
 800101e:	d100      	bne.n	8001022 <__aeabi_dmul+0xb6>
 8001020:	e203      	b.n	800142a <__aeabi_dmul+0x4be>
 8001022:	2b01      	cmp	r3, #1
 8001024:	d000      	beq.n	8001028 <__aeabi_dmul+0xbc>
 8001026:	e0cd      	b.n	80011c4 <__aeabi_dmul+0x258>
 8001028:	2200      	movs	r2, #0
 800102a:	2400      	movs	r4, #0
 800102c:	2500      	movs	r5, #0
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	0512      	lsls	r2, r2, #20
 8001032:	4322      	orrs	r2, r4
 8001034:	07db      	lsls	r3, r3, #31
 8001036:	431a      	orrs	r2, r3
 8001038:	0028      	movs	r0, r5
 800103a:	0011      	movs	r1, r2
 800103c:	b007      	add	sp, #28
 800103e:	bcf0      	pop	{r4, r5, r6, r7}
 8001040:	46bb      	mov	fp, r7
 8001042:	46b2      	mov	sl, r6
 8001044:	46a9      	mov	r9, r5
 8001046:	46a0      	mov	r8, r4
 8001048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104a:	2400      	movs	r4, #0
 800104c:	2500      	movs	r5, #0
 800104e:	4aaa      	ldr	r2, [pc, #680]	; (80012f8 <__aeabi_dmul+0x38c>)
 8001050:	e7ed      	b.n	800102e <__aeabi_dmul+0xc2>
 8001052:	0c28      	lsrs	r0, r5, #16
 8001054:	042d      	lsls	r5, r5, #16
 8001056:	0c2d      	lsrs	r5, r5, #16
 8001058:	002b      	movs	r3, r5
 800105a:	0c11      	lsrs	r1, r2, #16
 800105c:	0412      	lsls	r2, r2, #16
 800105e:	0c12      	lsrs	r2, r2, #16
 8001060:	4353      	muls	r3, r2
 8001062:	4698      	mov	r8, r3
 8001064:	0013      	movs	r3, r2
 8001066:	002f      	movs	r7, r5
 8001068:	4343      	muls	r3, r0
 800106a:	4699      	mov	r9, r3
 800106c:	434f      	muls	r7, r1
 800106e:	444f      	add	r7, r9
 8001070:	46bb      	mov	fp, r7
 8001072:	4647      	mov	r7, r8
 8001074:	000b      	movs	r3, r1
 8001076:	0c3f      	lsrs	r7, r7, #16
 8001078:	46ba      	mov	sl, r7
 800107a:	4343      	muls	r3, r0
 800107c:	44da      	add	sl, fp
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	45d1      	cmp	r9, sl
 8001082:	d904      	bls.n	800108e <__aeabi_dmul+0x122>
 8001084:	2780      	movs	r7, #128	; 0x80
 8001086:	027f      	lsls	r7, r7, #9
 8001088:	46b9      	mov	r9, r7
 800108a:	444b      	add	r3, r9
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	4653      	mov	r3, sl
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	469b      	mov	fp, r3
 8001094:	4653      	mov	r3, sl
 8001096:	041f      	lsls	r7, r3, #16
 8001098:	4643      	mov	r3, r8
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	0c1b      	lsrs	r3, r3, #16
 800109e:	4698      	mov	r8, r3
 80010a0:	003b      	movs	r3, r7
 80010a2:	4443      	add	r3, r8
 80010a4:	9304      	str	r3, [sp, #16]
 80010a6:	0c33      	lsrs	r3, r6, #16
 80010a8:	0436      	lsls	r6, r6, #16
 80010aa:	0c36      	lsrs	r6, r6, #16
 80010ac:	4698      	mov	r8, r3
 80010ae:	0033      	movs	r3, r6
 80010b0:	4343      	muls	r3, r0
 80010b2:	4699      	mov	r9, r3
 80010b4:	4643      	mov	r3, r8
 80010b6:	4343      	muls	r3, r0
 80010b8:	002f      	movs	r7, r5
 80010ba:	469a      	mov	sl, r3
 80010bc:	4643      	mov	r3, r8
 80010be:	4377      	muls	r7, r6
 80010c0:	435d      	muls	r5, r3
 80010c2:	0c38      	lsrs	r0, r7, #16
 80010c4:	444d      	add	r5, r9
 80010c6:	1945      	adds	r5, r0, r5
 80010c8:	45a9      	cmp	r9, r5
 80010ca:	d903      	bls.n	80010d4 <__aeabi_dmul+0x168>
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	025b      	lsls	r3, r3, #9
 80010d0:	4699      	mov	r9, r3
 80010d2:	44ca      	add	sl, r9
 80010d4:	043f      	lsls	r7, r7, #16
 80010d6:	0c28      	lsrs	r0, r5, #16
 80010d8:	0c3f      	lsrs	r7, r7, #16
 80010da:	042d      	lsls	r5, r5, #16
 80010dc:	19ed      	adds	r5, r5, r7
 80010de:	0c27      	lsrs	r7, r4, #16
 80010e0:	0424      	lsls	r4, r4, #16
 80010e2:	0c24      	lsrs	r4, r4, #16
 80010e4:	0003      	movs	r3, r0
 80010e6:	0020      	movs	r0, r4
 80010e8:	4350      	muls	r0, r2
 80010ea:	437a      	muls	r2, r7
 80010ec:	4691      	mov	r9, r2
 80010ee:	003a      	movs	r2, r7
 80010f0:	4453      	add	r3, sl
 80010f2:	9305      	str	r3, [sp, #20]
 80010f4:	0c03      	lsrs	r3, r0, #16
 80010f6:	469a      	mov	sl, r3
 80010f8:	434a      	muls	r2, r1
 80010fa:	4361      	muls	r1, r4
 80010fc:	4449      	add	r1, r9
 80010fe:	4451      	add	r1, sl
 8001100:	44ab      	add	fp, r5
 8001102:	4589      	cmp	r9, r1
 8001104:	d903      	bls.n	800110e <__aeabi_dmul+0x1a2>
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	025b      	lsls	r3, r3, #9
 800110a:	4699      	mov	r9, r3
 800110c:	444a      	add	r2, r9
 800110e:	0400      	lsls	r0, r0, #16
 8001110:	0c0b      	lsrs	r3, r1, #16
 8001112:	0c00      	lsrs	r0, r0, #16
 8001114:	0409      	lsls	r1, r1, #16
 8001116:	1809      	adds	r1, r1, r0
 8001118:	0020      	movs	r0, r4
 800111a:	4699      	mov	r9, r3
 800111c:	4643      	mov	r3, r8
 800111e:	4370      	muls	r0, r6
 8001120:	435c      	muls	r4, r3
 8001122:	437e      	muls	r6, r7
 8001124:	435f      	muls	r7, r3
 8001126:	0c03      	lsrs	r3, r0, #16
 8001128:	4698      	mov	r8, r3
 800112a:	19a4      	adds	r4, r4, r6
 800112c:	4444      	add	r4, r8
 800112e:	444a      	add	r2, r9
 8001130:	9703      	str	r7, [sp, #12]
 8001132:	42a6      	cmp	r6, r4
 8001134:	d904      	bls.n	8001140 <__aeabi_dmul+0x1d4>
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	4698      	mov	r8, r3
 800113c:	4447      	add	r7, r8
 800113e:	9703      	str	r7, [sp, #12]
 8001140:	0423      	lsls	r3, r4, #16
 8001142:	9e02      	ldr	r6, [sp, #8]
 8001144:	469a      	mov	sl, r3
 8001146:	9b05      	ldr	r3, [sp, #20]
 8001148:	445e      	add	r6, fp
 800114a:	4698      	mov	r8, r3
 800114c:	42ae      	cmp	r6, r5
 800114e:	41ad      	sbcs	r5, r5
 8001150:	1876      	adds	r6, r6, r1
 8001152:	428e      	cmp	r6, r1
 8001154:	4189      	sbcs	r1, r1
 8001156:	0400      	lsls	r0, r0, #16
 8001158:	0c00      	lsrs	r0, r0, #16
 800115a:	4450      	add	r0, sl
 800115c:	4440      	add	r0, r8
 800115e:	426d      	negs	r5, r5
 8001160:	1947      	adds	r7, r0, r5
 8001162:	46b8      	mov	r8, r7
 8001164:	4693      	mov	fp, r2
 8001166:	4249      	negs	r1, r1
 8001168:	4689      	mov	r9, r1
 800116a:	44c3      	add	fp, r8
 800116c:	44d9      	add	r9, fp
 800116e:	4298      	cmp	r0, r3
 8001170:	4180      	sbcs	r0, r0
 8001172:	45a8      	cmp	r8, r5
 8001174:	41ad      	sbcs	r5, r5
 8001176:	4593      	cmp	fp, r2
 8001178:	4192      	sbcs	r2, r2
 800117a:	4589      	cmp	r9, r1
 800117c:	4189      	sbcs	r1, r1
 800117e:	426d      	negs	r5, r5
 8001180:	4240      	negs	r0, r0
 8001182:	4328      	orrs	r0, r5
 8001184:	0c24      	lsrs	r4, r4, #16
 8001186:	4252      	negs	r2, r2
 8001188:	4249      	negs	r1, r1
 800118a:	430a      	orrs	r2, r1
 800118c:	9b03      	ldr	r3, [sp, #12]
 800118e:	1900      	adds	r0, r0, r4
 8001190:	1880      	adds	r0, r0, r2
 8001192:	18c7      	adds	r7, r0, r3
 8001194:	464b      	mov	r3, r9
 8001196:	0ddc      	lsrs	r4, r3, #23
 8001198:	9b04      	ldr	r3, [sp, #16]
 800119a:	0275      	lsls	r5, r6, #9
 800119c:	431d      	orrs	r5, r3
 800119e:	1e6a      	subs	r2, r5, #1
 80011a0:	4195      	sbcs	r5, r2
 80011a2:	464b      	mov	r3, r9
 80011a4:	0df6      	lsrs	r6, r6, #23
 80011a6:	027f      	lsls	r7, r7, #9
 80011a8:	4335      	orrs	r5, r6
 80011aa:	025a      	lsls	r2, r3, #9
 80011ac:	433c      	orrs	r4, r7
 80011ae:	4315      	orrs	r5, r2
 80011b0:	01fb      	lsls	r3, r7, #7
 80011b2:	d400      	bmi.n	80011b6 <__aeabi_dmul+0x24a>
 80011b4:	e11c      	b.n	80013f0 <__aeabi_dmul+0x484>
 80011b6:	2101      	movs	r1, #1
 80011b8:	086a      	lsrs	r2, r5, #1
 80011ba:	400d      	ands	r5, r1
 80011bc:	4315      	orrs	r5, r2
 80011be:	07e2      	lsls	r2, r4, #31
 80011c0:	4315      	orrs	r5, r2
 80011c2:	0864      	lsrs	r4, r4, #1
 80011c4:	494f      	ldr	r1, [pc, #316]	; (8001304 <__aeabi_dmul+0x398>)
 80011c6:	4461      	add	r1, ip
 80011c8:	2900      	cmp	r1, #0
 80011ca:	dc00      	bgt.n	80011ce <__aeabi_dmul+0x262>
 80011cc:	e0b0      	b.n	8001330 <__aeabi_dmul+0x3c4>
 80011ce:	076b      	lsls	r3, r5, #29
 80011d0:	d009      	beq.n	80011e6 <__aeabi_dmul+0x27a>
 80011d2:	220f      	movs	r2, #15
 80011d4:	402a      	ands	r2, r5
 80011d6:	2a04      	cmp	r2, #4
 80011d8:	d005      	beq.n	80011e6 <__aeabi_dmul+0x27a>
 80011da:	1d2a      	adds	r2, r5, #4
 80011dc:	42aa      	cmp	r2, r5
 80011de:	41ad      	sbcs	r5, r5
 80011e0:	426d      	negs	r5, r5
 80011e2:	1964      	adds	r4, r4, r5
 80011e4:	0015      	movs	r5, r2
 80011e6:	01e3      	lsls	r3, r4, #7
 80011e8:	d504      	bpl.n	80011f4 <__aeabi_dmul+0x288>
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	4a46      	ldr	r2, [pc, #280]	; (8001308 <__aeabi_dmul+0x39c>)
 80011ee:	00c9      	lsls	r1, r1, #3
 80011f0:	4014      	ands	r4, r2
 80011f2:	4461      	add	r1, ip
 80011f4:	4a45      	ldr	r2, [pc, #276]	; (800130c <__aeabi_dmul+0x3a0>)
 80011f6:	4291      	cmp	r1, r2
 80011f8:	dd00      	ble.n	80011fc <__aeabi_dmul+0x290>
 80011fa:	e726      	b.n	800104a <__aeabi_dmul+0xde>
 80011fc:	0762      	lsls	r2, r4, #29
 80011fe:	08ed      	lsrs	r5, r5, #3
 8001200:	0264      	lsls	r4, r4, #9
 8001202:	0549      	lsls	r1, r1, #21
 8001204:	4315      	orrs	r5, r2
 8001206:	0b24      	lsrs	r4, r4, #12
 8001208:	0d4a      	lsrs	r2, r1, #21
 800120a:	e710      	b.n	800102e <__aeabi_dmul+0xc2>
 800120c:	4652      	mov	r2, sl
 800120e:	4332      	orrs	r2, r6
 8001210:	d100      	bne.n	8001214 <__aeabi_dmul+0x2a8>
 8001212:	e07f      	b.n	8001314 <__aeabi_dmul+0x3a8>
 8001214:	2e00      	cmp	r6, #0
 8001216:	d100      	bne.n	800121a <__aeabi_dmul+0x2ae>
 8001218:	e0dc      	b.n	80013d4 <__aeabi_dmul+0x468>
 800121a:	0030      	movs	r0, r6
 800121c:	f000 f9c0 	bl	80015a0 <__clzsi2>
 8001220:	0002      	movs	r2, r0
 8001222:	3a0b      	subs	r2, #11
 8001224:	231d      	movs	r3, #29
 8001226:	0001      	movs	r1, r0
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	4652      	mov	r2, sl
 800122c:	3908      	subs	r1, #8
 800122e:	40da      	lsrs	r2, r3
 8001230:	408e      	lsls	r6, r1
 8001232:	4316      	orrs	r6, r2
 8001234:	4652      	mov	r2, sl
 8001236:	408a      	lsls	r2, r1
 8001238:	9b00      	ldr	r3, [sp, #0]
 800123a:	4935      	ldr	r1, [pc, #212]	; (8001310 <__aeabi_dmul+0x3a4>)
 800123c:	1a18      	subs	r0, r3, r0
 800123e:	0003      	movs	r3, r0
 8001240:	468c      	mov	ip, r1
 8001242:	4463      	add	r3, ip
 8001244:	2000      	movs	r0, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	e6d3      	b.n	8000ff2 <__aeabi_dmul+0x86>
 800124a:	0025      	movs	r5, r4
 800124c:	4305      	orrs	r5, r0
 800124e:	d04a      	beq.n	80012e6 <__aeabi_dmul+0x37a>
 8001250:	2c00      	cmp	r4, #0
 8001252:	d100      	bne.n	8001256 <__aeabi_dmul+0x2ea>
 8001254:	e0b0      	b.n	80013b8 <__aeabi_dmul+0x44c>
 8001256:	0020      	movs	r0, r4
 8001258:	f000 f9a2 	bl	80015a0 <__clzsi2>
 800125c:	0001      	movs	r1, r0
 800125e:	0002      	movs	r2, r0
 8001260:	390b      	subs	r1, #11
 8001262:	231d      	movs	r3, #29
 8001264:	0010      	movs	r0, r2
 8001266:	1a5b      	subs	r3, r3, r1
 8001268:	0031      	movs	r1, r6
 800126a:	0035      	movs	r5, r6
 800126c:	3808      	subs	r0, #8
 800126e:	4084      	lsls	r4, r0
 8001270:	40d9      	lsrs	r1, r3
 8001272:	4085      	lsls	r5, r0
 8001274:	430c      	orrs	r4, r1
 8001276:	4826      	ldr	r0, [pc, #152]	; (8001310 <__aeabi_dmul+0x3a4>)
 8001278:	1a83      	subs	r3, r0, r2
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2300      	movs	r3, #0
 800127e:	4699      	mov	r9, r3
 8001280:	469b      	mov	fp, r3
 8001282:	e697      	b.n	8000fb4 <__aeabi_dmul+0x48>
 8001284:	0005      	movs	r5, r0
 8001286:	4325      	orrs	r5, r4
 8001288:	d126      	bne.n	80012d8 <__aeabi_dmul+0x36c>
 800128a:	2208      	movs	r2, #8
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2302      	movs	r3, #2
 8001290:	2400      	movs	r4, #0
 8001292:	4691      	mov	r9, r2
 8001294:	469b      	mov	fp, r3
 8001296:	e68d      	b.n	8000fb4 <__aeabi_dmul+0x48>
 8001298:	4652      	mov	r2, sl
 800129a:	9b00      	ldr	r3, [sp, #0]
 800129c:	4332      	orrs	r2, r6
 800129e:	d110      	bne.n	80012c2 <__aeabi_dmul+0x356>
 80012a0:	4915      	ldr	r1, [pc, #84]	; (80012f8 <__aeabi_dmul+0x38c>)
 80012a2:	2600      	movs	r6, #0
 80012a4:	468c      	mov	ip, r1
 80012a6:	4463      	add	r3, ip
 80012a8:	4649      	mov	r1, r9
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2302      	movs	r3, #2
 80012ae:	4319      	orrs	r1, r3
 80012b0:	4689      	mov	r9, r1
 80012b2:	2002      	movs	r0, #2
 80012b4:	e69d      	b.n	8000ff2 <__aeabi_dmul+0x86>
 80012b6:	465b      	mov	r3, fp
 80012b8:	9701      	str	r7, [sp, #4]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d000      	beq.n	80012c0 <__aeabi_dmul+0x354>
 80012be:	e6ad      	b.n	800101c <__aeabi_dmul+0xb0>
 80012c0:	e6c3      	b.n	800104a <__aeabi_dmul+0xde>
 80012c2:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <__aeabi_dmul+0x38c>)
 80012c4:	2003      	movs	r0, #3
 80012c6:	4694      	mov	ip, r2
 80012c8:	4463      	add	r3, ip
 80012ca:	464a      	mov	r2, r9
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2303      	movs	r3, #3
 80012d0:	431a      	orrs	r2, r3
 80012d2:	4691      	mov	r9, r2
 80012d4:	4652      	mov	r2, sl
 80012d6:	e68c      	b.n	8000ff2 <__aeabi_dmul+0x86>
 80012d8:	220c      	movs	r2, #12
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2303      	movs	r3, #3
 80012de:	0005      	movs	r5, r0
 80012e0:	4691      	mov	r9, r2
 80012e2:	469b      	mov	fp, r3
 80012e4:	e666      	b.n	8000fb4 <__aeabi_dmul+0x48>
 80012e6:	2304      	movs	r3, #4
 80012e8:	4699      	mov	r9, r3
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	2400      	movs	r4, #0
 80012f2:	469b      	mov	fp, r3
 80012f4:	e65e      	b.n	8000fb4 <__aeabi_dmul+0x48>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	000007ff 	.word	0x000007ff
 80012fc:	fffffc01 	.word	0xfffffc01
 8001300:	0800b824 	.word	0x0800b824
 8001304:	000003ff 	.word	0x000003ff
 8001308:	feffffff 	.word	0xfeffffff
 800130c:	000007fe 	.word	0x000007fe
 8001310:	fffffc0d 	.word	0xfffffc0d
 8001314:	4649      	mov	r1, r9
 8001316:	2301      	movs	r3, #1
 8001318:	4319      	orrs	r1, r3
 800131a:	4689      	mov	r9, r1
 800131c:	2600      	movs	r6, #0
 800131e:	2001      	movs	r0, #1
 8001320:	e667      	b.n	8000ff2 <__aeabi_dmul+0x86>
 8001322:	2300      	movs	r3, #0
 8001324:	2480      	movs	r4, #128	; 0x80
 8001326:	2500      	movs	r5, #0
 8001328:	4a43      	ldr	r2, [pc, #268]	; (8001438 <__aeabi_dmul+0x4cc>)
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	0324      	lsls	r4, r4, #12
 800132e:	e67e      	b.n	800102e <__aeabi_dmul+0xc2>
 8001330:	2001      	movs	r0, #1
 8001332:	1a40      	subs	r0, r0, r1
 8001334:	2838      	cmp	r0, #56	; 0x38
 8001336:	dd00      	ble.n	800133a <__aeabi_dmul+0x3ce>
 8001338:	e676      	b.n	8001028 <__aeabi_dmul+0xbc>
 800133a:	281f      	cmp	r0, #31
 800133c:	dd5b      	ble.n	80013f6 <__aeabi_dmul+0x48a>
 800133e:	221f      	movs	r2, #31
 8001340:	0023      	movs	r3, r4
 8001342:	4252      	negs	r2, r2
 8001344:	1a51      	subs	r1, r2, r1
 8001346:	40cb      	lsrs	r3, r1
 8001348:	0019      	movs	r1, r3
 800134a:	2820      	cmp	r0, #32
 800134c:	d003      	beq.n	8001356 <__aeabi_dmul+0x3ea>
 800134e:	4a3b      	ldr	r2, [pc, #236]	; (800143c <__aeabi_dmul+0x4d0>)
 8001350:	4462      	add	r2, ip
 8001352:	4094      	lsls	r4, r2
 8001354:	4325      	orrs	r5, r4
 8001356:	1e6a      	subs	r2, r5, #1
 8001358:	4195      	sbcs	r5, r2
 800135a:	002a      	movs	r2, r5
 800135c:	430a      	orrs	r2, r1
 800135e:	2107      	movs	r1, #7
 8001360:	000d      	movs	r5, r1
 8001362:	2400      	movs	r4, #0
 8001364:	4015      	ands	r5, r2
 8001366:	4211      	tst	r1, r2
 8001368:	d05b      	beq.n	8001422 <__aeabi_dmul+0x4b6>
 800136a:	210f      	movs	r1, #15
 800136c:	2400      	movs	r4, #0
 800136e:	4011      	ands	r1, r2
 8001370:	2904      	cmp	r1, #4
 8001372:	d053      	beq.n	800141c <__aeabi_dmul+0x4b0>
 8001374:	1d11      	adds	r1, r2, #4
 8001376:	4291      	cmp	r1, r2
 8001378:	4192      	sbcs	r2, r2
 800137a:	4252      	negs	r2, r2
 800137c:	18a4      	adds	r4, r4, r2
 800137e:	000a      	movs	r2, r1
 8001380:	0223      	lsls	r3, r4, #8
 8001382:	d54b      	bpl.n	800141c <__aeabi_dmul+0x4b0>
 8001384:	2201      	movs	r2, #1
 8001386:	2400      	movs	r4, #0
 8001388:	2500      	movs	r5, #0
 800138a:	e650      	b.n	800102e <__aeabi_dmul+0xc2>
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	031b      	lsls	r3, r3, #12
 8001390:	421c      	tst	r4, r3
 8001392:	d009      	beq.n	80013a8 <__aeabi_dmul+0x43c>
 8001394:	421e      	tst	r6, r3
 8001396:	d107      	bne.n	80013a8 <__aeabi_dmul+0x43c>
 8001398:	4333      	orrs	r3, r6
 800139a:	031c      	lsls	r4, r3, #12
 800139c:	4643      	mov	r3, r8
 800139e:	0015      	movs	r5, r2
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	4a25      	ldr	r2, [pc, #148]	; (8001438 <__aeabi_dmul+0x4cc>)
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	e642      	b.n	800102e <__aeabi_dmul+0xc2>
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	0312      	lsls	r2, r2, #12
 80013ac:	4314      	orrs	r4, r2
 80013ae:	0324      	lsls	r4, r4, #12
 80013b0:	4a21      	ldr	r2, [pc, #132]	; (8001438 <__aeabi_dmul+0x4cc>)
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	9701      	str	r7, [sp, #4]
 80013b6:	e63a      	b.n	800102e <__aeabi_dmul+0xc2>
 80013b8:	f000 f8f2 	bl	80015a0 <__clzsi2>
 80013bc:	0001      	movs	r1, r0
 80013be:	0002      	movs	r2, r0
 80013c0:	3115      	adds	r1, #21
 80013c2:	3220      	adds	r2, #32
 80013c4:	291c      	cmp	r1, #28
 80013c6:	dc00      	bgt.n	80013ca <__aeabi_dmul+0x45e>
 80013c8:	e74b      	b.n	8001262 <__aeabi_dmul+0x2f6>
 80013ca:	0034      	movs	r4, r6
 80013cc:	3808      	subs	r0, #8
 80013ce:	2500      	movs	r5, #0
 80013d0:	4084      	lsls	r4, r0
 80013d2:	e750      	b.n	8001276 <__aeabi_dmul+0x30a>
 80013d4:	f000 f8e4 	bl	80015a0 <__clzsi2>
 80013d8:	0003      	movs	r3, r0
 80013da:	001a      	movs	r2, r3
 80013dc:	3215      	adds	r2, #21
 80013de:	3020      	adds	r0, #32
 80013e0:	2a1c      	cmp	r2, #28
 80013e2:	dc00      	bgt.n	80013e6 <__aeabi_dmul+0x47a>
 80013e4:	e71e      	b.n	8001224 <__aeabi_dmul+0x2b8>
 80013e6:	4656      	mov	r6, sl
 80013e8:	3b08      	subs	r3, #8
 80013ea:	2200      	movs	r2, #0
 80013ec:	409e      	lsls	r6, r3
 80013ee:	e723      	b.n	8001238 <__aeabi_dmul+0x2cc>
 80013f0:	9b00      	ldr	r3, [sp, #0]
 80013f2:	469c      	mov	ip, r3
 80013f4:	e6e6      	b.n	80011c4 <__aeabi_dmul+0x258>
 80013f6:	4912      	ldr	r1, [pc, #72]	; (8001440 <__aeabi_dmul+0x4d4>)
 80013f8:	0022      	movs	r2, r4
 80013fa:	4461      	add	r1, ip
 80013fc:	002e      	movs	r6, r5
 80013fe:	408d      	lsls	r5, r1
 8001400:	408a      	lsls	r2, r1
 8001402:	40c6      	lsrs	r6, r0
 8001404:	1e69      	subs	r1, r5, #1
 8001406:	418d      	sbcs	r5, r1
 8001408:	4332      	orrs	r2, r6
 800140a:	432a      	orrs	r2, r5
 800140c:	40c4      	lsrs	r4, r0
 800140e:	0753      	lsls	r3, r2, #29
 8001410:	d0b6      	beq.n	8001380 <__aeabi_dmul+0x414>
 8001412:	210f      	movs	r1, #15
 8001414:	4011      	ands	r1, r2
 8001416:	2904      	cmp	r1, #4
 8001418:	d1ac      	bne.n	8001374 <__aeabi_dmul+0x408>
 800141a:	e7b1      	b.n	8001380 <__aeabi_dmul+0x414>
 800141c:	0765      	lsls	r5, r4, #29
 800141e:	0264      	lsls	r4, r4, #9
 8001420:	0b24      	lsrs	r4, r4, #12
 8001422:	08d2      	lsrs	r2, r2, #3
 8001424:	4315      	orrs	r5, r2
 8001426:	2200      	movs	r2, #0
 8001428:	e601      	b.n	800102e <__aeabi_dmul+0xc2>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0312      	lsls	r2, r2, #12
 800142e:	4314      	orrs	r4, r2
 8001430:	0324      	lsls	r4, r4, #12
 8001432:	4a01      	ldr	r2, [pc, #4]	; (8001438 <__aeabi_dmul+0x4cc>)
 8001434:	0b24      	lsrs	r4, r4, #12
 8001436:	e5fa      	b.n	800102e <__aeabi_dmul+0xc2>
 8001438:	000007ff 	.word	0x000007ff
 800143c:	0000043e 	.word	0x0000043e
 8001440:	0000041e 	.word	0x0000041e

08001444 <__aeabi_ui2d>:
 8001444:	b510      	push	{r4, lr}
 8001446:	1e04      	subs	r4, r0, #0
 8001448:	d010      	beq.n	800146c <__aeabi_ui2d+0x28>
 800144a:	f000 f8a9 	bl	80015a0 <__clzsi2>
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <__aeabi_ui2d+0x48>)
 8001450:	1a1b      	subs	r3, r3, r0
 8001452:	280a      	cmp	r0, #10
 8001454:	dc11      	bgt.n	800147a <__aeabi_ui2d+0x36>
 8001456:	220b      	movs	r2, #11
 8001458:	0021      	movs	r1, r4
 800145a:	1a12      	subs	r2, r2, r0
 800145c:	40d1      	lsrs	r1, r2
 800145e:	3015      	adds	r0, #21
 8001460:	030a      	lsls	r2, r1, #12
 8001462:	055b      	lsls	r3, r3, #21
 8001464:	4084      	lsls	r4, r0
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0d5b      	lsrs	r3, r3, #21
 800146a:	e001      	b.n	8001470 <__aeabi_ui2d+0x2c>
 800146c:	2300      	movs	r3, #0
 800146e:	2200      	movs	r2, #0
 8001470:	051b      	lsls	r3, r3, #20
 8001472:	4313      	orrs	r3, r2
 8001474:	0020      	movs	r0, r4
 8001476:	0019      	movs	r1, r3
 8001478:	bd10      	pop	{r4, pc}
 800147a:	0022      	movs	r2, r4
 800147c:	380b      	subs	r0, #11
 800147e:	4082      	lsls	r2, r0
 8001480:	055b      	lsls	r3, r3, #21
 8001482:	0312      	lsls	r2, r2, #12
 8001484:	2400      	movs	r4, #0
 8001486:	0b12      	lsrs	r2, r2, #12
 8001488:	0d5b      	lsrs	r3, r3, #21
 800148a:	e7f1      	b.n	8001470 <__aeabi_ui2d+0x2c>
 800148c:	0000041e 	.word	0x0000041e

08001490 <__aeabi_d2f>:
 8001490:	0002      	movs	r2, r0
 8001492:	004b      	lsls	r3, r1, #1
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	030c      	lsls	r4, r1, #12
 800149a:	4e3d      	ldr	r6, [pc, #244]	; (8001590 <__aeabi_d2f+0x100>)
 800149c:	0a64      	lsrs	r4, r4, #9
 800149e:	0f40      	lsrs	r0, r0, #29
 80014a0:	1c5f      	adds	r7, r3, #1
 80014a2:	0fc9      	lsrs	r1, r1, #31
 80014a4:	4304      	orrs	r4, r0
 80014a6:	00d5      	lsls	r5, r2, #3
 80014a8:	4237      	tst	r7, r6
 80014aa:	d00a      	beq.n	80014c2 <__aeabi_d2f+0x32>
 80014ac:	4839      	ldr	r0, [pc, #228]	; (8001594 <__aeabi_d2f+0x104>)
 80014ae:	181e      	adds	r6, r3, r0
 80014b0:	2efe      	cmp	r6, #254	; 0xfe
 80014b2:	dd16      	ble.n	80014e2 <__aeabi_d2f+0x52>
 80014b4:	20ff      	movs	r0, #255	; 0xff
 80014b6:	2400      	movs	r4, #0
 80014b8:	05c0      	lsls	r0, r0, #23
 80014ba:	4320      	orrs	r0, r4
 80014bc:	07c9      	lsls	r1, r1, #31
 80014be:	4308      	orrs	r0, r1
 80014c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <__aeabi_d2f+0x44>
 80014c6:	432c      	orrs	r4, r5
 80014c8:	d026      	beq.n	8001518 <__aeabi_d2f+0x88>
 80014ca:	2205      	movs	r2, #5
 80014cc:	0192      	lsls	r2, r2, #6
 80014ce:	0a54      	lsrs	r4, r2, #9
 80014d0:	b2d8      	uxtb	r0, r3
 80014d2:	e7f1      	b.n	80014b8 <__aeabi_d2f+0x28>
 80014d4:	4325      	orrs	r5, r4
 80014d6:	d0ed      	beq.n	80014b4 <__aeabi_d2f+0x24>
 80014d8:	2080      	movs	r0, #128	; 0x80
 80014da:	03c0      	lsls	r0, r0, #15
 80014dc:	4304      	orrs	r4, r0
 80014de:	20ff      	movs	r0, #255	; 0xff
 80014e0:	e7ea      	b.n	80014b8 <__aeabi_d2f+0x28>
 80014e2:	2e00      	cmp	r6, #0
 80014e4:	dd1b      	ble.n	800151e <__aeabi_d2f+0x8e>
 80014e6:	0192      	lsls	r2, r2, #6
 80014e8:	1e53      	subs	r3, r2, #1
 80014ea:	419a      	sbcs	r2, r3
 80014ec:	00e4      	lsls	r4, r4, #3
 80014ee:	0f6d      	lsrs	r5, r5, #29
 80014f0:	4322      	orrs	r2, r4
 80014f2:	432a      	orrs	r2, r5
 80014f4:	0753      	lsls	r3, r2, #29
 80014f6:	d048      	beq.n	800158a <__aeabi_d2f+0xfa>
 80014f8:	230f      	movs	r3, #15
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d000      	beq.n	8001502 <__aeabi_d2f+0x72>
 8001500:	3204      	adds	r2, #4
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	04db      	lsls	r3, r3, #19
 8001506:	4013      	ands	r3, r2
 8001508:	d03f      	beq.n	800158a <__aeabi_d2f+0xfa>
 800150a:	1c70      	adds	r0, r6, #1
 800150c:	2efe      	cmp	r6, #254	; 0xfe
 800150e:	d0d1      	beq.n	80014b4 <__aeabi_d2f+0x24>
 8001510:	0192      	lsls	r2, r2, #6
 8001512:	0a54      	lsrs	r4, r2, #9
 8001514:	b2c0      	uxtb	r0, r0
 8001516:	e7cf      	b.n	80014b8 <__aeabi_d2f+0x28>
 8001518:	2000      	movs	r0, #0
 800151a:	2400      	movs	r4, #0
 800151c:	e7cc      	b.n	80014b8 <__aeabi_d2f+0x28>
 800151e:	0032      	movs	r2, r6
 8001520:	3217      	adds	r2, #23
 8001522:	db22      	blt.n	800156a <__aeabi_d2f+0xda>
 8001524:	2080      	movs	r0, #128	; 0x80
 8001526:	0400      	lsls	r0, r0, #16
 8001528:	4320      	orrs	r0, r4
 800152a:	241e      	movs	r4, #30
 800152c:	1ba4      	subs	r4, r4, r6
 800152e:	2c1f      	cmp	r4, #31
 8001530:	dd1d      	ble.n	800156e <__aeabi_d2f+0xde>
 8001532:	2202      	movs	r2, #2
 8001534:	4252      	negs	r2, r2
 8001536:	1b96      	subs	r6, r2, r6
 8001538:	0002      	movs	r2, r0
 800153a:	40f2      	lsrs	r2, r6
 800153c:	0016      	movs	r6, r2
 800153e:	2c20      	cmp	r4, #32
 8001540:	d004      	beq.n	800154c <__aeabi_d2f+0xbc>
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <__aeabi_d2f+0x108>)
 8001544:	4694      	mov	ip, r2
 8001546:	4463      	add	r3, ip
 8001548:	4098      	lsls	r0, r3
 800154a:	4305      	orrs	r5, r0
 800154c:	002a      	movs	r2, r5
 800154e:	1e53      	subs	r3, r2, #1
 8001550:	419a      	sbcs	r2, r3
 8001552:	4332      	orrs	r2, r6
 8001554:	2600      	movs	r6, #0
 8001556:	0753      	lsls	r3, r2, #29
 8001558:	d1ce      	bne.n	80014f8 <__aeabi_d2f+0x68>
 800155a:	2480      	movs	r4, #128	; 0x80
 800155c:	0013      	movs	r3, r2
 800155e:	04e4      	lsls	r4, r4, #19
 8001560:	2001      	movs	r0, #1
 8001562:	4023      	ands	r3, r4
 8001564:	4222      	tst	r2, r4
 8001566:	d1d3      	bne.n	8001510 <__aeabi_d2f+0x80>
 8001568:	e7b0      	b.n	80014cc <__aeabi_d2f+0x3c>
 800156a:	2300      	movs	r3, #0
 800156c:	e7ad      	b.n	80014ca <__aeabi_d2f+0x3a>
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <__aeabi_d2f+0x10c>)
 8001570:	4694      	mov	ip, r2
 8001572:	002a      	movs	r2, r5
 8001574:	40e2      	lsrs	r2, r4
 8001576:	0014      	movs	r4, r2
 8001578:	002a      	movs	r2, r5
 800157a:	4463      	add	r3, ip
 800157c:	409a      	lsls	r2, r3
 800157e:	4098      	lsls	r0, r3
 8001580:	1e55      	subs	r5, r2, #1
 8001582:	41aa      	sbcs	r2, r5
 8001584:	4302      	orrs	r2, r0
 8001586:	4322      	orrs	r2, r4
 8001588:	e7e4      	b.n	8001554 <__aeabi_d2f+0xc4>
 800158a:	0033      	movs	r3, r6
 800158c:	e79e      	b.n	80014cc <__aeabi_d2f+0x3c>
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	000007fe 	.word	0x000007fe
 8001594:	fffffc80 	.word	0xfffffc80
 8001598:	fffffca2 	.word	0xfffffca2
 800159c:	fffffc82 	.word	0xfffffc82

080015a0 <__clzsi2>:
 80015a0:	211c      	movs	r1, #28
 80015a2:	2301      	movs	r3, #1
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	4298      	cmp	r0, r3
 80015a8:	d301      	bcc.n	80015ae <__clzsi2+0xe>
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	3910      	subs	r1, #16
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d301      	bcc.n	80015b8 <__clzsi2+0x18>
 80015b4:	0a00      	lsrs	r0, r0, #8
 80015b6:	3908      	subs	r1, #8
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	4298      	cmp	r0, r3
 80015bc:	d301      	bcc.n	80015c2 <__clzsi2+0x22>
 80015be:	0900      	lsrs	r0, r0, #4
 80015c0:	3904      	subs	r1, #4
 80015c2:	a202      	add	r2, pc, #8	; (adr r2, 80015cc <__clzsi2+0x2c>)
 80015c4:	5c10      	ldrb	r0, [r2, r0]
 80015c6:	1840      	adds	r0, r0, r1
 80015c8:	4770      	bx	lr
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	02020304 	.word	0x02020304
 80015d0:	01010101 	.word	0x01010101
	...

080015dc <__clzdi2>:
 80015dc:	b510      	push	{r4, lr}
 80015de:	2900      	cmp	r1, #0
 80015e0:	d103      	bne.n	80015ea <__clzdi2+0xe>
 80015e2:	f7ff ffdd 	bl	80015a0 <__clzsi2>
 80015e6:	3020      	adds	r0, #32
 80015e8:	e002      	b.n	80015f0 <__clzdi2+0x14>
 80015ea:	0008      	movs	r0, r1
 80015ec:	f7ff ffd8 	bl	80015a0 <__clzsi2>
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)

080015f4 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 80015fa:	f000 f82a 	bl	8001652 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80015fe:	2000      	movs	r0, #0
 8001600:	f002 fe38 	bl	8004274 <BSP_PB_GetState>
 8001604:	0003      	movs	r3, r0
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_BlueNRG_2_Init+0x44>)
 800160a:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_BlueNRG_2_Init+0x48>)
 800160e:	2100      	movs	r1, #0
 8001610:	0018      	movs	r0, r3
 8001612:	f008 fca9 	bl	8009f68 <hci_init>
  PRINT_DBG("\033[2J"); /* serial console clear screen */
  PRINT_DBG("\033[H");  /* serial console cursor to home */
  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8001616:	1dfc      	adds	r4, r7, #7
 8001618:	f000 f82a 	bl	8001670 <Sensor_DeviceInit>
 800161c:	0003      	movs	r3, r0
 800161e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <MX_BlueNRG_2_Init+0x3c>
  {
    BSP_LED_On(LED2);
 8001628:	2000      	movs	r0, #0
 800162a:	f002 fd39 	bl	80040a0 <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 800162e:	e7fe      	b.n	800162e <MX_BlueNRG_2_Init+0x3a>
#endif /* STM32L476xx */

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b003      	add	sp, #12
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	08003475 	.word	0x08003475

08001640 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8001644:	f008 fe2c 	bl	800a2a0 <hci_user_evt_proc>
  User_Process();
 8001648:	f000 f8d2 	bl	80017f0 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001656:	2101      	movs	r1, #1
 8001658:	2000      	movs	r0, #0
 800165a:	f002 fdb1 	bl	80041c0 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 800165e:	2000      	movs	r0, #0
 8001660:	f002 fd0a 	bl	8004078 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8001664:	2000      	movs	r0, #0
 8001666:	f002 fe69 	bl	800433c <BSP_COM_Init>
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 8001676:	2308      	movs	r3, #8
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <Sensor_DeviceInit+0x174>)
 800167c:	6811      	ldr	r1, [r2, #0]
 800167e:	6019      	str	r1, [r3, #0]
 8001680:	8891      	ldrh	r1, [r2, #4]
 8001682:	8099      	strh	r1, [r3, #4]
 8001684:	7992      	ldrb	r2, [r2, #6]
 8001686:	719a      	strb	r2, [r3, #6]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 8001688:	2517      	movs	r5, #23
 800168a:	197b      	adds	r3, r7, r5
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	701a      	strb	r2, [r3, #0]

  /* Sw reset of the device */
  hci_reset();
 8001690:	f007 f80c 	bl	80086ac <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 8001694:	23fa      	movs	r3, #250	; 0xfa
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	0018      	movs	r0, r3
 800169a:	f002 ffa7 	bl	80045ec <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 800169e:	1d3a      	adds	r2, r7, #4
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	0011      	movs	r1, r2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f001 f8ed 	bl	8002884 <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 80016aa:	2316      	movs	r3, #22
 80016ac:	18fc      	adds	r4, r7, r3
 80016ae:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <Sensor_DeviceInit+0x178>)
 80016b0:	1cf9      	adds	r1, r7, #3
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	0018      	movs	r0, r3
 80016b8:	f008 fab6 	bl	8009c28 <aci_hal_read_config_data>
 80016bc:	0003      	movs	r3, r0
 80016be:	7023      	strb	r3, [r4, #0]

  if (ret) {
    PRINT_DBG("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80016c0:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <Sensor_DeviceInit+0x178>)
 80016c2:	795b      	ldrb	r3, [r3, #5]
 80016c4:	001a      	movs	r2, r3
 80016c6:	23c0      	movs	r3, #192	; 0xc0
 80016c8:	4013      	ands	r3, r2
 80016ca:	2bc0      	cmp	r3, #192	; 0xc0
 80016cc:	d000      	beq.n	80016d0 <Sensor_DeviceInit+0x60>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 80016ce:	e7fe      	b.n	80016ce <Sensor_DeviceInit+0x5e>
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80016d0:	1cfb      	adds	r3, r7, #3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2516      	movs	r5, #22
 80016d6:	197c      	adds	r4, r7, r5
 80016d8:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <Sensor_DeviceInit+0x178>)
 80016da:	0019      	movs	r1, r3
 80016dc:	2000      	movs	r0, #0
 80016de:	f008 fa15 	bl	8009b0c <aci_hal_write_config_data>
 80016e2:	0003      	movs	r3, r0
 80016e4:	7023      	strb	r3, [r4, #0]
  else {
    PRINT_DBG("aci_hal_write_config_data --> SUCCESS\r\n");
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 80016e6:	2104      	movs	r1, #4
 80016e8:	2001      	movs	r0, #1
 80016ea:	f008 fb17 	bl	8009d1c <aci_hal_set_tx_power_level>
  else {
    PRINT_DBG("aci_hal_set_tx_power_level --> SUCCESS\r\n");
  }

  /* GATT Init */
  ret = aci_gatt_init();
 80016ee:	197c      	adds	r4, r7, r5
 80016f0:	f007 fe4d 	bl	800938e <aci_gatt_init>
 80016f4:	0003      	movs	r3, r0
 80016f6:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
 80016f8:	197b      	adds	r3, r7, r5
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <Sensor_DeviceInit+0x96>
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
    return ret;
 8001700:	197b      	adds	r3, r7, r5
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	e06a      	b.n	80017dc <Sensor_DeviceInit+0x16c>
  else {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0x00, 0x07, &service_handle, &dev_name_char_handle,
 8001706:	2516      	movs	r5, #22
 8001708:	197c      	adds	r4, r7, r5
 800170a:	2314      	movs	r3, #20
 800170c:	18fa      	adds	r2, r7, r3
 800170e:	2310      	movs	r3, #16
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2312      	movs	r3, #18
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	0013      	movs	r3, r2
 800171c:	2207      	movs	r2, #7
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f007 fc61 	bl	8008fe8 <aci_gap_init>
 8001726:	0003      	movs	r3, r0
 8001728:	7023      	strb	r3, [r4, #0]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS) {
 800172a:	197b      	adds	r3, r7, r5
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <Sensor_DeviceInit+0xc8>
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
    return ret;
 8001732:	197b      	adds	r3, r7, r5
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	e051      	b.n	80017dc <Sensor_DeviceInit+0x16c>
  else {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 8001738:	2314      	movs	r3, #20
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	8818      	ldrh	r0, [r3, #0]
 800173e:	2312      	movs	r3, #18
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	8819      	ldrh	r1, [r3, #0]
 8001744:	2516      	movs	r5, #22
 8001746:	197c      	adds	r4, r7, r5
 8001748:	2308      	movs	r3, #8
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2307      	movs	r3, #7
 8001750:	2200      	movs	r2, #0
 8001752:	f008 f88d 	bl	8009870 <aci_gatt_update_char_value>
 8001756:	0003      	movs	r3, r0
 8001758:	7023      	strb	r3, [r4, #0]
                                   device_name);
  if (ret != BLE_STATUS_SUCCESS) {
 800175a:	197b      	adds	r3, r7, r5
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <Sensor_DeviceInit+0xf8>
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
    return ret;
 8001762:	197b      	adds	r3, r7, r5
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	e039      	b.n	80017dc <Sensor_DeviceInit+0x16c>

  /*
   * Clear security database: this implies that each time the application is executed
   * the full bonding process is executed (with PassKey generation and setting).
   */
  ret = aci_gap_clear_security_db();
 8001768:	2516      	movs	r5, #22
 800176a:	197c      	adds	r4, r7, r5
 800176c:	f007 fde0 	bl	8009330 <aci_gap_clear_security_db>
 8001770:	0003      	movs	r3, r0
 8001772:	7023      	strb	r3, [r4, #0]

  /*
   * Set the I/O capability otherwise the Central device (e.g. the smartphone) will
   * propose a PIN that will be accepted without any control.
   */
  if (aci_gap_set_io_capability(IO_CAP_DISPLAY_ONLY)==BLE_STATUS_SUCCESS) {
 8001774:	2000      	movs	r0, #0
 8001776:	f007 fa0d 	bl	8008b94 <aci_gap_set_io_capability>
  } else {
    PRINT_DBG("Error Setting I/O Capability\r\n");
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 800177a:	197c      	adds	r4, r7, r5
 800177c:	2300      	movs	r3, #0
 800177e:	9304      	str	r3, [sp, #16]
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <Sensor_DeviceInit+0x17c>)
 8001782:	9303      	str	r3, [sp, #12]
 8001784:	2301      	movs	r3, #1
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2310      	movs	r3, #16
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	2307      	movs	r3, #7
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	2201      	movs	r2, #1
 8001794:	2101      	movs	r1, #1
 8001796:	2001      	movs	r0, #1
 8001798:	f007 fa5e 	bl	8008c58 <aci_gap_set_authentication_requirement>
 800179c:	0003      	movs	r3, r0
 800179e:	7023      	strb	r3, [r4, #0]
                                               16,
                                               DONOT_USE_FIXED_PIN_FOR_PAIRING,
                                               PERIPHERAL_PASS_KEY,
                                               0x00); /* - 0x00: Public Identity Address
                                                         - 0x01: Random (static) Identity Address */
  if (ret != BLE_STATUS_SUCCESS) {
 80017a0:	197b      	adds	r3, r7, r5
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <Sensor_DeviceInit+0x13e>
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
    return ret;
 80017a8:	197b      	adds	r3, r7, r5
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	e016      	b.n	80017dc <Sensor_DeviceInit+0x16c>
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");

  ret = Add_HWServW2ST_Service();
 80017ae:	2516      	movs	r5, #22
 80017b0:	197c      	adds	r4, r7, r5
 80017b2:	f001 f99b 	bl	8002aec <Add_HWServW2ST_Service>
 80017b6:	0003      	movs	r3, r0
 80017b8:	7023      	strb	r3, [r4, #0]
  if (ret == BLE_STATUS_SUCCESS) {
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d000      	beq.n	80017c4 <Sensor_DeviceInit+0x154>
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
  }
  else {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
 80017c2:	e7fe      	b.n	80017c2 <Sensor_DeviceInit+0x152>
  }

  ret = Add_SWServW2ST_Service();
 80017c4:	2516      	movs	r5, #22
 80017c6:	197c      	adds	r4, r7, r5
 80017c8:	f001 faae 	bl	8002d28 <Add_SWServW2ST_Service>
 80017cc:	0003      	movs	r3, r0
 80017ce:	7023      	strb	r3, [r4, #0]
  if(ret == BLE_STATUS_SUCCESS) {
 80017d0:	197b      	adds	r3, r7, r5
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d000      	beq.n	80017da <Sensor_DeviceInit+0x16a>
     PRINT_DBG("BlueNRG2 SW service added successfully.\r\n");
  }
  else {
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
     while(1);
 80017d8:	e7fe      	b.n	80017d8 <Sensor_DeviceInit+0x168>
     PRINT_DBG("Error while adding BlueNRG2 Console service: 0x%02x\r\n", ret);
     while(1);
  }

#endif /* STM32L476xx */
  return BLE_STATUS_SUCCESS;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b006      	add	sp, #24
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	0800b7c4 	.word	0x0800b7c4
 80017e8:	200000a4 	.word	0x200000a4
 80017ec:	0001e240 	.word	0x0001e240

080017f0 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 80017f6:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <User_Process+0x134>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8001800:	f001 fdaa 	bl	8003358 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <User_Process+0x134>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
  }

  if ((connected) && (!pairing))
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <User_Process+0x138>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d011      	beq.n	8001838 <User_Process+0x48>
 8001814:	4b45      	ldr	r3, [pc, #276]	; (800192c <User_Process+0x13c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <User_Process+0x48>
  {
    ret = aci_gap_slave_security_req(connection_handle);
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <User_Process+0x140>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	220f      	movs	r2, #15
 8001826:	18bc      	adds	r4, r7, r2
 8001828:	0018      	movs	r0, r3
 800182a:	f007 fc95 	bl	8009158 <aci_gap_slave_security_req>
 800182e:	0003      	movs	r3, r0
 8001830:	7023      	strb	r3, [r4, #0]
      PRINT_DBG("aci_gap_slave_security_req() failed:0x%02x\r\n", ret);
    }
    else {
      PRINT_DBG("aci_gap_slave_security_req --> SUCCESS\r\n");
    }
    pairing = TRUE;
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <User_Process+0x13c>)
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
    HAL_Delay(50);

    BSP_LED_Toggle(LED2);
#endif /* USE_BUTTON */

    if (paired)
 8001838:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <User_Process+0x144>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d06b      	beq.n	800191a <User_Process+0x12a>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8001842:	f002 fec9 	bl	80045d8 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	0018      	movs	r0, r3
 800184a:	f008 fef9 	bl	800a640 <srand>

      if (send_env) {
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <User_Process+0x148>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d027      	beq.n	80018a8 <User_Process+0xb8>
        /* Update emulated Environmental data */
        Set_Random_Environmental_Values(&data_t, &data_p);
 8001858:	1d3a      	adds	r2, r7, #4
 800185a:	2308      	movs	r3, #8
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f000 f87d 	bl	8001960 <Set_Random_Environmental_Values>
        Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4934      	ldr	r1, [pc, #208]	; (800193c <User_Process+0x14c>)
 800186a:	1c18      	adds	r0, r3, #0
 800186c:	f7fe fefc 	bl	8000668 <__aeabi_fmul>
 8001870:	1c03      	adds	r3, r0, #0
 8001872:	1c18      	adds	r0, r3, #0
 8001874:	f7ff f81e 	bl	80008b4 <__aeabi_f2iz>
 8001878:	0004      	movs	r4, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4930      	ldr	r1, [pc, #192]	; (8001940 <User_Process+0x150>)
 800187e:	1c18      	adds	r0, r3, #0
 8001880:	f7fe fef2 	bl	8000668 <__aeabi_fmul>
 8001884:	1c03      	adds	r3, r0, #0
 8001886:	1c18      	adds	r0, r3, #0
 8001888:	f7ff f814 	bl	80008b4 <__aeabi_f2iz>
 800188c:	0003      	movs	r3, r0
 800188e:	b21b      	sxth	r3, r3
 8001890:	0019      	movs	r1, r3
 8001892:	0020      	movs	r0, r4
 8001894:	f001 fb06 	bl	8002ea4 <Environmental_Update>
#if (!USE_BUTTON)
        BSP_LED_Toggle(LED2);
 8001898:	2000      	movs	r0, #0
 800189a:	f002 fc31 	bl	8004100 <BSP_LED_Toggle>
        HAL_Delay(1000); /* wait 1 sec before sending new data */
 800189e:	23fa      	movs	r3, #250	; 0xfa
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	0018      	movs	r0, r3
 80018a4:	f002 fea2 	bl	80045ec <HAL_Delay>
#endif /* (!USE_BUTTON) */
      }

      if ((send_mot) || (send_quat)) {
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <User_Process+0x154>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <User_Process+0xcc>
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <User_Process+0x158>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d02e      	beq.n	800191a <User_Process+0x12a>
        /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
        Set_Random_Motion_Values(counter);
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <User_Process+0x15c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 f8ab 	bl	8001a1c <Set_Random_Motion_Values>
        if (send_mot) {
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <User_Process+0x154>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <User_Process+0xec>
          Acc_Update(&x_axes, &g_axes, &m_axes);
 80018d0:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <User_Process+0x160>)
 80018d2:	4920      	ldr	r1, [pc, #128]	; (8001954 <User_Process+0x164>)
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <User_Process+0x168>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f001 fb3a 	bl	8002f50 <Acc_Update>
        }
        if (send_quat) {
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <User_Process+0x158>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <User_Process+0xfe>
          Quat_Update(&q_axes);
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <User_Process+0x16c>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f001 fbcf 	bl	800308c <Quat_Update>
        }
        counter ++;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <User_Process+0x15c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <User_Process+0x15c>)
 80018f6:	601a      	str	r2, [r3, #0]
        if (counter == 40) {
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <User_Process+0x15c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b28      	cmp	r3, #40	; 0x28
 80018fe:	d104      	bne.n	800190a <User_Process+0x11a>
          counter = 0;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <User_Process+0x15c>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
          Reset_Motion_Values();
 8001906:	f000 ff0d 	bl	8002724 <Reset_Motion_Values>
        }
#if (!USE_BUTTON)
        BSP_LED_Toggle(LED2);
 800190a:	2000      	movs	r0, #0
 800190c:	f002 fbf8 	bl	8004100 <BSP_LED_Toggle>
        HAL_Delay(1000); /* wait 1 sec before sending new data */
 8001910:	23fa      	movs	r3, #250	; 0xfa
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	0018      	movs	r0, r3
 8001916:	f002 fe69 	bl	80045ec <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif /* USE_BUTTON */
}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b005      	add	sp, #20
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	20000001 	.word	0x20000001
 8001928:	200000e2 	.word	0x200000e2
 800192c:	200000e3 	.word	0x200000e3
 8001930:	200000e0 	.word	0x200000e0
 8001934:	200000e4 	.word	0x200000e4
 8001938:	200000dc 	.word	0x200000dc
 800193c:	42c80000 	.word	0x42c80000
 8001940:	41200000 	.word	0x41200000
 8001944:	200000dd 	.word	0x200000dd
 8001948:	200000de 	.word	0x200000de
 800194c:	200000ac 	.word	0x200000ac
 8001950:	20000100 	.word	0x20000100
 8001954:	200000f4 	.word	0x200000f4
 8001958:	200000e8 	.word	0x200000e8
 800195c:	2000010c 	.word	0x2000010c

08001960 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6178      	str	r0, [r7, #20]
 8001968:	6139      	str	r1, [r7, #16]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 800196a:	f008 fe99 	bl	800a6a0 <rand>
 800196e:	0003      	movs	r3, r0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	17db      	asrs	r3, r3, #31
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	0f91      	lsrs	r1, r2, #30
 800197c:	009d      	lsls	r5, r3, #2
 800197e:	430d      	orrs	r5, r1
 8001980:	0094      	lsls	r4, r2, #2
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	1900      	adds	r0, r0, r4
 8001988:	4169      	adcs	r1, r5
 800198a:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <Set_Random_Environmental_Values+0xb0>)
 800198c:	2300      	movs	r3, #0
 800198e:	f7fe fd3b 	bl	8000408 <__aeabi_uldivmod>
 8001992:	0002      	movs	r2, r0
 8001994:	000b      	movs	r3, r1
 8001996:	0010      	movs	r0, r2
 8001998:	0019      	movs	r1, r3
 800199a:	f7fe fd83 	bl	80004a4 <__aeabi_ul2d>
 800199e:	2200      	movs	r2, #0
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <Set_Random_Environmental_Values+0xb4>)
 80019a2:	f7fe ffa7 	bl	80008f4 <__aeabi_dadd>
 80019a6:	0002      	movs	r2, r0
 80019a8:	000b      	movs	r3, r1
 80019aa:	0010      	movs	r0, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	f7ff fd6f 	bl	8001490 <__aeabi_d2f>
 80019b2:	1c02      	adds	r2, r0, #0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80019b8:	f008 fe72 	bl	800a6a0 <rand>
 80019bc:	0003      	movs	r3, r0
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	17db      	asrs	r3, r3, #31
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	2250      	movs	r2, #80	; 0x50
 80019c6:	2300      	movs	r3, #0
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f7fe fd3c 	bl	8000448 <__aeabi_lmul>
 80019d0:	0002      	movs	r2, r0
 80019d2:	000b      	movs	r3, r1
 80019d4:	0010      	movs	r0, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <Set_Random_Environmental_Values+0xb0>)
 80019da:	2300      	movs	r3, #0
 80019dc:	f7fe fd14 	bl	8000408 <__aeabi_uldivmod>
 80019e0:	0002      	movs	r2, r0
 80019e2:	000b      	movs	r3, r1
 80019e4:	0010      	movs	r0, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	f7fe fd5c 	bl	80004a4 <__aeabi_ul2d>
 80019ec:	2200      	movs	r2, #0
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <Set_Random_Environmental_Values+0xb8>)
 80019f0:	f7fe ff80 	bl	80008f4 <__aeabi_dadd>
 80019f4:	0002      	movs	r2, r0
 80019f6:	000b      	movs	r3, r1
 80019f8:	0010      	movs	r0, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	f7ff fd48 	bl	8001490 <__aeabi_d2f>
 8001a00:	1c02      	adds	r2, r0, #0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b006      	add	sp, #24
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	7fffffff 	.word	0x7fffffff
 8001a14:	403b0000 	.word	0x403b0000
 8001a18:	408f4000 	.word	0x408f4000

08001a1c <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	b0fd      	sub	sp, #500	; 0x1f4
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	26f6      	movs	r6, #246	; 0xf6
 8001a24:	0076      	lsls	r6, r6, #1
 8001a26:	19bb      	adds	r3, r7, r6
 8001a28:	6018      	str	r0, [r3, #0]
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8001a2a:	19bb      	adds	r3, r7, r6
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b13      	cmp	r3, #19
 8001a30:	d900      	bls.n	8001a34 <Set_Random_Motion_Values+0x18>
 8001a32:	e369      	b.n	8002108 <Set_Random_Motion_Values+0x6ec>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001a34:	f008 fe34 	bl	800a6a0 <rand>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	21b8      	movs	r1, #184	; 0xb8
 8001a3c:	0049      	lsls	r1, r1, #1
 8001a3e:	187a      	adds	r2, r7, r1
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	17db      	asrs	r3, r3, #31
 8001a44:	22ba      	movs	r2, #186	; 0xba
 8001a46:	0052      	lsls	r2, r2, #1
 8001a48:	18ba      	adds	r2, r7, r2
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	19bb      	adds	r3, r7, r6
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	22b4      	movs	r2, #180	; 0xb4
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	18b8      	adds	r0, r7, r2
 8001a56:	6003      	str	r3, [r0, #0]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	20b6      	movs	r0, #182	; 0xb6
 8001a5c:	0040      	lsls	r0, r0, #1
 8001a5e:	1838      	adds	r0, r7, r0
 8001a60:	6003      	str	r3, [r0, #0]
 8001a62:	18bb      	adds	r3, r7, r2
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	1879      	adds	r1, r7, r1
 8001a6a:	6808      	ldr	r0, [r1, #0]
 8001a6c:	6849      	ldr	r1, [r1, #4]
 8001a6e:	f7fe fceb 	bl	8000448 <__aeabi_lmul>
 8001a72:	0002      	movs	r2, r0
 8001a74:	000b      	movs	r3, r1
 8001a76:	0010      	movs	r0, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	000b      	movs	r3, r1
 8001a7e:	1892      	adds	r2, r2, r2
 8001a80:	415b      	adcs	r3, r3
 8001a82:	1880      	adds	r0, r0, r2
 8001a84:	4159      	adcs	r1, r3
 8001a86:	4af6      	ldr	r2, [pc, #984]	; (8001e60 <Set_Random_Motion_Values+0x444>)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f7fe fcbd 	bl	8000408 <__aeabi_uldivmod>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	000b      	movs	r3, r1
 8001a92:	0010      	movs	r0, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	220a      	movs	r2, #10
 8001a98:	2300      	movs	r3, #0
 8001a9a:	1880      	adds	r0, r0, r2
 8001a9c:	4159      	adcs	r1, r3
 8001a9e:	4bf1      	ldr	r3, [pc, #964]	; (8001e64 <Set_Random_Motion_Values+0x448>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	18d3      	adds	r3, r2, r3
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	4bee      	ldr	r3, [pc, #952]	; (8001e64 <Set_Random_Motion_Values+0x448>)
 8001aac:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001aae:	f008 fdf7 	bl	800a6a0 <rand>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	21b0      	movs	r1, #176	; 0xb0
 8001ab6:	0049      	lsls	r1, r1, #1
 8001ab8:	187a      	adds	r2, r7, r1
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	17db      	asrs	r3, r3, #31
 8001abe:	22b2      	movs	r2, #178	; 0xb2
 8001ac0:	0052      	lsls	r2, r2, #1
 8001ac2:	18ba      	adds	r2, r7, r2
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	19bb      	adds	r3, r7, r6
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	22ac      	movs	r2, #172	; 0xac
 8001acc:	0052      	lsls	r2, r2, #1
 8001ace:	18b8      	adds	r0, r7, r2
 8001ad0:	6003      	str	r3, [r0, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	20ae      	movs	r0, #174	; 0xae
 8001ad6:	0040      	lsls	r0, r0, #1
 8001ad8:	1838      	adds	r0, r7, r0
 8001ada:	6003      	str	r3, [r0, #0]
 8001adc:	18bb      	adds	r3, r7, r2
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	1879      	adds	r1, r7, r1
 8001ae4:	6808      	ldr	r0, [r1, #0]
 8001ae6:	6849      	ldr	r1, [r1, #4]
 8001ae8:	f7fe fcae 	bl	8000448 <__aeabi_lmul>
 8001aec:	0002      	movs	r2, r0
 8001aee:	000b      	movs	r3, r1
 8001af0:	0014      	movs	r4, r2
 8001af2:	001d      	movs	r5, r3
 8001af4:	0022      	movs	r2, r4
 8001af6:	002b      	movs	r3, r5
 8001af8:	0f91      	lsrs	r1, r2, #30
 8001afa:	468c      	mov	ip, r1
 8001afc:	0098      	lsls	r0, r3, #2
 8001afe:	21e6      	movs	r1, #230	; 0xe6
 8001b00:	0049      	lsls	r1, r1, #1
 8001b02:	1879      	adds	r1, r7, r1
 8001b04:	6008      	str	r0, [r1, #0]
 8001b06:	20e6      	movs	r0, #230	; 0xe6
 8001b08:	0040      	lsls	r0, r0, #1
 8001b0a:	1839      	adds	r1, r7, r0
 8001b0c:	6808      	ldr	r0, [r1, #0]
 8001b0e:	4661      	mov	r1, ip
 8001b10:	4308      	orrs	r0, r1
 8001b12:	21e6      	movs	r1, #230	; 0xe6
 8001b14:	0049      	lsls	r1, r1, #1
 8001b16:	1879      	adds	r1, r7, r1
 8001b18:	6008      	str	r0, [r1, #0]
 8001b1a:	0093      	lsls	r3, r2, #2
 8001b1c:	22e4      	movs	r2, #228	; 0xe4
 8001b1e:	0052      	lsls	r2, r2, #1
 8001b20:	18b9      	adds	r1, r7, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	18bb      	adds	r3, r7, r2
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	1900      	adds	r0, r0, r4
 8001b2c:	4169      	adcs	r1, r5
 8001b2e:	4acc      	ldr	r2, [pc, #816]	; (8001e60 <Set_Random_Motion_Values+0x444>)
 8001b30:	2300      	movs	r3, #0
 8001b32:	f7fe fc69 	bl	8000408 <__aeabi_uldivmod>
 8001b36:	0002      	movs	r2, r0
 8001b38:	000b      	movs	r3, r1
 8001b3a:	0010      	movs	r0, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	220a      	movs	r2, #10
 8001b40:	4252      	negs	r2, r2
 8001b42:	17d3      	asrs	r3, r2, #31
 8001b44:	1a12      	subs	r2, r2, r0
 8001b46:	418b      	sbcs	r3, r1
 8001b48:	0010      	movs	r0, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	4bc5      	ldr	r3, [pc, #788]	; (8001e64 <Set_Random_Motion_Values+0x448>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	001a      	movs	r2, r3
 8001b52:	0003      	movs	r3, r0
 8001b54:	18d3      	adds	r3, r2, r3
 8001b56:	001a      	movs	r2, r3
 8001b58:	4bc2      	ldr	r3, [pc, #776]	; (8001e64 <Set_Random_Motion_Values+0x448>)
 8001b5a:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001b5c:	f008 fda0 	bl	800a6a0 <rand>
 8001b60:	0003      	movs	r3, r0
 8001b62:	21a8      	movs	r1, #168	; 0xa8
 8001b64:	0049      	lsls	r1, r1, #1
 8001b66:	187a      	adds	r2, r7, r1
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	17db      	asrs	r3, r3, #31
 8001b6c:	22aa      	movs	r2, #170	; 0xaa
 8001b6e:	0052      	lsls	r2, r2, #1
 8001b70:	18ba      	adds	r2, r7, r2
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	19bb      	adds	r3, r7, r6
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	22a4      	movs	r2, #164	; 0xa4
 8001b7a:	0052      	lsls	r2, r2, #1
 8001b7c:	18b8      	adds	r0, r7, r2
 8001b7e:	6003      	str	r3, [r0, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	20a6      	movs	r0, #166	; 0xa6
 8001b84:	0040      	lsls	r0, r0, #1
 8001b86:	1838      	adds	r0, r7, r0
 8001b88:	6003      	str	r3, [r0, #0]
 8001b8a:	18bb      	adds	r3, r7, r2
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	1879      	adds	r1, r7, r1
 8001b92:	6808      	ldr	r0, [r1, #0]
 8001b94:	6849      	ldr	r1, [r1, #4]
 8001b96:	f7fe fc57 	bl	8000448 <__aeabi_lmul>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	000b      	movs	r3, r1
 8001b9e:	0014      	movs	r4, r2
 8001ba0:	001d      	movs	r5, r3
 8001ba2:	0022      	movs	r2, r4
 8001ba4:	002b      	movs	r3, r5
 8001ba6:	0f51      	lsrs	r1, r2, #29
 8001ba8:	468c      	mov	ip, r1
 8001baa:	00d8      	lsls	r0, r3, #3
 8001bac:	21e2      	movs	r1, #226	; 0xe2
 8001bae:	0049      	lsls	r1, r1, #1
 8001bb0:	1879      	adds	r1, r7, r1
 8001bb2:	6008      	str	r0, [r1, #0]
 8001bb4:	20e2      	movs	r0, #226	; 0xe2
 8001bb6:	0040      	lsls	r0, r0, #1
 8001bb8:	1839      	adds	r1, r7, r0
 8001bba:	6808      	ldr	r0, [r1, #0]
 8001bbc:	4661      	mov	r1, ip
 8001bbe:	4308      	orrs	r0, r1
 8001bc0:	21e2      	movs	r1, #226	; 0xe2
 8001bc2:	0049      	lsls	r1, r1, #1
 8001bc4:	1879      	adds	r1, r7, r1
 8001bc6:	6008      	str	r0, [r1, #0]
 8001bc8:	00d3      	lsls	r3, r2, #3
 8001bca:	22e0      	movs	r2, #224	; 0xe0
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	18b9      	adds	r1, r7, r2
 8001bd0:	600b      	str	r3, [r1, #0]
 8001bd2:	18bb      	adds	r3, r7, r2
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	1b00      	subs	r0, r0, r4
 8001bda:	41a9      	sbcs	r1, r5
 8001bdc:	4aa0      	ldr	r2, [pc, #640]	; (8001e60 <Set_Random_Motion_Values+0x444>)
 8001bde:	2300      	movs	r3, #0
 8001be0:	f7fe fc12 	bl	8000408 <__aeabi_uldivmod>
 8001be4:	0002      	movs	r2, r0
 8001be6:	000b      	movs	r3, r1
 8001be8:	0010      	movs	r0, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	220a      	movs	r2, #10
 8001bee:	2300      	movs	r3, #0
 8001bf0:	1880      	adds	r0, r0, r2
 8001bf2:	4159      	adcs	r1, r3
 8001bf4:	4b9b      	ldr	r3, [pc, #620]	; (8001e64 <Set_Random_Motion_Values+0x448>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	001a      	movs	r2, r3
 8001c00:	4b98      	ldr	r3, [pc, #608]	; (8001e64 <Set_Random_Motion_Values+0x448>)
 8001c02:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001c04:	f008 fd4c 	bl	800a6a0 <rand>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	21a0      	movs	r1, #160	; 0xa0
 8001c0c:	0049      	lsls	r1, r1, #1
 8001c0e:	187a      	adds	r2, r7, r1
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	17db      	asrs	r3, r3, #31
 8001c14:	22a2      	movs	r2, #162	; 0xa2
 8001c16:	0052      	lsls	r2, r2, #1
 8001c18:	18ba      	adds	r2, r7, r2
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	19bb      	adds	r3, r7, r6
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	229c      	movs	r2, #156	; 0x9c
 8001c22:	0052      	lsls	r2, r2, #1
 8001c24:	18b8      	adds	r0, r7, r2
 8001c26:	6003      	str	r3, [r0, #0]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	209e      	movs	r0, #158	; 0x9e
 8001c2c:	0040      	lsls	r0, r0, #1
 8001c2e:	1838      	adds	r0, r7, r0
 8001c30:	6003      	str	r3, [r0, #0]
 8001c32:	18bb      	adds	r3, r7, r2
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	1879      	adds	r1, r7, r1
 8001c3a:	6808      	ldr	r0, [r1, #0]
 8001c3c:	6849      	ldr	r1, [r1, #4]
 8001c3e:	f7fe fc03 	bl	8000448 <__aeabi_lmul>
 8001c42:	0002      	movs	r2, r0
 8001c44:	000b      	movs	r3, r1
 8001c46:	1892      	adds	r2, r2, r2
 8001c48:	415b      	adcs	r3, r3
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	4a84      	ldr	r2, [pc, #528]	; (8001e60 <Set_Random_Motion_Values+0x444>)
 8001c50:	2300      	movs	r3, #0
 8001c52:	f7fe fbd9 	bl	8000408 <__aeabi_uldivmod>
 8001c56:	0002      	movs	r2, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	2264      	movs	r2, #100	; 0x64
 8001c60:	2300      	movs	r3, #0
 8001c62:	1880      	adds	r0, r0, r2
 8001c64:	4159      	adcs	r1, r3
 8001c66:	4b80      	ldr	r3, [pc, #512]	; (8001e68 <Set_Random_Motion_Values+0x44c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	18d3      	adds	r3, r2, r3
 8001c70:	001a      	movs	r2, r3
 8001c72:	4b7d      	ldr	r3, [pc, #500]	; (8001e68 <Set_Random_Motion_Values+0x44c>)
 8001c74:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001c76:	f008 fd13 	bl	800a6a0 <rand>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	2198      	movs	r1, #152	; 0x98
 8001c7e:	0049      	lsls	r1, r1, #1
 8001c80:	187a      	adds	r2, r7, r1
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	17db      	asrs	r3, r3, #31
 8001c86:	229a      	movs	r2, #154	; 0x9a
 8001c88:	0052      	lsls	r2, r2, #1
 8001c8a:	18ba      	adds	r2, r7, r2
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	19bb      	adds	r3, r7, r6
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2294      	movs	r2, #148	; 0x94
 8001c94:	0052      	lsls	r2, r2, #1
 8001c96:	18b8      	adds	r0, r7, r2
 8001c98:	6003      	str	r3, [r0, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2096      	movs	r0, #150	; 0x96
 8001c9e:	0040      	lsls	r0, r0, #1
 8001ca0:	1838      	adds	r0, r7, r0
 8001ca2:	6003      	str	r3, [r0, #0]
 8001ca4:	18bb      	adds	r3, r7, r2
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	1879      	adds	r1, r7, r1
 8001cac:	6808      	ldr	r0, [r1, #0]
 8001cae:	6849      	ldr	r1, [r1, #4]
 8001cb0:	f7fe fbca 	bl	8000448 <__aeabi_lmul>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	000b      	movs	r3, r1
 8001cb8:	0f91      	lsrs	r1, r2, #30
 8001cba:	0098      	lsls	r0, r3, #2
 8001cbc:	24f2      	movs	r4, #242	; 0xf2
 8001cbe:	0064      	lsls	r4, r4, #1
 8001cc0:	193d      	adds	r5, r7, r4
 8001cc2:	6028      	str	r0, [r5, #0]
 8001cc4:	1938      	adds	r0, r7, r4
 8001cc6:	6800      	ldr	r0, [r0, #0]
 8001cc8:	4308      	orrs	r0, r1
 8001cca:	1939      	adds	r1, r7, r4
 8001ccc:	6008      	str	r0, [r1, #0]
 8001cce:	0093      	lsls	r3, r2, #2
 8001cd0:	21f0      	movs	r1, #240	; 0xf0
 8001cd2:	0049      	lsls	r1, r1, #1
 8001cd4:	187a      	adds	r2, r7, r1
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4a61      	ldr	r2, [pc, #388]	; (8001e60 <Set_Random_Motion_Values+0x444>)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	1879      	adds	r1, r7, r1
 8001cde:	6808      	ldr	r0, [r1, #0]
 8001ce0:	6849      	ldr	r1, [r1, #4]
 8001ce2:	f7fe fb91 	bl	8000408 <__aeabi_uldivmod>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	000b      	movs	r3, r1
 8001cea:	0010      	movs	r0, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	2264      	movs	r2, #100	; 0x64
 8001cf0:	4252      	negs	r2, r2
 8001cf2:	17d3      	asrs	r3, r2, #31
 8001cf4:	1a12      	subs	r2, r2, r0
 8001cf6:	418b      	sbcs	r3, r1
 8001cf8:	0010      	movs	r0, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <Set_Random_Motion_Values+0x44c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	001a      	movs	r2, r3
 8001d02:	0003      	movs	r3, r0
 8001d04:	18d3      	adds	r3, r2, r3
 8001d06:	001a      	movs	r2, r3
 8001d08:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <Set_Random_Motion_Values+0x44c>)
 8001d0a:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001d0c:	f008 fcc8 	bl	800a6a0 <rand>
 8001d10:	0003      	movs	r3, r0
 8001d12:	2190      	movs	r1, #144	; 0x90
 8001d14:	0049      	lsls	r1, r1, #1
 8001d16:	187a      	adds	r2, r7, r1
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	17db      	asrs	r3, r3, #31
 8001d1c:	2292      	movs	r2, #146	; 0x92
 8001d1e:	0052      	lsls	r2, r2, #1
 8001d20:	18ba      	adds	r2, r7, r2
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	19bb      	adds	r3, r7, r6
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	228c      	movs	r2, #140	; 0x8c
 8001d2a:	0052      	lsls	r2, r2, #1
 8001d2c:	18b8      	adds	r0, r7, r2
 8001d2e:	6003      	str	r3, [r0, #0]
 8001d30:	2300      	movs	r3, #0
 8001d32:	208e      	movs	r0, #142	; 0x8e
 8001d34:	0040      	lsls	r0, r0, #1
 8001d36:	1838      	adds	r0, r7, r0
 8001d38:	6003      	str	r3, [r0, #0]
 8001d3a:	18bb      	adds	r3, r7, r2
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	1879      	adds	r1, r7, r1
 8001d42:	6808      	ldr	r0, [r1, #0]
 8001d44:	6849      	ldr	r1, [r1, #4]
 8001d46:	f7fe fb7f 	bl	8000448 <__aeabi_lmul>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	000b      	movs	r3, r1
 8001d4e:	0010      	movs	r0, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	0002      	movs	r2, r0
 8001d54:	000b      	movs	r3, r1
 8001d56:	1892      	adds	r2, r2, r2
 8001d58:	415b      	adcs	r3, r3
 8001d5a:	1812      	adds	r2, r2, r0
 8001d5c:	414b      	adcs	r3, r1
 8001d5e:	1892      	adds	r2, r2, r2
 8001d60:	415b      	adcs	r3, r3
 8001d62:	0010      	movs	r0, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	4a3e      	ldr	r2, [pc, #248]	; (8001e60 <Set_Random_Motion_Values+0x444>)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f7fe fb4d 	bl	8000408 <__aeabi_uldivmod>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	000b      	movs	r3, r1
 8001d72:	0010      	movs	r0, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	2264      	movs	r2, #100	; 0x64
 8001d78:	2300      	movs	r3, #0
 8001d7a:	1880      	adds	r0, r0, r2
 8001d7c:	4159      	adcs	r1, r3
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <Set_Random_Motion_Values+0x44c>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	001a      	movs	r2, r3
 8001d84:	0003      	movs	r3, r0
 8001d86:	18d3      	adds	r3, r2, r3
 8001d88:	001a      	movs	r2, r3
 8001d8a:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <Set_Random_Motion_Values+0x44c>)
 8001d8c:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001d8e:	f008 fc87 	bl	800a6a0 <rand>
 8001d92:	0003      	movs	r3, r0
 8001d94:	2188      	movs	r1, #136	; 0x88
 8001d96:	0049      	lsls	r1, r1, #1
 8001d98:	187a      	adds	r2, r7, r1
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	17db      	asrs	r3, r3, #31
 8001d9e:	228a      	movs	r2, #138	; 0x8a
 8001da0:	0052      	lsls	r2, r2, #1
 8001da2:	18ba      	adds	r2, r7, r2
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	19bb      	adds	r3, r7, r6
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2284      	movs	r2, #132	; 0x84
 8001dac:	0052      	lsls	r2, r2, #1
 8001dae:	18b8      	adds	r0, r7, r2
 8001db0:	6003      	str	r3, [r0, #0]
 8001db2:	2300      	movs	r3, #0
 8001db4:	2086      	movs	r0, #134	; 0x86
 8001db6:	0040      	lsls	r0, r0, #1
 8001db8:	1838      	adds	r0, r7, r0
 8001dba:	6003      	str	r3, [r0, #0]
 8001dbc:	18bb      	adds	r3, r7, r2
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	1879      	adds	r1, r7, r1
 8001dc4:	6808      	ldr	r0, [r1, #0]
 8001dc6:	6849      	ldr	r1, [r1, #4]
 8001dc8:	f7fe fb3e 	bl	8000448 <__aeabi_lmul>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	000b      	movs	r3, r1
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	000b      	movs	r3, r1
 8001dd8:	1892      	adds	r2, r2, r2
 8001dda:	415b      	adcs	r3, r3
 8001ddc:	1880      	adds	r0, r0, r2
 8001dde:	4159      	adcs	r1, r3
 8001de0:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <Set_Random_Motion_Values+0x444>)
 8001de2:	2300      	movs	r3, #0
 8001de4:	f7fe fb10 	bl	8000408 <__aeabi_uldivmod>
 8001de8:	0002      	movs	r2, r0
 8001dea:	000b      	movs	r3, r1
 8001dec:	0010      	movs	r0, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	2203      	movs	r2, #3
 8001df2:	2300      	movs	r3, #0
 8001df4:	1880      	adds	r0, r0, r2
 8001df6:	4159      	adcs	r1, r3
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <Set_Random_Motion_Values+0x450>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	0003      	movs	r3, r0
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	001a      	movs	r2, r3
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <Set_Random_Motion_Values+0x450>)
 8001e06:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001e08:	f008 fc4a 	bl	800a6a0 <rand>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	1c7a      	adds	r2, r7, #1
 8001e10:	32ff      	adds	r2, #255	; 0xff
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	17db      	asrs	r3, r3, #31
 8001e16:	1d7a      	adds	r2, r7, #5
 8001e18:	32ff      	adds	r2, #255	; 0xff
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	19bb      	adds	r3, r7, r6
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	22f8      	movs	r2, #248	; 0xf8
 8001e22:	18b9      	adds	r1, r7, r2
 8001e24:	600b      	str	r3, [r1, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	21fc      	movs	r1, #252	; 0xfc
 8001e2a:	1879      	adds	r1, r7, r1
 8001e2c:	600b      	str	r3, [r1, #0]
 8001e2e:	18bb      	adds	r3, r7, r2
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	1c79      	adds	r1, r7, #1
 8001e36:	31ff      	adds	r1, #255	; 0xff
 8001e38:	6808      	ldr	r0, [r1, #0]
 8001e3a:	6849      	ldr	r1, [r1, #4]
 8001e3c:	f7fe fb04 	bl	8000448 <__aeabi_lmul>
 8001e40:	0002      	movs	r2, r0
 8001e42:	000b      	movs	r3, r1
 8001e44:	0f91      	lsrs	r1, r2, #30
 8001e46:	0098      	lsls	r0, r3, #2
 8001e48:	24ee      	movs	r4, #238	; 0xee
 8001e4a:	0064      	lsls	r4, r4, #1
 8001e4c:	193d      	adds	r5, r7, r4
 8001e4e:	6028      	str	r0, [r5, #0]
 8001e50:	1938      	adds	r0, r7, r4
 8001e52:	6800      	ldr	r0, [r0, #0]
 8001e54:	4308      	orrs	r0, r1
 8001e56:	1939      	adds	r1, r7, r4
 8001e58:	6008      	str	r0, [r1, #0]
 8001e5a:	0093      	lsls	r3, r2, #2
 8001e5c:	e008      	b.n	8001e70 <Set_Random_Motion_Values+0x454>
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	7fffffff 	.word	0x7fffffff
 8001e64:	200000e8 	.word	0x200000e8
 8001e68:	200000f4 	.word	0x200000f4
 8001e6c:	20000100 	.word	0x20000100
 8001e70:	21ec      	movs	r1, #236	; 0xec
 8001e72:	0049      	lsls	r1, r1, #1
 8001e74:	187a      	adds	r2, r7, r1
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4aa0      	ldr	r2, [pc, #640]	; (80020fc <Set_Random_Motion_Values+0x6e0>)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	1879      	adds	r1, r7, r1
 8001e7e:	6808      	ldr	r0, [r1, #0]
 8001e80:	6849      	ldr	r1, [r1, #4]
 8001e82:	f7fe fac1 	bl	8000408 <__aeabi_uldivmod>
 8001e86:	0002      	movs	r2, r0
 8001e88:	000b      	movs	r3, r1
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	2203      	movs	r2, #3
 8001e90:	4252      	negs	r2, r2
 8001e92:	17d3      	asrs	r3, r2, #31
 8001e94:	1a12      	subs	r2, r2, r0
 8001e96:	418b      	sbcs	r3, r1
 8001e98:	0010      	movs	r0, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	4b98      	ldr	r3, [pc, #608]	; (8002100 <Set_Random_Motion_Values+0x6e4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	18d3      	adds	r3, r2, r3
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	4b95      	ldr	r3, [pc, #596]	; (8002100 <Set_Random_Motion_Values+0x6e4>)
 8001eaa:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001eac:	f008 fbf8 	bl	800a6a0 <rand>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	21f0      	movs	r1, #240	; 0xf0
 8001eb4:	187a      	adds	r2, r7, r1
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	17db      	asrs	r3, r3, #31
 8001eba:	22f4      	movs	r2, #244	; 0xf4
 8001ebc:	18ba      	adds	r2, r7, r2
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	19bb      	adds	r3, r7, r6
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	22e8      	movs	r2, #232	; 0xe8
 8001ec6:	18b8      	adds	r0, r7, r2
 8001ec8:	6003      	str	r3, [r0, #0]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	20ec      	movs	r0, #236	; 0xec
 8001ece:	1838      	adds	r0, r7, r0
 8001ed0:	6003      	str	r3, [r0, #0]
 8001ed2:	18bb      	adds	r3, r7, r2
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	1879      	adds	r1, r7, r1
 8001eda:	6808      	ldr	r0, [r1, #0]
 8001edc:	6849      	ldr	r1, [r1, #4]
 8001ede:	f7fe fab3 	bl	8000448 <__aeabi_lmul>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	000b      	movs	r3, r1
 8001ee6:	0014      	movs	r4, r2
 8001ee8:	001d      	movs	r5, r3
 8001eea:	0022      	movs	r2, r4
 8001eec:	002b      	movs	r3, r5
 8001eee:	0f91      	lsrs	r1, r2, #30
 8001ef0:	468c      	mov	ip, r1
 8001ef2:	0098      	lsls	r0, r3, #2
 8001ef4:	21de      	movs	r1, #222	; 0xde
 8001ef6:	0049      	lsls	r1, r1, #1
 8001ef8:	1879      	adds	r1, r7, r1
 8001efa:	6008      	str	r0, [r1, #0]
 8001efc:	20de      	movs	r0, #222	; 0xde
 8001efe:	0040      	lsls	r0, r0, #1
 8001f00:	1839      	adds	r1, r7, r0
 8001f02:	6808      	ldr	r0, [r1, #0]
 8001f04:	4661      	mov	r1, ip
 8001f06:	4308      	orrs	r0, r1
 8001f08:	21de      	movs	r1, #222	; 0xde
 8001f0a:	0049      	lsls	r1, r1, #1
 8001f0c:	1879      	adds	r1, r7, r1
 8001f0e:	6008      	str	r0, [r1, #0]
 8001f10:	0093      	lsls	r3, r2, #2
 8001f12:	22dc      	movs	r2, #220	; 0xdc
 8001f14:	0052      	lsls	r2, r2, #1
 8001f16:	18b9      	adds	r1, r7, r2
 8001f18:	600b      	str	r3, [r1, #0]
 8001f1a:	18bb      	adds	r3, r7, r2
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	1900      	adds	r0, r0, r4
 8001f22:	4169      	adcs	r1, r5
 8001f24:	4a75      	ldr	r2, [pc, #468]	; (80020fc <Set_Random_Motion_Values+0x6e0>)
 8001f26:	2300      	movs	r3, #0
 8001f28:	f7fe fa6e 	bl	8000408 <__aeabi_uldivmod>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	000b      	movs	r3, r1
 8001f30:	0010      	movs	r0, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	2203      	movs	r2, #3
 8001f36:	2300      	movs	r3, #0
 8001f38:	1880      	adds	r0, r0, r2
 8001f3a:	4159      	adcs	r1, r3
 8001f3c:	4b70      	ldr	r3, [pc, #448]	; (8002100 <Set_Random_Motion_Values+0x6e4>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	001a      	movs	r2, r3
 8001f42:	0003      	movs	r3, r0
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	001a      	movs	r2, r3
 8001f48:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <Set_Random_Motion_Values+0x6e4>)
 8001f4a:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001f4c:	f008 fba8 	bl	800a6a0 <rand>
 8001f50:	0003      	movs	r3, r0
 8001f52:	21e0      	movs	r1, #224	; 0xe0
 8001f54:	187a      	adds	r2, r7, r1
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	17db      	asrs	r3, r3, #31
 8001f5a:	22e4      	movs	r2, #228	; 0xe4
 8001f5c:	18ba      	adds	r2, r7, r2
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	19bb      	adds	r3, r7, r6
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	22d8      	movs	r2, #216	; 0xd8
 8001f66:	18b8      	adds	r0, r7, r2
 8001f68:	6003      	str	r3, [r0, #0]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	20dc      	movs	r0, #220	; 0xdc
 8001f6e:	1838      	adds	r0, r7, r0
 8001f70:	6003      	str	r3, [r0, #0]
 8001f72:	18bb      	adds	r3, r7, r2
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	1879      	adds	r1, r7, r1
 8001f7a:	6808      	ldr	r0, [r1, #0]
 8001f7c:	6849      	ldr	r1, [r1, #4]
 8001f7e:	f7fe fa63 	bl	8000448 <__aeabi_lmul>
 8001f82:	0002      	movs	r2, r0
 8001f84:	000b      	movs	r3, r1
 8001f86:	0010      	movs	r0, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	000b      	movs	r3, r1
 8001f8e:	1892      	adds	r2, r2, r2
 8001f90:	415b      	adcs	r3, r3
 8001f92:	1880      	adds	r0, r0, r2
 8001f94:	4159      	adcs	r1, r3
 8001f96:	4a59      	ldr	r2, [pc, #356]	; (80020fc <Set_Random_Motion_Values+0x6e0>)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f7fe fa35 	bl	8000408 <__aeabi_uldivmod>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	000b      	movs	r3, r1
 8001fa2:	0010      	movs	r0, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	2264      	movs	r2, #100	; 0x64
 8001fa8:	2300      	movs	r3, #0
 8001faa:	1880      	adds	r0, r0, r2
 8001fac:	4159      	adcs	r1, r3
 8001fae:	4b55      	ldr	r3, [pc, #340]	; (8002104 <Set_Random_Motion_Values+0x6e8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	001a      	movs	r2, r3
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <Set_Random_Motion_Values+0x6e8>)
 8001fbc:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001fbe:	f008 fb6f 	bl	800a6a0 <rand>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	21d0      	movs	r1, #208	; 0xd0
 8001fc6:	187a      	adds	r2, r7, r1
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	17db      	asrs	r3, r3, #31
 8001fcc:	22d4      	movs	r2, #212	; 0xd4
 8001fce:	18ba      	adds	r2, r7, r2
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	19bb      	adds	r3, r7, r6
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	22c8      	movs	r2, #200	; 0xc8
 8001fd8:	18b8      	adds	r0, r7, r2
 8001fda:	6003      	str	r3, [r0, #0]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	20cc      	movs	r0, #204	; 0xcc
 8001fe0:	1838      	adds	r0, r7, r0
 8001fe2:	6003      	str	r3, [r0, #0]
 8001fe4:	18bb      	adds	r3, r7, r2
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	1879      	adds	r1, r7, r1
 8001fec:	6808      	ldr	r0, [r1, #0]
 8001fee:	6849      	ldr	r1, [r1, #4]
 8001ff0:	f7fe fa2a 	bl	8000448 <__aeabi_lmul>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	000b      	movs	r3, r1
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	000b      	movs	r3, r1
 8002000:	0f94      	lsrs	r4, r2, #30
 8002002:	46a4      	mov	ip, r4
 8002004:	009d      	lsls	r5, r3, #2
 8002006:	24da      	movs	r4, #218	; 0xda
 8002008:	0064      	lsls	r4, r4, #1
 800200a:	193c      	adds	r4, r7, r4
 800200c:	6025      	str	r5, [r4, #0]
 800200e:	25da      	movs	r5, #218	; 0xda
 8002010:	006d      	lsls	r5, r5, #1
 8002012:	197c      	adds	r4, r7, r5
 8002014:	6825      	ldr	r5, [r4, #0]
 8002016:	4664      	mov	r4, ip
 8002018:	4325      	orrs	r5, r4
 800201a:	24da      	movs	r4, #218	; 0xda
 800201c:	0064      	lsls	r4, r4, #1
 800201e:	193c      	adds	r4, r7, r4
 8002020:	6025      	str	r5, [r4, #0]
 8002022:	0093      	lsls	r3, r2, #2
 8002024:	22d8      	movs	r2, #216	; 0xd8
 8002026:	0052      	lsls	r2, r2, #1
 8002028:	18bc      	adds	r4, r7, r2
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	18bb      	adds	r3, r7, r2
 800202e:	685c      	ldr	r4, [r3, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	181b      	adds	r3, r3, r0
 8002034:	414c      	adcs	r4, r1
 8002036:	0018      	movs	r0, r3
 8002038:	0021      	movs	r1, r4
 800203a:	4a30      	ldr	r2, [pc, #192]	; (80020fc <Set_Random_Motion_Values+0x6e0>)
 800203c:	2300      	movs	r3, #0
 800203e:	f7fe f9e3 	bl	8000408 <__aeabi_uldivmod>
 8002042:	0002      	movs	r2, r0
 8002044:	000b      	movs	r3, r1
 8002046:	0010      	movs	r0, r2
 8002048:	0019      	movs	r1, r3
 800204a:	2264      	movs	r2, #100	; 0x64
 800204c:	2300      	movs	r3, #0
 800204e:	1812      	adds	r2, r2, r0
 8002050:	414b      	adcs	r3, r1
 8002052:	492c      	ldr	r1, [pc, #176]	; (8002104 <Set_Random_Motion_Values+0x6e8>)
 8002054:	6849      	ldr	r1, [r1, #4]
 8002056:	0013      	movs	r3, r2
 8002058:	18cb      	adds	r3, r1, r3
 800205a:	001a      	movs	r2, r3
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <Set_Random_Motion_Values+0x6e8>)
 800205e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8002060:	f008 fb1e 	bl	800a6a0 <rand>
 8002064:	0003      	movs	r3, r0
 8002066:	21c0      	movs	r1, #192	; 0xc0
 8002068:	187a      	adds	r2, r7, r1
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	17db      	asrs	r3, r3, #31
 800206e:	22c4      	movs	r2, #196	; 0xc4
 8002070:	18ba      	adds	r2, r7, r2
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	19bb      	adds	r3, r7, r6
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	22b8      	movs	r2, #184	; 0xb8
 800207a:	18b8      	adds	r0, r7, r2
 800207c:	6003      	str	r3, [r0, #0]
 800207e:	2300      	movs	r3, #0
 8002080:	20bc      	movs	r0, #188	; 0xbc
 8002082:	1838      	adds	r0, r7, r0
 8002084:	6003      	str	r3, [r0, #0]
 8002086:	18bb      	adds	r3, r7, r2
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	1879      	adds	r1, r7, r1
 800208e:	6808      	ldr	r0, [r1, #0]
 8002090:	6849      	ldr	r1, [r1, #4]
 8002092:	f7fe f9d9 	bl	8000448 <__aeabi_lmul>
 8002096:	0002      	movs	r2, r0
 8002098:	000b      	movs	r3, r1
 800209a:	0010      	movs	r0, r2
 800209c:	0019      	movs	r1, r3
 800209e:	0002      	movs	r2, r0
 80020a0:	000b      	movs	r3, r1
 80020a2:	0f54      	lsrs	r4, r2, #29
 80020a4:	46a4      	mov	ip, r4
 80020a6:	00dd      	lsls	r5, r3, #3
 80020a8:	26d6      	movs	r6, #214	; 0xd6
 80020aa:	0076      	lsls	r6, r6, #1
 80020ac:	19bc      	adds	r4, r7, r6
 80020ae:	6025      	str	r5, [r4, #0]
 80020b0:	19bd      	adds	r5, r7, r6
 80020b2:	682d      	ldr	r5, [r5, #0]
 80020b4:	4664      	mov	r4, ip
 80020b6:	4325      	orrs	r5, r4
 80020b8:	19bc      	adds	r4, r7, r6
 80020ba:	6025      	str	r5, [r4, #0]
 80020bc:	00d3      	lsls	r3, r2, #3
 80020be:	22d4      	movs	r2, #212	; 0xd4
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	18bc      	adds	r4, r7, r2
 80020c4:	6023      	str	r3, [r4, #0]
 80020c6:	18bb      	adds	r3, r7, r2
 80020c8:	685c      	ldr	r4, [r3, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	1a1b      	subs	r3, r3, r0
 80020ce:	418c      	sbcs	r4, r1
 80020d0:	0018      	movs	r0, r3
 80020d2:	0021      	movs	r1, r4
 80020d4:	4a09      	ldr	r2, [pc, #36]	; (80020fc <Set_Random_Motion_Values+0x6e0>)
 80020d6:	2300      	movs	r3, #0
 80020d8:	f7fe f996 	bl	8000408 <__aeabi_uldivmod>
 80020dc:	0002      	movs	r2, r0
 80020de:	000b      	movs	r3, r1
 80020e0:	0010      	movs	r0, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	2264      	movs	r2, #100	; 0x64
 80020e6:	2300      	movs	r3, #0
 80020e8:	1812      	adds	r2, r2, r0
 80020ea:	414b      	adcs	r3, r1
 80020ec:	4905      	ldr	r1, [pc, #20]	; (8002104 <Set_Random_Motion_Values+0x6e8>)
 80020ee:	6889      	ldr	r1, [r1, #8]
 80020f0:	0013      	movs	r3, r2
 80020f2:	1acb      	subs	r3, r1, r3
 80020f4:	001a      	movs	r2, r3
 80020f6:	4b03      	ldr	r3, [pc, #12]	; (8002104 <Set_Random_Motion_Values+0x6e8>)
 80020f8:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 80020fa:	e309      	b.n	8002710 <Set_Random_Motion_Values+0xcf4>
 80020fc:	7fffffff 	.word	0x7fffffff
 8002100:	20000100 	.word	0x20000100
 8002104:	2000010c 	.word	0x2000010c
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8002108:	f008 faca 	bl	800a6a0 <rand>
 800210c:	0003      	movs	r3, r0
 800210e:	21b0      	movs	r1, #176	; 0xb0
 8002110:	187a      	adds	r2, r7, r1
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	17db      	asrs	r3, r3, #31
 8002116:	22b4      	movs	r2, #180	; 0xb4
 8002118:	18ba      	adds	r2, r7, r2
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	26f6      	movs	r6, #246	; 0xf6
 800211e:	0076      	lsls	r6, r6, #1
 8002120:	19bb      	adds	r3, r7, r6
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	001c      	movs	r4, r3
 8002126:	2300      	movs	r3, #0
 8002128:	001d      	movs	r5, r3
 800212a:	0022      	movs	r2, r4
 800212c:	002b      	movs	r3, r5
 800212e:	1879      	adds	r1, r7, r1
 8002130:	6808      	ldr	r0, [r1, #0]
 8002132:	6849      	ldr	r1, [r1, #4]
 8002134:	f7fe f988 	bl	8000448 <__aeabi_lmul>
 8002138:	0002      	movs	r2, r0
 800213a:	000b      	movs	r3, r1
 800213c:	0010      	movs	r0, r2
 800213e:	0019      	movs	r1, r3
 8002140:	0002      	movs	r2, r0
 8002142:	000b      	movs	r3, r1
 8002144:	1892      	adds	r2, r2, r2
 8002146:	415b      	adcs	r3, r3
 8002148:	1880      	adds	r0, r0, r2
 800214a:	4159      	adcs	r1, r3
 800214c:	4af4      	ldr	r2, [pc, #976]	; (8002520 <Set_Random_Motion_Values+0xb04>)
 800214e:	2300      	movs	r3, #0
 8002150:	f7fe f95a 	bl	8000408 <__aeabi_uldivmod>
 8002154:	0002      	movs	r2, r0
 8002156:	000b      	movs	r3, r1
 8002158:	0010      	movs	r0, r2
 800215a:	0019      	movs	r1, r3
 800215c:	220a      	movs	r2, #10
 800215e:	4252      	negs	r2, r2
 8002160:	17d3      	asrs	r3, r2, #31
 8002162:	1a12      	subs	r2, r2, r0
 8002164:	418b      	sbcs	r3, r1
 8002166:	0010      	movs	r0, r2
 8002168:	0019      	movs	r1, r3
 800216a:	4bee      	ldr	r3, [pc, #952]	; (8002524 <Set_Random_Motion_Values+0xb08>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	001a      	movs	r2, r3
 8002170:	0003      	movs	r3, r0
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	001a      	movs	r2, r3
 8002176:	4beb      	ldr	r3, [pc, #940]	; (8002524 <Set_Random_Motion_Values+0xb08>)
 8002178:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800217a:	f008 fa91 	bl	800a6a0 <rand>
 800217e:	0003      	movs	r3, r0
 8002180:	21a8      	movs	r1, #168	; 0xa8
 8002182:	187a      	adds	r2, r7, r1
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	17db      	asrs	r3, r3, #31
 8002188:	22ac      	movs	r2, #172	; 0xac
 800218a:	18ba      	adds	r2, r7, r2
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	19bb      	adds	r3, r7, r6
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	22a0      	movs	r2, #160	; 0xa0
 8002194:	18b8      	adds	r0, r7, r2
 8002196:	6003      	str	r3, [r0, #0]
 8002198:	2300      	movs	r3, #0
 800219a:	20a4      	movs	r0, #164	; 0xa4
 800219c:	1838      	adds	r0, r7, r0
 800219e:	6003      	str	r3, [r0, #0]
 80021a0:	18bb      	adds	r3, r7, r2
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	1879      	adds	r1, r7, r1
 80021a8:	6808      	ldr	r0, [r1, #0]
 80021aa:	6849      	ldr	r1, [r1, #4]
 80021ac:	f7fe f94c 	bl	8000448 <__aeabi_lmul>
 80021b0:	0002      	movs	r2, r0
 80021b2:	000b      	movs	r3, r1
 80021b4:	0014      	movs	r4, r2
 80021b6:	001d      	movs	r5, r3
 80021b8:	0022      	movs	r2, r4
 80021ba:	002b      	movs	r3, r5
 80021bc:	0f91      	lsrs	r1, r2, #30
 80021be:	468c      	mov	ip, r1
 80021c0:	0098      	lsls	r0, r3, #2
 80021c2:	21d2      	movs	r1, #210	; 0xd2
 80021c4:	0049      	lsls	r1, r1, #1
 80021c6:	1879      	adds	r1, r7, r1
 80021c8:	6008      	str	r0, [r1, #0]
 80021ca:	20d2      	movs	r0, #210	; 0xd2
 80021cc:	0040      	lsls	r0, r0, #1
 80021ce:	1839      	adds	r1, r7, r0
 80021d0:	6808      	ldr	r0, [r1, #0]
 80021d2:	4661      	mov	r1, ip
 80021d4:	4308      	orrs	r0, r1
 80021d6:	21d2      	movs	r1, #210	; 0xd2
 80021d8:	0049      	lsls	r1, r1, #1
 80021da:	1879      	adds	r1, r7, r1
 80021dc:	6008      	str	r0, [r1, #0]
 80021de:	0093      	lsls	r3, r2, #2
 80021e0:	22d0      	movs	r2, #208	; 0xd0
 80021e2:	0052      	lsls	r2, r2, #1
 80021e4:	18b9      	adds	r1, r7, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	18bb      	adds	r3, r7, r2
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	1900      	adds	r0, r0, r4
 80021f0:	4169      	adcs	r1, r5
 80021f2:	4acb      	ldr	r2, [pc, #812]	; (8002520 <Set_Random_Motion_Values+0xb04>)
 80021f4:	2300      	movs	r3, #0
 80021f6:	f7fe f907 	bl	8000408 <__aeabi_uldivmod>
 80021fa:	0002      	movs	r2, r0
 80021fc:	000b      	movs	r3, r1
 80021fe:	0010      	movs	r0, r2
 8002200:	0019      	movs	r1, r3
 8002202:	220a      	movs	r2, #10
 8002204:	2300      	movs	r3, #0
 8002206:	1880      	adds	r0, r0, r2
 8002208:	4159      	adcs	r1, r3
 800220a:	4bc6      	ldr	r3, [pc, #792]	; (8002524 <Set_Random_Motion_Values+0xb08>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	001a      	movs	r2, r3
 8002210:	0003      	movs	r3, r0
 8002212:	18d3      	adds	r3, r2, r3
 8002214:	001a      	movs	r2, r3
 8002216:	4bc3      	ldr	r3, [pc, #780]	; (8002524 <Set_Random_Motion_Values+0xb08>)
 8002218:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800221a:	f008 fa41 	bl	800a6a0 <rand>
 800221e:	0003      	movs	r3, r0
 8002220:	2198      	movs	r1, #152	; 0x98
 8002222:	187a      	adds	r2, r7, r1
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	17db      	asrs	r3, r3, #31
 8002228:	229c      	movs	r2, #156	; 0x9c
 800222a:	18ba      	adds	r2, r7, r2
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	19bb      	adds	r3, r7, r6
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2290      	movs	r2, #144	; 0x90
 8002234:	18b8      	adds	r0, r7, r2
 8002236:	6003      	str	r3, [r0, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	2094      	movs	r0, #148	; 0x94
 800223c:	1838      	adds	r0, r7, r0
 800223e:	6003      	str	r3, [r0, #0]
 8002240:	18bb      	adds	r3, r7, r2
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	1879      	adds	r1, r7, r1
 8002248:	6808      	ldr	r0, [r1, #0]
 800224a:	6849      	ldr	r1, [r1, #4]
 800224c:	f7fe f8fc 	bl	8000448 <__aeabi_lmul>
 8002250:	0002      	movs	r2, r0
 8002252:	000b      	movs	r3, r1
 8002254:	0014      	movs	r4, r2
 8002256:	001d      	movs	r5, r3
 8002258:	0022      	movs	r2, r4
 800225a:	002b      	movs	r3, r5
 800225c:	0f51      	lsrs	r1, r2, #29
 800225e:	468c      	mov	ip, r1
 8002260:	00d8      	lsls	r0, r3, #3
 8002262:	21ce      	movs	r1, #206	; 0xce
 8002264:	0049      	lsls	r1, r1, #1
 8002266:	1879      	adds	r1, r7, r1
 8002268:	6008      	str	r0, [r1, #0]
 800226a:	20ce      	movs	r0, #206	; 0xce
 800226c:	0040      	lsls	r0, r0, #1
 800226e:	1839      	adds	r1, r7, r0
 8002270:	6808      	ldr	r0, [r1, #0]
 8002272:	4661      	mov	r1, ip
 8002274:	4308      	orrs	r0, r1
 8002276:	21ce      	movs	r1, #206	; 0xce
 8002278:	0049      	lsls	r1, r1, #1
 800227a:	1879      	adds	r1, r7, r1
 800227c:	6008      	str	r0, [r1, #0]
 800227e:	00d3      	lsls	r3, r2, #3
 8002280:	22cc      	movs	r2, #204	; 0xcc
 8002282:	0052      	lsls	r2, r2, #1
 8002284:	18b9      	adds	r1, r7, r2
 8002286:	600b      	str	r3, [r1, #0]
 8002288:	18bb      	adds	r3, r7, r2
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	1b00      	subs	r0, r0, r4
 8002290:	41a9      	sbcs	r1, r5
 8002292:	4aa3      	ldr	r2, [pc, #652]	; (8002520 <Set_Random_Motion_Values+0xb04>)
 8002294:	2300      	movs	r3, #0
 8002296:	f7fe f8b7 	bl	8000408 <__aeabi_uldivmod>
 800229a:	0002      	movs	r2, r0
 800229c:	000b      	movs	r3, r1
 800229e:	0010      	movs	r0, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	220a      	movs	r2, #10
 80022a4:	4252      	negs	r2, r2
 80022a6:	17d3      	asrs	r3, r2, #31
 80022a8:	1a12      	subs	r2, r2, r0
 80022aa:	418b      	sbcs	r3, r1
 80022ac:	0010      	movs	r0, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	4b9c      	ldr	r3, [pc, #624]	; (8002524 <Set_Random_Motion_Values+0xb08>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	001a      	movs	r2, r3
 80022b6:	0003      	movs	r3, r0
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	001a      	movs	r2, r3
 80022bc:	4b99      	ldr	r3, [pc, #612]	; (8002524 <Set_Random_Motion_Values+0xb08>)
 80022be:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80022c0:	f008 f9ee 	bl	800a6a0 <rand>
 80022c4:	0003      	movs	r3, r0
 80022c6:	2188      	movs	r1, #136	; 0x88
 80022c8:	187a      	adds	r2, r7, r1
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	17db      	asrs	r3, r3, #31
 80022ce:	228c      	movs	r2, #140	; 0x8c
 80022d0:	18ba      	adds	r2, r7, r2
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	19bb      	adds	r3, r7, r6
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	18b8      	adds	r0, r7, r2
 80022dc:	6003      	str	r3, [r0, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	2084      	movs	r0, #132	; 0x84
 80022e2:	1838      	adds	r0, r7, r0
 80022e4:	6003      	str	r3, [r0, #0]
 80022e6:	18bb      	adds	r3, r7, r2
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	1879      	adds	r1, r7, r1
 80022ee:	6808      	ldr	r0, [r1, #0]
 80022f0:	6849      	ldr	r1, [r1, #4]
 80022f2:	f7fe f8a9 	bl	8000448 <__aeabi_lmul>
 80022f6:	0002      	movs	r2, r0
 80022f8:	000b      	movs	r3, r1
 80022fa:	1892      	adds	r2, r2, r2
 80022fc:	415b      	adcs	r3, r3
 80022fe:	0010      	movs	r0, r2
 8002300:	0019      	movs	r1, r3
 8002302:	4a87      	ldr	r2, [pc, #540]	; (8002520 <Set_Random_Motion_Values+0xb04>)
 8002304:	2300      	movs	r3, #0
 8002306:	f7fe f87f 	bl	8000408 <__aeabi_uldivmod>
 800230a:	0002      	movs	r2, r0
 800230c:	000b      	movs	r3, r1
 800230e:	0010      	movs	r0, r2
 8002310:	0019      	movs	r1, r3
 8002312:	2264      	movs	r2, #100	; 0x64
 8002314:	4252      	negs	r2, r2
 8002316:	17d3      	asrs	r3, r2, #31
 8002318:	1a12      	subs	r2, r2, r0
 800231a:	418b      	sbcs	r3, r1
 800231c:	0010      	movs	r0, r2
 800231e:	0019      	movs	r1, r3
 8002320:	4b81      	ldr	r3, [pc, #516]	; (8002528 <Set_Random_Motion_Values+0xb0c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	001a      	movs	r2, r3
 8002326:	0003      	movs	r3, r0
 8002328:	18d3      	adds	r3, r2, r3
 800232a:	001a      	movs	r2, r3
 800232c:	4b7e      	ldr	r3, [pc, #504]	; (8002528 <Set_Random_Motion_Values+0xb0c>)
 800232e:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8002330:	f008 f9b6 	bl	800a6a0 <rand>
 8002334:	0003      	movs	r3, r0
 8002336:	67bb      	str	r3, [r7, #120]	; 0x78
 8002338:	17db      	asrs	r3, r3, #31
 800233a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800233c:	19bb      	adds	r3, r7, r6
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	673b      	str	r3, [r7, #112]	; 0x70
 8002342:	2300      	movs	r3, #0
 8002344:	677b      	str	r3, [r7, #116]	; 0x74
 8002346:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800234c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800234e:	f7fe f87b 	bl	8000448 <__aeabi_lmul>
 8002352:	0002      	movs	r2, r0
 8002354:	000b      	movs	r3, r1
 8002356:	0f91      	lsrs	r1, r2, #30
 8002358:	0098      	lsls	r0, r3, #2
 800235a:	24ea      	movs	r4, #234	; 0xea
 800235c:	0064      	lsls	r4, r4, #1
 800235e:	193d      	adds	r5, r7, r4
 8002360:	6028      	str	r0, [r5, #0]
 8002362:	1938      	adds	r0, r7, r4
 8002364:	6800      	ldr	r0, [r0, #0]
 8002366:	4308      	orrs	r0, r1
 8002368:	1939      	adds	r1, r7, r4
 800236a:	6008      	str	r0, [r1, #0]
 800236c:	0093      	lsls	r3, r2, #2
 800236e:	21e8      	movs	r1, #232	; 0xe8
 8002370:	0049      	lsls	r1, r1, #1
 8002372:	187a      	adds	r2, r7, r1
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <Set_Random_Motion_Values+0xb04>)
 8002378:	2300      	movs	r3, #0
 800237a:	1879      	adds	r1, r7, r1
 800237c:	6808      	ldr	r0, [r1, #0]
 800237e:	6849      	ldr	r1, [r1, #4]
 8002380:	f7fe f842 	bl	8000408 <__aeabi_uldivmod>
 8002384:	0002      	movs	r2, r0
 8002386:	000b      	movs	r3, r1
 8002388:	0010      	movs	r0, r2
 800238a:	0019      	movs	r1, r3
 800238c:	2264      	movs	r2, #100	; 0x64
 800238e:	2300      	movs	r3, #0
 8002390:	1880      	adds	r0, r0, r2
 8002392:	4159      	adcs	r1, r3
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <Set_Random_Motion_Values+0xb0c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	001a      	movs	r2, r3
 800239a:	0003      	movs	r3, r0
 800239c:	18d3      	adds	r3, r2, r3
 800239e:	001a      	movs	r2, r3
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <Set_Random_Motion_Values+0xb0c>)
 80023a2:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80023a4:	f008 f97c 	bl	800a6a0 <rand>
 80023a8:	0003      	movs	r3, r0
 80023aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80023ac:	17db      	asrs	r3, r3, #31
 80023ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023b0:	19bb      	adds	r3, r7, r6
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	663b      	str	r3, [r7, #96]	; 0x60
 80023b6:	2300      	movs	r3, #0
 80023b8:	667b      	str	r3, [r7, #100]	; 0x64
 80023ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023be:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80023c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80023c2:	f7fe f841 	bl	8000448 <__aeabi_lmul>
 80023c6:	0002      	movs	r2, r0
 80023c8:	000b      	movs	r3, r1
 80023ca:	0010      	movs	r0, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	0002      	movs	r2, r0
 80023d0:	000b      	movs	r3, r1
 80023d2:	1892      	adds	r2, r2, r2
 80023d4:	415b      	adcs	r3, r3
 80023d6:	1812      	adds	r2, r2, r0
 80023d8:	414b      	adcs	r3, r1
 80023da:	1892      	adds	r2, r2, r2
 80023dc:	415b      	adcs	r3, r3
 80023de:	0010      	movs	r0, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <Set_Random_Motion_Values+0xb04>)
 80023e4:	2300      	movs	r3, #0
 80023e6:	f7fe f80f 	bl	8000408 <__aeabi_uldivmod>
 80023ea:	0002      	movs	r2, r0
 80023ec:	000b      	movs	r3, r1
 80023ee:	0010      	movs	r0, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	2264      	movs	r2, #100	; 0x64
 80023f4:	4252      	negs	r2, r2
 80023f6:	17d3      	asrs	r3, r2, #31
 80023f8:	1a12      	subs	r2, r2, r0
 80023fa:	418b      	sbcs	r3, r1
 80023fc:	0010      	movs	r0, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	4b49      	ldr	r3, [pc, #292]	; (8002528 <Set_Random_Motion_Values+0xb0c>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	001a      	movs	r2, r3
 8002406:	0003      	movs	r3, r0
 8002408:	18d3      	adds	r3, r2, r3
 800240a:	001a      	movs	r2, r3
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <Set_Random_Motion_Values+0xb0c>)
 800240e:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8002410:	f008 f946 	bl	800a6a0 <rand>
 8002414:	0003      	movs	r3, r0
 8002416:	65bb      	str	r3, [r7, #88]	; 0x58
 8002418:	17db      	asrs	r3, r3, #31
 800241a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800241c:	19bb      	adds	r3, r7, r6
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	653b      	str	r3, [r7, #80]	; 0x50
 8002422:	2300      	movs	r3, #0
 8002424:	657b      	str	r3, [r7, #84]	; 0x54
 8002426:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800242c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800242e:	f7fe f80b 	bl	8000448 <__aeabi_lmul>
 8002432:	0002      	movs	r2, r0
 8002434:	000b      	movs	r3, r1
 8002436:	0014      	movs	r4, r2
 8002438:	001d      	movs	r5, r3
 800243a:	0022      	movs	r2, r4
 800243c:	002b      	movs	r3, r5
 800243e:	0f51      	lsrs	r1, r2, #29
 8002440:	468c      	mov	ip, r1
 8002442:	00d8      	lsls	r0, r3, #3
 8002444:	21ca      	movs	r1, #202	; 0xca
 8002446:	0049      	lsls	r1, r1, #1
 8002448:	1879      	adds	r1, r7, r1
 800244a:	6008      	str	r0, [r1, #0]
 800244c:	20ca      	movs	r0, #202	; 0xca
 800244e:	0040      	lsls	r0, r0, #1
 8002450:	1839      	adds	r1, r7, r0
 8002452:	6808      	ldr	r0, [r1, #0]
 8002454:	4661      	mov	r1, ip
 8002456:	4308      	orrs	r0, r1
 8002458:	21ca      	movs	r1, #202	; 0xca
 800245a:	0049      	lsls	r1, r1, #1
 800245c:	1879      	adds	r1, r7, r1
 800245e:	6008      	str	r0, [r1, #0]
 8002460:	00d3      	lsls	r3, r2, #3
 8002462:	22c8      	movs	r2, #200	; 0xc8
 8002464:	0052      	lsls	r2, r2, #1
 8002466:	18b9      	adds	r1, r7, r2
 8002468:	600b      	str	r3, [r1, #0]
 800246a:	18bb      	adds	r3, r7, r2
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	1b00      	subs	r0, r0, r4
 8002472:	41a9      	sbcs	r1, r5
 8002474:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <Set_Random_Motion_Values+0xb04>)
 8002476:	2300      	movs	r3, #0
 8002478:	f7fd ffc6 	bl	8000408 <__aeabi_uldivmod>
 800247c:	0002      	movs	r2, r0
 800247e:	000b      	movs	r3, r1
 8002480:	0010      	movs	r0, r2
 8002482:	0019      	movs	r1, r3
 8002484:	2203      	movs	r2, #3
 8002486:	4252      	negs	r2, r2
 8002488:	17d3      	asrs	r3, r2, #31
 800248a:	1a12      	subs	r2, r2, r0
 800248c:	418b      	sbcs	r3, r1
 800248e:	0010      	movs	r0, r2
 8002490:	0019      	movs	r1, r3
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <Set_Random_Motion_Values+0xb10>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	001a      	movs	r2, r3
 8002498:	0003      	movs	r3, r0
 800249a:	18d3      	adds	r3, r2, r3
 800249c:	001a      	movs	r2, r3
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <Set_Random_Motion_Values+0xb10>)
 80024a0:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 80024a2:	f008 f8fd 	bl	800a6a0 <rand>
 80024a6:	0003      	movs	r3, r0
 80024a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80024aa:	17db      	asrs	r3, r3, #31
 80024ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ae:	19bb      	adds	r3, r7, r6
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	643b      	str	r3, [r7, #64]	; 0x40
 80024b4:	2300      	movs	r3, #0
 80024b6:	647b      	str	r3, [r7, #68]	; 0x44
 80024b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80024be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80024c0:	f7fd ffc2 	bl	8000448 <__aeabi_lmul>
 80024c4:	0002      	movs	r2, r0
 80024c6:	000b      	movs	r3, r1
 80024c8:	0014      	movs	r4, r2
 80024ca:	001d      	movs	r5, r3
 80024cc:	0022      	movs	r2, r4
 80024ce:	002b      	movs	r3, r5
 80024d0:	0f51      	lsrs	r1, r2, #29
 80024d2:	468c      	mov	ip, r1
 80024d4:	00d8      	lsls	r0, r3, #3
 80024d6:	21c6      	movs	r1, #198	; 0xc6
 80024d8:	0049      	lsls	r1, r1, #1
 80024da:	1879      	adds	r1, r7, r1
 80024dc:	6008      	str	r0, [r1, #0]
 80024de:	20c6      	movs	r0, #198	; 0xc6
 80024e0:	0040      	lsls	r0, r0, #1
 80024e2:	1839      	adds	r1, r7, r0
 80024e4:	6808      	ldr	r0, [r1, #0]
 80024e6:	4661      	mov	r1, ip
 80024e8:	4308      	orrs	r0, r1
 80024ea:	21c6      	movs	r1, #198	; 0xc6
 80024ec:	0049      	lsls	r1, r1, #1
 80024ee:	1879      	adds	r1, r7, r1
 80024f0:	6008      	str	r0, [r1, #0]
 80024f2:	00d3      	lsls	r3, r2, #3
 80024f4:	22c4      	movs	r2, #196	; 0xc4
 80024f6:	0052      	lsls	r2, r2, #1
 80024f8:	18b9      	adds	r1, r7, r2
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	18bb      	adds	r3, r7, r2
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	1900      	adds	r0, r0, r4
 8002504:	4169      	adcs	r1, r5
 8002506:	4a06      	ldr	r2, [pc, #24]	; (8002520 <Set_Random_Motion_Values+0xb04>)
 8002508:	2300      	movs	r3, #0
 800250a:	f7fd ff7d 	bl	8000408 <__aeabi_uldivmod>
 800250e:	0002      	movs	r2, r0
 8002510:	000b      	movs	r3, r1
 8002512:	0010      	movs	r0, r2
 8002514:	0019      	movs	r1, r3
 8002516:	2203      	movs	r2, #3
 8002518:	2300      	movs	r3, #0
 800251a:	1880      	adds	r0, r0, r2
 800251c:	4159      	adcs	r1, r3
 800251e:	e007      	b.n	8002530 <Set_Random_Motion_Values+0xb14>
 8002520:	7fffffff 	.word	0x7fffffff
 8002524:	200000e8 	.word	0x200000e8
 8002528:	200000f4 	.word	0x200000f4
 800252c:	20000100 	.word	0x20000100
 8002530:	4b79      	ldr	r3, [pc, #484]	; (8002718 <Set_Random_Motion_Values+0xcfc>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	001a      	movs	r2, r3
 8002536:	0003      	movs	r3, r0
 8002538:	18d3      	adds	r3, r2, r3
 800253a:	001a      	movs	r2, r3
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <Set_Random_Motion_Values+0xcfc>)
 800253e:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8002540:	f008 f8ae 	bl	800a6a0 <rand>
 8002544:	0003      	movs	r3, r0
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38
 8002548:	17db      	asrs	r3, r3, #31
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254c:	19bb      	adds	r3, r7, r6
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
 8002552:	2300      	movs	r3, #0
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
 8002556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800255c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800255e:	f7fd ff73 	bl	8000448 <__aeabi_lmul>
 8002562:	0002      	movs	r2, r0
 8002564:	000b      	movs	r3, r1
 8002566:	0010      	movs	r0, r2
 8002568:	0019      	movs	r1, r3
 800256a:	0002      	movs	r2, r0
 800256c:	000b      	movs	r3, r1
 800256e:	1892      	adds	r2, r2, r2
 8002570:	415b      	adcs	r3, r3
 8002572:	1880      	adds	r0, r0, r2
 8002574:	4159      	adcs	r1, r3
 8002576:	4a69      	ldr	r2, [pc, #420]	; (800271c <Set_Random_Motion_Values+0xd00>)
 8002578:	2300      	movs	r3, #0
 800257a:	f7fd ff45 	bl	8000408 <__aeabi_uldivmod>
 800257e:	0002      	movs	r2, r0
 8002580:	000b      	movs	r3, r1
 8002582:	0010      	movs	r0, r2
 8002584:	0019      	movs	r1, r3
 8002586:	2203      	movs	r2, #3
 8002588:	4252      	negs	r2, r2
 800258a:	17d3      	asrs	r3, r2, #31
 800258c:	1a12      	subs	r2, r2, r0
 800258e:	418b      	sbcs	r3, r1
 8002590:	0010      	movs	r0, r2
 8002592:	0019      	movs	r1, r3
 8002594:	4b60      	ldr	r3, [pc, #384]	; (8002718 <Set_Random_Motion_Values+0xcfc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	001a      	movs	r2, r3
 800259a:	0003      	movs	r3, r0
 800259c:	18d3      	adds	r3, r2, r3
 800259e:	001a      	movs	r2, r3
 80025a0:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <Set_Random_Motion_Values+0xcfc>)
 80025a2:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80025a4:	f008 f87c 	bl	800a6a0 <rand>
 80025a8:	0003      	movs	r3, r0
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ac:	17db      	asrs	r3, r3, #31
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b0:	19bb      	adds	r3, r7, r6
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	6a3a      	ldr	r2, [r7, #32]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025c2:	f7fd ff41 	bl	8000448 <__aeabi_lmul>
 80025c6:	0002      	movs	r2, r0
 80025c8:	000b      	movs	r3, r1
 80025ca:	0014      	movs	r4, r2
 80025cc:	001d      	movs	r5, r3
 80025ce:	0022      	movs	r2, r4
 80025d0:	002b      	movs	r3, r5
 80025d2:	0f51      	lsrs	r1, r2, #29
 80025d4:	468c      	mov	ip, r1
 80025d6:	00d8      	lsls	r0, r3, #3
 80025d8:	21c2      	movs	r1, #194	; 0xc2
 80025da:	0049      	lsls	r1, r1, #1
 80025dc:	1879      	adds	r1, r7, r1
 80025de:	6008      	str	r0, [r1, #0]
 80025e0:	20c2      	movs	r0, #194	; 0xc2
 80025e2:	0040      	lsls	r0, r0, #1
 80025e4:	1839      	adds	r1, r7, r0
 80025e6:	6808      	ldr	r0, [r1, #0]
 80025e8:	4661      	mov	r1, ip
 80025ea:	4308      	orrs	r0, r1
 80025ec:	21c2      	movs	r1, #194	; 0xc2
 80025ee:	0049      	lsls	r1, r1, #1
 80025f0:	1879      	adds	r1, r7, r1
 80025f2:	6008      	str	r0, [r1, #0]
 80025f4:	00d3      	lsls	r3, r2, #3
 80025f6:	22c0      	movs	r2, #192	; 0xc0
 80025f8:	0052      	lsls	r2, r2, #1
 80025fa:	18b9      	adds	r1, r7, r2
 80025fc:	600b      	str	r3, [r1, #0]
 80025fe:	18bb      	adds	r3, r7, r2
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	1b00      	subs	r0, r0, r4
 8002606:	41a9      	sbcs	r1, r5
 8002608:	4a44      	ldr	r2, [pc, #272]	; (800271c <Set_Random_Motion_Values+0xd00>)
 800260a:	2300      	movs	r3, #0
 800260c:	f7fd fefc 	bl	8000408 <__aeabi_uldivmod>
 8002610:	0002      	movs	r2, r0
 8002612:	000b      	movs	r3, r1
 8002614:	0010      	movs	r0, r2
 8002616:	0019      	movs	r1, r3
 8002618:	22c8      	movs	r2, #200	; 0xc8
 800261a:	2300      	movs	r3, #0
 800261c:	1812      	adds	r2, r2, r0
 800261e:	414b      	adcs	r3, r1
 8002620:	493f      	ldr	r1, [pc, #252]	; (8002720 <Set_Random_Motion_Values+0xd04>)
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	0013      	movs	r3, r2
 8002626:	18cb      	adds	r3, r1, r3
 8002628:	001a      	movs	r2, r3
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <Set_Random_Motion_Values+0xd04>)
 800262c:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800262e:	f008 f837 	bl	800a6a0 <rand>
 8002632:	0003      	movs	r3, r0
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	17db      	asrs	r3, r3, #31
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	19bb      	adds	r3, r7, r6
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	69b8      	ldr	r0, [r7, #24]
 800264a:	69f9      	ldr	r1, [r7, #28]
 800264c:	f7fd fefc 	bl	8000448 <__aeabi_lmul>
 8002650:	0002      	movs	r2, r0
 8002652:	000b      	movs	r3, r1
 8002654:	0010      	movs	r0, r2
 8002656:	0019      	movs	r1, r3
 8002658:	0002      	movs	r2, r0
 800265a:	000b      	movs	r3, r1
 800265c:	1892      	adds	r2, r2, r2
 800265e:	415b      	adcs	r3, r3
 8002660:	1880      	adds	r0, r0, r2
 8002662:	4159      	adcs	r1, r3
 8002664:	4a2d      	ldr	r2, [pc, #180]	; (800271c <Set_Random_Motion_Values+0xd00>)
 8002666:	2300      	movs	r3, #0
 8002668:	f7fd fece 	bl	8000408 <__aeabi_uldivmod>
 800266c:	0002      	movs	r2, r0
 800266e:	000b      	movs	r3, r1
 8002670:	0010      	movs	r0, r2
 8002672:	0019      	movs	r1, r3
 8002674:	2296      	movs	r2, #150	; 0x96
 8002676:	2300      	movs	r3, #0
 8002678:	1812      	adds	r2, r2, r0
 800267a:	414b      	adcs	r3, r1
 800267c:	4928      	ldr	r1, [pc, #160]	; (8002720 <Set_Random_Motion_Values+0xd04>)
 800267e:	6849      	ldr	r1, [r1, #4]
 8002680:	0013      	movs	r3, r2
 8002682:	1acb      	subs	r3, r1, r3
 8002684:	001a      	movs	r2, r3
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <Set_Random_Motion_Values+0xd04>)
 8002688:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800268a:	f008 f809 	bl	800a6a0 <rand>
 800268e:	0003      	movs	r3, r0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	17db      	asrs	r3, r3, #31
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	19bb      	adds	r3, r7, r6
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	2300      	movs	r3, #0
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68b8      	ldr	r0, [r7, #8]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	f7fd fece 	bl	8000448 <__aeabi_lmul>
 80026ac:	0002      	movs	r2, r0
 80026ae:	000b      	movs	r3, r1
 80026b0:	0010      	movs	r0, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	0002      	movs	r2, r0
 80026b6:	000b      	movs	r3, r1
 80026b8:	0f94      	lsrs	r4, r2, #30
 80026ba:	46a4      	mov	ip, r4
 80026bc:	009d      	lsls	r5, r3, #2
 80026be:	26be      	movs	r6, #190	; 0xbe
 80026c0:	0076      	lsls	r6, r6, #1
 80026c2:	19bc      	adds	r4, r7, r6
 80026c4:	6025      	str	r5, [r4, #0]
 80026c6:	19bd      	adds	r5, r7, r6
 80026c8:	682d      	ldr	r5, [r5, #0]
 80026ca:	4664      	mov	r4, ip
 80026cc:	4325      	orrs	r5, r4
 80026ce:	19bc      	adds	r4, r7, r6
 80026d0:	6025      	str	r5, [r4, #0]
 80026d2:	0093      	lsls	r3, r2, #2
 80026d4:	22bc      	movs	r2, #188	; 0xbc
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	18bc      	adds	r4, r7, r2
 80026da:	6023      	str	r3, [r4, #0]
 80026dc:	18bb      	adds	r3, r7, r2
 80026de:	685c      	ldr	r4, [r3, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	181b      	adds	r3, r3, r0
 80026e4:	414c      	adcs	r4, r1
 80026e6:	0018      	movs	r0, r3
 80026e8:	0021      	movs	r1, r4
 80026ea:	4a0c      	ldr	r2, [pc, #48]	; (800271c <Set_Random_Motion_Values+0xd00>)
 80026ec:	2300      	movs	r3, #0
 80026ee:	f7fd fe8b 	bl	8000408 <__aeabi_uldivmod>
 80026f2:	0002      	movs	r2, r0
 80026f4:	000b      	movs	r3, r1
 80026f6:	0010      	movs	r0, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	220a      	movs	r2, #10
 80026fc:	2300      	movs	r3, #0
 80026fe:	1812      	adds	r2, r2, r0
 8002700:	414b      	adcs	r3, r1
 8002702:	4907      	ldr	r1, [pc, #28]	; (8002720 <Set_Random_Motion_Values+0xd04>)
 8002704:	6889      	ldr	r1, [r1, #8]
 8002706:	0013      	movs	r3, r2
 8002708:	18cb      	adds	r3, r1, r3
 800270a:	001a      	movs	r2, r3
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <Set_Random_Motion_Values+0xd04>)
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b07d      	add	sp, #500	; 0x1f4
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002718:	20000100 	.word	0x20000100
 800271c:	7fffffff 	.word	0x7fffffff
 8002720:	2000010c 	.word	0x2000010c

08002724 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8002728:	4b52      	ldr	r3, [pc, #328]	; (8002874 <Reset_Motion_Values+0x150>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	22fa      	movs	r2, #250	; 0xfa
 800272e:	00d1      	lsls	r1, r2, #3
 8002730:	0018      	movs	r0, r3
 8002732:	f7fd fe63 	bl	80003fc <__aeabi_idivmod>
 8002736:	1e0b      	subs	r3, r1, #0
 8002738:	d103      	bne.n	8002742 <Reset_Motion_Values+0x1e>
 800273a:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <Reset_Motion_Values+0x150>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	425a      	negs	r2, r3
 8002740:	e000      	b.n	8002744 <Reset_Motion_Values+0x20>
 8002742:	220a      	movs	r2, #10
 8002744:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <Reset_Motion_Values+0x150>)
 8002746:	601a      	str	r2, [r3, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8002748:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <Reset_Motion_Values+0x150>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	22fa      	movs	r2, #250	; 0xfa
 800274e:	00d1      	lsls	r1, r2, #3
 8002750:	0018      	movs	r0, r3
 8002752:	f7fd fe53 	bl	80003fc <__aeabi_idivmod>
 8002756:	1e0b      	subs	r3, r1, #0
 8002758:	d103      	bne.n	8002762 <Reset_Motion_Values+0x3e>
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <Reset_Motion_Values+0x150>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	425a      	negs	r2, r3
 8002760:	e001      	b.n	8002766 <Reset_Motion_Values+0x42>
 8002762:	230a      	movs	r3, #10
 8002764:	425a      	negs	r2, r3
 8002766:	4b43      	ldr	r3, [pc, #268]	; (8002874 <Reset_Motion_Values+0x150>)
 8002768:	605a      	str	r2, [r3, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 800276a:	4b42      	ldr	r3, [pc, #264]	; (8002874 <Reset_Motion_Values+0x150>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	22fa      	movs	r2, #250	; 0xfa
 8002770:	00d1      	lsls	r1, r2, #3
 8002772:	0018      	movs	r0, r3
 8002774:	f7fd fe42 	bl	80003fc <__aeabi_idivmod>
 8002778:	1e0b      	subs	r3, r1, #0
 800277a:	d103      	bne.n	8002784 <Reset_Motion_Values+0x60>
 800277c:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <Reset_Motion_Values+0x150>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	425a      	negs	r2, r3
 8002782:	e000      	b.n	8002786 <Reset_Motion_Values+0x62>
 8002784:	220a      	movs	r2, #10
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <Reset_Motion_Values+0x150>)
 8002788:	609a      	str	r2, [r3, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <Reset_Motion_Values+0x154>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	22fa      	movs	r2, #250	; 0xfa
 8002790:	00d1      	lsls	r1, r2, #3
 8002792:	0018      	movs	r0, r3
 8002794:	f7fd fe32 	bl	80003fc <__aeabi_idivmod>
 8002798:	1e0b      	subs	r3, r1, #0
 800279a:	d103      	bne.n	80027a4 <Reset_Motion_Values+0x80>
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <Reset_Motion_Values+0x154>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	425a      	negs	r2, r3
 80027a2:	e000      	b.n	80027a6 <Reset_Motion_Values+0x82>
 80027a4:	2264      	movs	r2, #100	; 0x64
 80027a6:	4b34      	ldr	r3, [pc, #208]	; (8002878 <Reset_Motion_Values+0x154>)
 80027a8:	601a      	str	r2, [r3, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <Reset_Motion_Values+0x154>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	22fa      	movs	r2, #250	; 0xfa
 80027b0:	00d1      	lsls	r1, r2, #3
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7fd fe22 	bl	80003fc <__aeabi_idivmod>
 80027b8:	1e0b      	subs	r3, r1, #0
 80027ba:	d103      	bne.n	80027c4 <Reset_Motion_Values+0xa0>
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <Reset_Motion_Values+0x154>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	425a      	negs	r2, r3
 80027c2:	e001      	b.n	80027c8 <Reset_Motion_Values+0xa4>
 80027c4:	2364      	movs	r3, #100	; 0x64
 80027c6:	425a      	negs	r2, r3
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <Reset_Motion_Values+0x154>)
 80027ca:	605a      	str	r2, [r3, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <Reset_Motion_Values+0x154>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	22fa      	movs	r2, #250	; 0xfa
 80027d2:	00d1      	lsls	r1, r2, #3
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7fd fe11 	bl	80003fc <__aeabi_idivmod>
 80027da:	1e0b      	subs	r3, r1, #0
 80027dc:	d103      	bne.n	80027e6 <Reset_Motion_Values+0xc2>
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <Reset_Motion_Values+0x154>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	425a      	negs	r2, r3
 80027e4:	e000      	b.n	80027e8 <Reset_Motion_Values+0xc4>
 80027e6:	2264      	movs	r2, #100	; 0x64
 80027e8:	4b23      	ldr	r3, [pc, #140]	; (8002878 <Reset_Motion_Values+0x154>)
 80027ea:	609a      	str	r2, [r3, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <Reset_Motion_Values+0x154>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	22fa      	movs	r2, #250	; 0xfa
 80027f2:	00d1      	lsls	r1, r2, #3
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7fd fe01 	bl	80003fc <__aeabi_idivmod>
 80027fa:	1e0b      	subs	r3, r1, #0
 80027fc:	d103      	bne.n	8002806 <Reset_Motion_Values+0xe2>
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <Reset_Motion_Values+0x158>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	425a      	negs	r2, r3
 8002804:	e000      	b.n	8002808 <Reset_Motion_Values+0xe4>
 8002806:	2203      	movs	r2, #3
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <Reset_Motion_Values+0x158>)
 800280a:	601a      	str	r2, [r3, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <Reset_Motion_Values+0x154>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	22fa      	movs	r2, #250	; 0xfa
 8002812:	00d1      	lsls	r1, r2, #3
 8002814:	0018      	movs	r0, r3
 8002816:	f7fd fdf1 	bl	80003fc <__aeabi_idivmod>
 800281a:	1e0b      	subs	r3, r1, #0
 800281c:	d103      	bne.n	8002826 <Reset_Motion_Values+0x102>
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <Reset_Motion_Values+0x158>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	425a      	negs	r2, r3
 8002824:	e001      	b.n	800282a <Reset_Motion_Values+0x106>
 8002826:	2303      	movs	r3, #3
 8002828:	425a      	negs	r2, r3
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <Reset_Motion_Values+0x158>)
 800282c:	605a      	str	r2, [r3, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <Reset_Motion_Values+0x154>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	22fa      	movs	r2, #250	; 0xfa
 8002834:	00d1      	lsls	r1, r2, #3
 8002836:	0018      	movs	r0, r3
 8002838:	f7fd fde0 	bl	80003fc <__aeabi_idivmod>
 800283c:	1e0b      	subs	r3, r1, #0
 800283e:	d103      	bne.n	8002848 <Reset_Motion_Values+0x124>
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <Reset_Motion_Values+0x158>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	425a      	negs	r2, r3
 8002846:	e000      	b.n	800284a <Reset_Motion_Values+0x126>
 8002848:	2203      	movs	r2, #3
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <Reset_Motion_Values+0x158>)
 800284c:	609a      	str	r2, [r3, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <Reset_Motion_Values+0x15c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	425a      	negs	r2, r3
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <Reset_Motion_Values+0x15c>)
 8002856:	601a      	str	r2, [r3, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <Reset_Motion_Values+0x15c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	425a      	negs	r2, r3
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <Reset_Motion_Values+0x15c>)
 8002860:	605a      	str	r2, [r3, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <Reset_Motion_Values+0x15c>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	425a      	negs	r2, r3
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <Reset_Motion_Values+0x15c>)
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	200000e8 	.word	0x200000e8
 8002878:	200000f4 	.word	0x200000f4
 800287c:	20000100 	.word	0x20000100
 8002880:	2000010c 	.word	0x2000010c

08002884 <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af02      	add	r7, sp, #8
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 800288e:	2317      	movs	r3, #23
 8002890:	18fc      	adds	r4, r7, r3
 8002892:	2110      	movs	r1, #16
 8002894:	187d      	adds	r5, r7, r1
 8002896:	2115      	movs	r1, #21
 8002898:	187a      	adds	r2, r7, r1
 800289a:	2612      	movs	r6, #18
 800289c:	19b9      	adds	r1, r7, r6
 800289e:	2016      	movs	r0, #22
 80028a0:	1838      	adds	r0, r7, r0
 80028a2:	230e      	movs	r3, #14
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	002b      	movs	r3, r5
 80028aa:	f005 ff2e 	bl	800870a <hci_read_local_version_information>
 80028ae:	0003      	movs	r3, r0
 80028b0:	7023      	strb	r3, [r4, #0]
                                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80028b2:	2217      	movs	r2, #23
 80028b4:	18bb      	adds	r3, r7, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d12c      	bne.n	8002916 <getBlueNRGVersion+0x92>
    *hwVersion = hci_revision >> 8;
 80028bc:	19bb      	adds	r3, r7, r6
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80028ca:	19bb      	adds	r3, r7, r6
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b21a      	sxth	r2, r3
 80028dc:	200e      	movs	r0, #14
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	21ff      	movs	r1, #255	; 0xff
 80028ec:	400b      	ands	r3, r1
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b21a      	sxth	r2, r3
 8002900:	183b      	adds	r3, r7, r0
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b21b      	sxth	r3, r3
 8002906:	210f      	movs	r1, #15
 8002908:	400b      	ands	r3, r1
 800290a:	b21b      	sxth	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	b21b      	sxth	r3, r3
 8002910:	b29a      	uxth	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8002916:	2317      	movs	r3, #23
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	781b      	ldrb	r3, [r3, #0]
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b007      	add	sp, #28
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002924 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	0002      	movs	r2, r0
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	701a      	strb	r2, [r3, #0]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <BSP_PB_Callback+0x1c>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	200000aa 	.word	0x200000aa

08002944 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	0005      	movs	r5, r0
 800294c:	000c      	movs	r4, r1
 800294e:	0010      	movs	r0, r2
 8002950:	0019      	movs	r1, r3
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	1c2a      	adds	r2, r5, #0
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	1c22      	adds	r2, r4, #0
 800295c:	801a      	strh	r2, [r3, #0]
 800295e:	1dbb      	adds	r3, r7, #6
 8002960:	1c02      	adds	r2, r0, #0
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	1cfb      	adds	r3, r7, #3
 8002966:	1c0a      	adds	r2, r1, #0
 8002968:	701a      	strb	r2, [r3, #0]
  connected = TRUE;
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <hci_le_connection_complete_event+0x50>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
#if (!SECURE_PAIRING)
  pairing = TRUE;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <hci_le_connection_complete_event+0x54>)
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
  paired = TRUE;
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <hci_le_connection_complete_event+0x58>)
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
#endif
  connection_handle = Connection_Handle;
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <hci_le_connection_complete_event+0x5c>)
 800297e:	1d3a      	adds	r2, r7, #4
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	801a      	strh	r2, [r3, #0]

  PRINT_DBG("Connected (%02x %02x %02x %02x %02x %02x)\r\n", Peer_Address[5], Peer_Address[4], Peer_Address[3],
                                                             Peer_Address[2], Peer_Address[1], Peer_Address[0]);

  BSP_LED_Off(LED2); //activity led
 8002984:	2000      	movs	r0, #0
 8002986:	f001 fba3 	bl	80040d0 <BSP_LED_Off>
}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b002      	add	sp, #8
 8002990:	bdb0      	pop	{r4, r5, r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	200000e2 	.word	0x200000e2
 8002998:	200000e3 	.word	0x200000e3
 800299c:	200000e4 	.word	0x200000e4
 80029a0:	200000e0 	.word	0x200000e0

080029a4 <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	0004      	movs	r4, r0
 80029ac:	0008      	movs	r0, r1
 80029ae:	0011      	movs	r1, r2
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	1c22      	adds	r2, r4, #0
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	1c02      	adds	r2, r0, #0
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	1dbb      	adds	r3, r7, #6
 80029be:	1c0a      	adds	r2, r1, #0
 80029c0:	701a      	strb	r2, [r3, #0]
  connected = FALSE;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <hci_disconnection_complete_event+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
  pairing = FALSE;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <hci_disconnection_complete_event+0x50>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
  paired = FALSE;
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <hci_disconnection_complete_event+0x54>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]

  /* Make the device connectable again */
  set_connectable = TRUE;
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <hci_disconnection_complete_event+0x58>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
  connection_handle = 0;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <hci_disconnection_complete_event+0x5c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected (0x%02x)\r\n", Reason);

  BSP_LED_On(LED2); //activity led
 80029e0:	2000      	movs	r0, #0
 80029e2:	f001 fb5d 	bl	80040a0 <BSP_LED_On>
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b003      	add	sp, #12
 80029ec:	bd90      	pop	{r4, r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	200000e2 	.word	0x200000e2
 80029f4:	200000e3 	.word	0x200000e3
 80029f8:	200000e4 	.word	0x200000e4
 80029fc:	20000001 	.word	0x20000001
 8002a00:	200000e0 	.word	0x200000e0

08002a04 <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	0004      	movs	r4, r0
 8002a0c:	0008      	movs	r0, r1
 8002a0e:	0011      	movs	r1, r2
 8002a10:	1dbb      	adds	r3, r7, #6
 8002a12:	1c22      	adds	r2, r4, #0
 8002a14:	801a      	strh	r2, [r3, #0]
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	1c02      	adds	r2, r0, #0
 8002a1a:	801a      	strh	r2, [r3, #0]
 8002a1c:	1cbb      	adds	r3, r7, #2
 8002a1e:	1c0a      	adds	r2, r1, #0
 8002a20:	801a      	strh	r2, [r3, #0]
  Read_Request_CB(Attribute_Handle);
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fb82 	bl	8003130 <Read_Request_CB>
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b003      	add	sp, #12
 8002a32:	bd90      	pop	{r4, r7, pc}

08002a34 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attribute_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 8002a34:	b5b0      	push	{r4, r5, r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	0005      	movs	r5, r0
 8002a3c:	000c      	movs	r4, r1
 8002a3e:	0010      	movs	r0, r2
 8002a40:	0019      	movs	r1, r3
 8002a42:	1dbb      	adds	r3, r7, #6
 8002a44:	1c2a      	adds	r2, r5, #0
 8002a46:	801a      	strh	r2, [r3, #0]
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	1c22      	adds	r2, r4, #0
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	1cbb      	adds	r3, r7, #2
 8002a50:	1c02      	adds	r2, r0, #0
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	003b      	movs	r3, r7
 8002a56:	1c0a      	adds	r2, r1, #0
 8002a58:	801a      	strh	r2, [r3, #0]
  Attribute_Modified_Request_CB(Connection_Handle, Attribute_Handle, Offset, Attr_Data_Length, Attr_Data);
 8002a5a:	003b      	movs	r3, r7
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	b2dc      	uxtb	r4, r3
 8002a60:	1cbb      	adds	r3, r7, #2
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	8819      	ldrh	r1, [r3, #0]
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	8818      	ldrh	r0, [r3, #0]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	0023      	movs	r3, r4
 8002a72:	f000 fc09 	bl	8003288 <Attribute_Modified_Request_CB>
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a80 <aci_gap_pass_key_req_event>:
 *         aci_gap_pass_key_resp command.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pass_key_req_event(uint16_t Connection_Handle)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	0002      	movs	r2, r0
 8002a88:	1dbb      	adds	r3, r7, #6
 8002a8a:	801a      	strh	r2, [r3, #0]
  uint8_t ret;

  ret = aci_gap_pass_key_resp(connection_handle, PERIPHERAL_PASS_KEY);
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <aci_gap_pass_key_req_event+0x2c>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	220f      	movs	r2, #15
 8002a94:	18bc      	adds	r4, r7, r2
 8002a96:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <aci_gap_pass_key_req_event+0x30>)
 8002a98:	0011      	movs	r1, r2
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f006 f9f2 	bl	8008e84 <aci_gap_pass_key_resp>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINT_DBG("aci_gap_pass_key_resp failed:0x%02x\r\n", ret);
  } else {
    PRINT_DBG("aci_gap_pass_key_resp OK\r\n");
  }
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b005      	add	sp, #20
 8002aaa:	bd90      	pop	{r4, r7, pc}
 8002aac:	200000e0 	.word	0x200000e0
 8002ab0:	0001e240 	.word	0x0001e240

08002ab4 <aci_gap_pairing_complete_event>:
 *         timeout has occurred so that the upper layer can decide to disconnect the link.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pairing_complete_event(uint16_t connection_handle, uint8_t status, uint8_t reason)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	0004      	movs	r4, r0
 8002abc:	0008      	movs	r0, r1
 8002abe:	0011      	movs	r1, r2
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	1c22      	adds	r2, r4, #0
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	1d7b      	adds	r3, r7, #5
 8002ac8:	1c02      	adds	r2, r0, #0
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	1c0a      	adds	r2, r1, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
  if (status == 0x02) { /* Pairing Failed */
 8002ad2:	1d7b      	adds	r3, r7, #5
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d002      	beq.n	8002ae0 <aci_gap_pairing_complete_event+0x2c>
    PRINT_DBG("aci_gap_pairing_complete_event failed:0x%02x with reason 0x%02x\r\n", status, reason);
  }
  else {
    paired = TRUE;
 8002ada:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <aci_gap_pairing_complete_event+0x34>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
    PRINT_DBG("aci_gap_pairing_complete_event with status 0x%02x\r\n", status);
  }
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b003      	add	sp, #12
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	200000e4 	.word	0x200000e4

08002aec <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002aec:	b5b0      	push	{r4, r5, r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 8002af2:	2117      	movs	r1, #23
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2205      	movs	r2, #5
 8002af8:	701a      	strb	r2, [r3, #0]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	1c1a      	adds	r2, r3, #0
 8002b00:	1892      	adds	r2, r2, r2
 8002b02:	18d3      	adds	r3, r2, r3
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	2116      	movs	r1, #22
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	3201      	adds	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	221b      	movs	r2, #27
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	22c5      	movs	r2, #197	; 0xc5
 8002b18:	705a      	strb	r2, [r3, #1]
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	22d5      	movs	r2, #213	; 0xd5
 8002b1e:	709a      	strb	r2, [r3, #2]
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	22a5      	movs	r2, #165	; 0xa5
 8002b24:	70da      	strb	r2, [r3, #3]
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	2202      	movs	r2, #2
 8002b2a:	711a      	strb	r2, [r3, #4]
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	715a      	strb	r2, [r3, #5]
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	22b4      	movs	r2, #180	; 0xb4
 8002b36:	719a      	strb	r2, [r3, #6]
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	229a      	movs	r2, #154	; 0x9a
 8002b3c:	71da      	strb	r2, [r3, #7]
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	22e1      	movs	r2, #225	; 0xe1
 8002b42:	721a      	strb	r2, [r3, #8]
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	2211      	movs	r2, #17
 8002b48:	725a      	strb	r2, [r3, #9]
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	729a      	strb	r2, [r3, #10]
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	2200      	movs	r2, #0
 8002b54:	72da      	strb	r2, [r3, #11]
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	2200      	movs	r2, #0
 8002b5a:	731a      	strb	r2, [r3, #12]
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	735a      	strb	r2, [r3, #13]
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	2200      	movs	r2, #0
 8002b66:	739a      	strb	r2, [r3, #14]
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	73da      	strb	r2, [r3, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002b6e:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <Add_HWServW2ST_Service+0x228>)
 8002b70:	1d3a      	adds	r2, r7, #4
 8002b72:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002b74:	c331      	stmia	r3!, {r0, r4, r5}
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	601a      	str	r2, [r3, #0]
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002b7a:	2515      	movs	r5, #21
 8002b7c:	197c      	adds	r4, r7, r5
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	4964      	ldr	r1, [pc, #400]	; (8002d14 <Add_HWServW2ST_Service+0x228>)
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <Add_HWServW2ST_Service+0x22c>)
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	0013      	movs	r3, r2
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f006 fc2f 	bl	80093f0 <aci_gatt_add_service>
 8002b92:	0003      	movs	r3, r0
 8002b94:	7023      	strb	r3, [r4, #0]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002b96:	197b      	adds	r3, r7, r5
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <Add_HWServW2ST_Service+0xb6>
    return BLE_STATUS_ERROR;
 8002b9e:	2347      	movs	r3, #71	; 0x47
 8002ba0:	e0b4      	b.n	8002d0c <Add_HWServW2ST_Service+0x220>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	221b      	movs	r2, #27
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	22c5      	movs	r2, #197	; 0xc5
 8002bac:	705a      	strb	r2, [r3, #1]
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	22d5      	movs	r2, #213	; 0xd5
 8002bb2:	709a      	strb	r2, [r3, #2]
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	22a5      	movs	r2, #165	; 0xa5
 8002bb8:	70da      	strb	r2, [r3, #3]
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	711a      	strb	r2, [r3, #4]
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	715a      	strb	r2, [r3, #5]
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2236      	movs	r2, #54	; 0x36
 8002bca:	719a      	strb	r2, [r3, #6]
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	22ac      	movs	r2, #172	; 0xac
 8002bd0:	71da      	strb	r2, [r3, #7]
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	22e1      	movs	r2, #225	; 0xe1
 8002bd6:	721a      	strb	r2, [r3, #8]
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	2211      	movs	r2, #17
 8002bdc:	725a      	strb	r2, [r3, #9]
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	2201      	movs	r2, #1
 8002be2:	729a      	strb	r2, [r3, #10]
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	72da      	strb	r2, [r3, #11]
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2200      	movs	r2, #0
 8002bee:	731a      	strb	r2, [r3, #12]
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	735a      	strb	r2, [r3, #13]
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	739a      	strb	r2, [r3, #14]
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	73da      	strb	r2, [r3, #15]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	7b9b      	ldrb	r3, [r3, #14]
 8002c06:	2204      	movs	r2, #4
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	739a      	strb	r2, [r3, #14]
  uuid[14] |= 0x10; /* Pressure value*/
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	7b9b      	ldrb	r3, [r3, #14]
 8002c14:	2210      	movs	r2, #16
 8002c16:	4313      	orrs	r3, r2
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	739a      	strb	r2, [r3, #14]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <Add_HWServW2ST_Service+0x230>)
 8002c20:	1d3a      	adds	r2, r7, #4
 8002c22:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c24:	c313      	stmia	r3!, {r0, r1, r4}
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	601a      	str	r2, [r3, #0]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <Add_HWServW2ST_Service+0x22c>)
 8002c2c:	8818      	ldrh	r0, [r3, #0]
 8002c2e:	2515      	movs	r5, #21
 8002c30:	197c      	adds	r4, r7, r5
 8002c32:	4a3a      	ldr	r2, [pc, #232]	; (8002d1c <Add_HWServW2ST_Service+0x230>)
 8002c34:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <Add_HWServW2ST_Service+0x234>)
 8002c36:	9305      	str	r3, [sp, #20]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9304      	str	r3, [sp, #16]
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	9303      	str	r3, [sp, #12]
 8002c40:	2304      	movs	r3, #4
 8002c42:	9302      	str	r3, [sp, #8]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	2312      	movs	r3, #18
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	2102      	movs	r1, #2
 8002c50:	f006 fcbc 	bl	80095cc <aci_gatt_add_char>
 8002c54:	0003      	movs	r3, r0
 8002c56:	7023      	strb	r3, [r4, #0]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002c58:	197b      	adds	r3, r7, r5
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <Add_HWServW2ST_Service+0x178>
    return BLE_STATUS_ERROR;
 8002c60:	2347      	movs	r3, #71	; 0x47
 8002c62:	e053      	b.n	8002d0c <Add_HWServW2ST_Service+0x220>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	221b      	movs	r2, #27
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	22c5      	movs	r2, #197	; 0xc5
 8002c6e:	705a      	strb	r2, [r3, #1]
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	22d5      	movs	r2, #213	; 0xd5
 8002c74:	709a      	strb	r2, [r3, #2]
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	22a5      	movs	r2, #165	; 0xa5
 8002c7a:	70da      	strb	r2, [r3, #3]
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	2202      	movs	r2, #2
 8002c80:	711a      	strb	r2, [r3, #4]
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	715a      	strb	r2, [r3, #5]
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	2236      	movs	r2, #54	; 0x36
 8002c8c:	719a      	strb	r2, [r3, #6]
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	22ac      	movs	r2, #172	; 0xac
 8002c92:	71da      	strb	r2, [r3, #7]
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	22e1      	movs	r2, #225	; 0xe1
 8002c98:	721a      	strb	r2, [r3, #8]
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2211      	movs	r2, #17
 8002c9e:	725a      	strb	r2, [r3, #9]
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	729a      	strb	r2, [r3, #10]
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	72da      	strb	r2, [r3, #11]
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	731a      	strb	r2, [r3, #12]
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	735a      	strb	r2, [r3, #13]
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	22e0      	movs	r2, #224	; 0xe0
 8002cbc:	739a      	strb	r2, [r3, #14]
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	73da      	strb	r2, [r3, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <Add_HWServW2ST_Service+0x230>)
 8002cc6:	1d3a      	adds	r2, r7, #4
 8002cc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cca:	c313      	stmia	r3!, {r0, r1, r4}
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	601a      	str	r2, [r3, #0]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <Add_HWServW2ST_Service+0x22c>)
 8002cd2:	8818      	ldrh	r0, [r3, #0]
 8002cd4:	2515      	movs	r5, #21
 8002cd6:	197c      	adds	r4, r7, r5
 8002cd8:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <Add_HWServW2ST_Service+0x230>)
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <Add_HWServW2ST_Service+0x238>)
 8002cdc:	9305      	str	r3, [sp, #20]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9304      	str	r3, [sp, #16]
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	9303      	str	r3, [sp, #12]
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	9302      	str	r3, [sp, #8]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2310      	movs	r3, #16
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2314      	movs	r3, #20
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	f006 fc69 	bl	80095cc <aci_gatt_add_char>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	7023      	strb	r3, [r4, #0]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002cfe:	197b      	adds	r3, r7, r5
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <Add_HWServW2ST_Service+0x21e>
    return BLE_STATUS_ERROR;
 8002d06:	2347      	movs	r3, #71	; 0x47
 8002d08:	e000      	b.n	8002d0c <Add_HWServW2ST_Service+0x220>

  return BLE_STATUS_SUCCESS;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b006      	add	sp, #24
 8002d12:	bdb0      	pop	{r4, r5, r7, pc}
 8002d14:	200000bc 	.word	0x200000bc
 8002d18:	200000b0 	.word	0x200000b0
 8002d1c:	200000cc 	.word	0x200000cc
 8002d20:	200000b2 	.word	0x200000b2
 8002d24:	200000b4 	.word	0x200000b4

08002d28 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 8002d2e:	2117      	movs	r1, #23
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	1c1a      	adds	r2, r3, #0
 8002d3c:	1892      	adds	r2, r2, r2
 8002d3e:	18d3      	adds	r3, r2, r3
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	2116      	movs	r1, #22
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	3201      	adds	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	221b      	movs	r2, #27
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	22c5      	movs	r2, #197	; 0xc5
 8002d54:	705a      	strb	r2, [r3, #1]
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	22d5      	movs	r2, #213	; 0xd5
 8002d5a:	709a      	strb	r2, [r3, #2]
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	22a5      	movs	r2, #165	; 0xa5
 8002d60:	70da      	strb	r2, [r3, #3]
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2202      	movs	r2, #2
 8002d66:	711a      	strb	r2, [r3, #4]
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	715a      	strb	r2, [r3, #5]
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	22b4      	movs	r2, #180	; 0xb4
 8002d72:	719a      	strb	r2, [r3, #6]
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	229a      	movs	r2, #154	; 0x9a
 8002d78:	71da      	strb	r2, [r3, #7]
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	22e1      	movs	r2, #225	; 0xe1
 8002d7e:	721a      	strb	r2, [r3, #8]
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	2211      	movs	r2, #17
 8002d84:	725a      	strb	r2, [r3, #9]
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	2202      	movs	r2, #2
 8002d8a:	729a      	strb	r2, [r3, #10]
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	2200      	movs	r2, #0
 8002d90:	72da      	strb	r2, [r3, #11]
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	2200      	movs	r2, #0
 8002d96:	731a      	strb	r2, [r3, #12]
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	735a      	strb	r2, [r3, #13]
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2200      	movs	r2, #0
 8002da2:	739a      	strb	r2, [r3, #14]
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	2200      	movs	r2, #0
 8002da8:	73da      	strb	r2, [r3, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002daa:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <Add_SWServW2ST_Service+0x16c>)
 8002dac:	1d3a      	adds	r2, r7, #4
 8002dae:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002db0:	c331      	stmia	r3!, {r0, r4, r5}
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	601a      	str	r2, [r3, #0]
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002db6:	2515      	movs	r5, #21
 8002db8:	197c      	adds	r4, r7, r5
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	4935      	ldr	r1, [pc, #212]	; (8002e94 <Add_SWServW2ST_Service+0x16c>)
 8002dc0:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <Add_SWServW2ST_Service+0x170>)
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	0013      	movs	r3, r2
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	2002      	movs	r0, #2
 8002dca:	f006 fb11 	bl	80093f0 <aci_gatt_add_service>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	7023      	strb	r3, [r4, #0]
                             max_attribute_records, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002dd2:	0029      	movs	r1, r5
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d152      	bne.n	8002e82 <Add_SWServW2ST_Service+0x15a>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	221b      	movs	r2, #27
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	22c5      	movs	r2, #197	; 0xc5
 8002de6:	705a      	strb	r2, [r3, #1]
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	22d5      	movs	r2, #213	; 0xd5
 8002dec:	709a      	strb	r2, [r3, #2]
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	22a5      	movs	r2, #165	; 0xa5
 8002df2:	70da      	strb	r2, [r3, #3]
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	2202      	movs	r2, #2
 8002df8:	711a      	strb	r2, [r3, #4]
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	715a      	strb	r2, [r3, #5]
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2236      	movs	r2, #54	; 0x36
 8002e04:	719a      	strb	r2, [r3, #6]
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	22ac      	movs	r2, #172	; 0xac
 8002e0a:	71da      	strb	r2, [r3, #7]
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	22e1      	movs	r2, #225	; 0xe1
 8002e10:	721a      	strb	r2, [r3, #8]
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	2211      	movs	r2, #17
 8002e16:	725a      	strb	r2, [r3, #9]
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	729a      	strb	r2, [r3, #10]
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	2200      	movs	r2, #0
 8002e22:	72da      	strb	r2, [r3, #11]
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	2200      	movs	r2, #0
 8002e28:	731a      	strb	r2, [r3, #12]
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	735a      	strb	r2, [r3, #13]
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	2200      	movs	r2, #0
 8002e34:	739a      	strb	r2, [r3, #14]
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	2200      	movs	r2, #0
 8002e3a:	73da      	strb	r2, [r3, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <Add_SWServW2ST_Service+0x174>)
 8002e3e:	1d3a      	adds	r2, r7, #4
 8002e40:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e42:	c331      	stmia	r3!, {r0, r4, r5}
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	601a      	str	r2, [r3, #0]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <Add_SWServW2ST_Service+0x170>)
 8002e4a:	8818      	ldrh	r0, [r3, #0]
 8002e4c:	000d      	movs	r5, r1
 8002e4e:	187c      	adds	r4, r7, r1
 8002e50:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <Add_SWServW2ST_Service+0x174>)
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <Add_SWServW2ST_Service+0x178>)
 8002e54:	9305      	str	r3, [sp, #20]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9304      	str	r3, [sp, #16]
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	9303      	str	r3, [sp, #12]
 8002e5e:	2304      	movs	r3, #4
 8002e60:	9302      	str	r3, [sp, #8]
 8002e62:	2300      	movs	r3, #0
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	2310      	movs	r3, #16
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	f006 fbad 	bl	80095cc <aci_gatt_add_char>
 8002e72:	0003      	movs	r3, r0
 8002e74:	7023      	strb	r3, [r4, #0]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002e76:	197b      	adds	r3, r7, r5
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <Add_SWServW2ST_Service+0x15e>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e003      	b.n	8002e8a <Add_SWServW2ST_Service+0x162>
    goto fail;
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	e000      	b.n	8002e88 <Add_SWServW2ST_Service+0x160>
    goto fail;
 8002e86:	46c0      	nop			; (mov r8, r8)

fail:
  return BLE_STATUS_ERROR;
 8002e88:	2347      	movs	r3, #71	; 0x47
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b006      	add	sp, #24
 8002e90:	bdb0      	pop	{r4, r5, r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	200000bc 	.word	0x200000bc
 8002e98:	200000b6 	.word	0x200000b6
 8002e9c:	200000cc 	.word	0x200000cc
 8002ea0:	200000b8 	.word	0x200000b8

08002ea4 <Environmental_Update>:
 * @param  int32_t pressure value
 * @param  int16_t temperature value
 * @retval tBleStatus Status
 */
tBleStatus Environmental_Update(int32_t press, int16_t temp)
{
 8002ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	000a      	movs	r2, r1
 8002eae:	1cbb      	adds	r3, r7, #2
 8002eb0:	801a      	strh	r2, [r3, #0]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002eb2:	f001 fb91 	bl	80045d8 <HAL_GetTick>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	240c      	movs	r4, #12
 8002ebe:	193b      	adds	r3, r7, r4
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	f001 fb89 	bl	80045d8 <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	0adb      	lsrs	r3, r3, #11
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	0021      	movs	r1, r4
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	705a      	strb	r2, [r3, #1]

  HOST_TO_LE_32(buff+2,press);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	187b      	adds	r3, r7, r1
 8002ed8:	709a      	strb	r2, [r3, #2]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	121b      	asrs	r3, r3, #8
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	70da      	strb	r2, [r3, #3]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	141b      	asrs	r3, r3, #16
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	711a      	strb	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	161b      	asrs	r3, r3, #24
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	715a      	strb	r2, [r3, #5]
  HOST_TO_LE_16(buff+6,temp);
 8002ef8:	1cbb      	adds	r3, r7, #2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	719a      	strb	r2, [r3, #6]
 8002f02:	1cbb      	adds	r3, r7, #2
 8002f04:	2200      	movs	r2, #0
 8002f06:	5e9b      	ldrsh	r3, [r3, r2]
 8002f08:	121b      	asrs	r3, r3, #8
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	000d      	movs	r5, r1
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	71da      	strb	r2, [r3, #7]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <Environmental_Update+0xa4>)
 8002f16:	8818      	ldrh	r0, [r3, #0]
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <Environmental_Update+0xa8>)
 8002f1a:	8819      	ldrh	r1, [r3, #0]
 8002f1c:	2617      	movs	r6, #23
 8002f1e:	19bc      	adds	r4, r7, r6
 8002f20:	197b      	adds	r3, r7, r5
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2308      	movs	r3, #8
 8002f26:	2200      	movs	r2, #0
 8002f28:	f006 fca2 	bl	8009870 <aci_gatt_update_char_value>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	7023      	strb	r3, [r4, #0]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002f30:	19bb      	adds	r3, r7, r6
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <Environmental_Update+0x98>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002f38:	2347      	movs	r3, #71	; 0x47
 8002f3a:	e000      	b.n	8002f3e <Environmental_Update+0x9a>
  }

  return BLE_STATUS_SUCCESS;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b007      	add	sp, #28
 8002f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	200000b0 	.word	0x200000b0
 8002f4c:	200000b2 	.word	0x200000b2

08002f50 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f52:	b08d      	sub	sp, #52	; 0x34
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002f5c:	f001 fb3c 	bl	80045d8 <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	08db      	lsrs	r3, r3, #3
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	2410      	movs	r4, #16
 8002f68:	193b      	adds	r3, r7, r4
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	f001 fb34 	bl	80045d8 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	0adb      	lsrs	r3, r3, #11
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	0021      	movs	r1, r4
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	705a      	strb	r2, [r3, #1]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	425b      	negs	r3, r3
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	709a      	strb	r2, [r3, #2]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	425b      	negs	r3, r3
 8002f90:	121b      	asrs	r3, r3, #8
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	187b      	adds	r3, r7, r1
 8002f96:	70da      	strb	r2, [r3, #3]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	711a      	strb	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	121b      	asrs	r3, r3, #8
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	715a      	strb	r2, [r3, #5]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	719a      	strb	r2, [r3, #6]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	425b      	negs	r3, r3
 8002fc2:	121b      	asrs	r3, r3, #8
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	71da      	strb	r2, [r3, #7]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	721a      	strb	r2, [r3, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	121b      	asrs	r3, r3, #8
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	725a      	strb	r2, [r3, #9]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	000d      	movs	r5, r1
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	729a      	strb	r2, [r3, #10]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	121b      	asrs	r3, r3, #8
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	197b      	adds	r3, r7, r5
 8002ff6:	72da      	strb	r2, [r3, #11]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	197b      	adds	r3, r7, r5
 8003000:	731a      	strb	r2, [r3, #12]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	121b      	asrs	r3, r3, #8
 8003008:	b2da      	uxtb	r2, r3
 800300a:	197b      	adds	r3, r7, r5
 800300c:	735a      	strb	r2, [r3, #13]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	197b      	adds	r3, r7, r5
 8003016:	739a      	strb	r2, [r3, #14]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	121b      	asrs	r3, r3, #8
 800301e:	b2da      	uxtb	r2, r3
 8003020:	197b      	adds	r3, r7, r5
 8003022:	73da      	strb	r2, [r3, #15]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	197b      	adds	r3, r7, r5
 800302c:	741a      	strb	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	121b      	asrs	r3, r3, #8
 8003034:	b2da      	uxtb	r2, r3
 8003036:	197b      	adds	r3, r7, r5
 8003038:	745a      	strb	r2, [r3, #17]
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	197b      	adds	r3, r7, r5
 8003042:	749a      	strb	r2, [r3, #18]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	121b      	asrs	r3, r3, #8
 800304a:	b2da      	uxtb	r2, r3
 800304c:	197b      	adds	r3, r7, r5
 800304e:	74da      	strb	r2, [r3, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <Acc_Update+0x134>)
 8003052:	8818      	ldrh	r0, [r3, #0]
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <Acc_Update+0x138>)
 8003056:	8819      	ldrh	r1, [r3, #0]
 8003058:	2627      	movs	r6, #39	; 0x27
 800305a:	19bc      	adds	r4, r7, r6
 800305c:	197b      	adds	r3, r7, r5
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2314      	movs	r3, #20
 8003062:	2200      	movs	r2, #0
 8003064:	f006 fc04 	bl	8009870 <aci_gatt_update_char_value>
 8003068:	0003      	movs	r3, r0
 800306a:	7023      	strb	r3, [r4, #0]
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800306c:	19bb      	adds	r3, r7, r6
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <Acc_Update+0x128>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8003074:	2347      	movs	r3, #71	; 0x47
 8003076:	e000      	b.n	800307a <Acc_Update+0x12a>
  }

  return BLE_STATUS_SUCCESS;
 8003078:	2300      	movs	r3, #0
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b00b      	add	sp, #44	; 0x2c
 8003080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	200000b0 	.word	0x200000b0
 8003088:	200000b4 	.word	0x200000b4

0800308c <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 800308c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af02      	add	r7, sp, #8
 8003092:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8003094:	f001 faa0 	bl	80045d8 <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	08db      	lsrs	r3, r3, #3
 800309c:	b2da      	uxtb	r2, r3
 800309e:	250c      	movs	r5, #12
 80030a0:	197b      	adds	r3, r7, r5
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	f001 fa98 	bl	80045d8 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	0adb      	lsrs	r3, r3, #11
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	197b      	adds	r3, r7, r5
 80030b0:	705a      	strb	r2, [r3, #1]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	197b      	adds	r3, r7, r5
 80030ba:	709a      	strb	r2, [r3, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	121b      	asrs	r3, r3, #8
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	197b      	adds	r3, r7, r5
 80030c6:	70da      	strb	r2, [r3, #3]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	197b      	adds	r3, r7, r5
 80030d0:	711a      	strb	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	121b      	asrs	r3, r3, #8
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	197b      	adds	r3, r7, r5
 80030dc:	715a      	strb	r2, [r3, #5]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	197b      	adds	r3, r7, r5
 80030e6:	719a      	strb	r2, [r3, #6]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	121b      	asrs	r3, r3, #8
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	197b      	adds	r3, r7, r5
 80030f2:	71da      	strb	r2, [r3, #7]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <Quat_Update+0x9c>)
 80030f6:	8818      	ldrh	r0, [r3, #0]
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <Quat_Update+0xa0>)
 80030fa:	8819      	ldrh	r1, [r3, #0]
 80030fc:	2617      	movs	r6, #23
 80030fe:	19bc      	adds	r4, r7, r6
 8003100:	197b      	adds	r3, r7, r5
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2308      	movs	r3, #8
 8003106:	2200      	movs	r2, #0
 8003108:	f006 fbb2 	bl	8009870 <aci_gatt_update_char_value>
 800310c:	0003      	movs	r3, r0
 800310e:	7023      	strb	r3, [r4, #0]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8003110:	19bb      	adds	r3, r7, r6
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <Quat_Update+0x90>
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8003118:	2347      	movs	r3, #71	; 0x47
 800311a:	e000      	b.n	800311e <Quat_Update+0x92>
  }

  return BLE_STATUS_SUCCESS;
 800311c:	2300      	movs	r3, #0
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b007      	add	sp, #28
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	200000b6 	.word	0x200000b6
 800312c:	200000b8 	.word	0x200000b8

08003130 <Read_Request_CB>:
 *
 * @param  Handle of the characteristic to update
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{
 8003130:	b5b0      	push	{r4, r5, r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	0002      	movs	r2, r0
 8003138:	2116      	movs	r1, #22
 800313a:	187b      	adds	r3, r7, r1
 800313c:	801a      	strh	r2, [r3, #0]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 800313e:	187b      	adds	r3, r7, r1
 8003140:	881a      	ldrh	r2, [r3, #0]
 8003142:	4b46      	ldr	r3, [pc, #280]	; (800325c <Read_Request_CB+0x12c>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	429a      	cmp	r2, r3
 800314a:	d106      	bne.n	800315a <Read_Request_CB+0x2a>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 800314c:	4a44      	ldr	r2, [pc, #272]	; (8003260 <Read_Request_CB+0x130>)
 800314e:	4945      	ldr	r1, [pc, #276]	; (8003264 <Read_Request_CB+0x134>)
 8003150:	4b45      	ldr	r3, [pc, #276]	; (8003268 <Read_Request_CB+0x138>)
 8003152:	0018      	movs	r0, r3
 8003154:	f7ff fefc 	bl	8002f50 <Acc_Update>
 8003158:	e06a      	b.n	8003230 <Read_Request_CB+0x100>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 800315a:	2316      	movs	r3, #22
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	4b42      	ldr	r3, [pc, #264]	; (800326c <Read_Request_CB+0x13c>)
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	429a      	cmp	r2, r3
 8003168:	d162      	bne.n	8003230 <Read_Request_CB+0x100>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 800316a:	f007 fa99 	bl	800a6a0 <rand>
 800316e:	0003      	movs	r3, r0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	17db      	asrs	r3, r3, #31
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	0f91      	lsrs	r1, r2, #30
 800317c:	009d      	lsls	r5, r3, #2
 800317e:	430d      	orrs	r5, r1
 8003180:	0094      	lsls	r4, r2, #2
 8003182:	68b8      	ldr	r0, [r7, #8]
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	1900      	adds	r0, r0, r4
 8003188:	4169      	adcs	r1, r5
 800318a:	4a39      	ldr	r2, [pc, #228]	; (8003270 <Read_Request_CB+0x140>)
 800318c:	2300      	movs	r3, #0
 800318e:	f7fd f93b 	bl	8000408 <__aeabi_uldivmod>
 8003192:	0002      	movs	r2, r0
 8003194:	000b      	movs	r3, r1
 8003196:	0010      	movs	r0, r2
 8003198:	0019      	movs	r1, r3
 800319a:	f7fd f983 	bl	80004a4 <__aeabi_ul2d>
 800319e:	2200      	movs	r2, #0
 80031a0:	4b34      	ldr	r3, [pc, #208]	; (8003274 <Read_Request_CB+0x144>)
 80031a2:	f7fd fba7 	bl	80008f4 <__aeabi_dadd>
 80031a6:	0002      	movs	r2, r0
 80031a8:	000b      	movs	r3, r1
 80031aa:	0010      	movs	r0, r2
 80031ac:	0019      	movs	r1, r3
 80031ae:	f7fe f96f 	bl	8001490 <__aeabi_d2f>
 80031b2:	1c03      	adds	r3, r0, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80031b6:	f007 fa73 	bl	800a6a0 <rand>
 80031ba:	0003      	movs	r3, r0
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	17db      	asrs	r3, r3, #31
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	2264      	movs	r2, #100	; 0x64
 80031c4:	2300      	movs	r3, #0
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	f7fd f93d 	bl	8000448 <__aeabi_lmul>
 80031ce:	0002      	movs	r2, r0
 80031d0:	000b      	movs	r3, r1
 80031d2:	0010      	movs	r0, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	4a26      	ldr	r2, [pc, #152]	; (8003270 <Read_Request_CB+0x140>)
 80031d8:	2300      	movs	r3, #0
 80031da:	f7fd f915 	bl	8000408 <__aeabi_uldivmod>
 80031de:	0002      	movs	r2, r0
 80031e0:	000b      	movs	r3, r1
 80031e2:	0010      	movs	r0, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	f7fd f95d 	bl	80004a4 <__aeabi_ul2d>
 80031ea:	2200      	movs	r2, #0
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <Read_Request_CB+0x148>)
 80031ee:	f7fd fb81 	bl	80008f4 <__aeabi_dadd>
 80031f2:	0002      	movs	r2, r0
 80031f4:	000b      	movs	r3, r1
 80031f6:	0010      	movs	r0, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	f7fe f949 	bl	8001490 <__aeabi_d2f>
 80031fe:	1c03      	adds	r3, r0, #0
 8003200:	623b      	str	r3, [r7, #32]
    Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8003202:	491e      	ldr	r1, [pc, #120]	; (800327c <Read_Request_CB+0x14c>)
 8003204:	6a38      	ldr	r0, [r7, #32]
 8003206:	f7fd fa2f 	bl	8000668 <__aeabi_fmul>
 800320a:	1c03      	adds	r3, r0, #0
 800320c:	1c18      	adds	r0, r3, #0
 800320e:	f7fd fb51 	bl	80008b4 <__aeabi_f2iz>
 8003212:	0004      	movs	r4, r0
 8003214:	491a      	ldr	r1, [pc, #104]	; (8003280 <Read_Request_CB+0x150>)
 8003216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003218:	f7fd fa26 	bl	8000668 <__aeabi_fmul>
 800321c:	1c03      	adds	r3, r0, #0
 800321e:	1c18      	adds	r0, r3, #0
 8003220:	f7fd fb48 	bl	80008b4 <__aeabi_f2iz>
 8003224:	0003      	movs	r3, r0
 8003226:	b21b      	sxth	r3, r3
 8003228:	0019      	movs	r1, r3
 800322a:	0020      	movs	r0, r4
 800322c:	f7ff fe3a 	bl	8002ea4 <Environmental_Update>
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
  }
#endif /* STM32L476xx */

  if(connection_handle !=0)
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <Read_Request_CB+0x154>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <Read_Request_CB+0x122>
  {
    ret = aci_gatt_allow_read(connection_handle);
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <Read_Request_CB+0x154>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	220f      	movs	r2, #15
 8003242:	2110      	movs	r1, #16
 8003244:	1852      	adds	r2, r2, r1
 8003246:	19d4      	adds	r4, r2, r7
 8003248:	0018      	movs	r0, r3
 800324a:	f006 fbed 	bl	8009a28 <aci_gatt_allow_read>
 800324e:	0003      	movs	r3, r0
 8003250:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b00a      	add	sp, #40	; 0x28
 8003258:	bdb0      	pop	{r4, r5, r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	200000b4 	.word	0x200000b4
 8003260:	20000100 	.word	0x20000100
 8003264:	200000f4 	.word	0x200000f4
 8003268:	200000e8 	.word	0x200000e8
 800326c:	200000b2 	.word	0x200000b2
 8003270:	7fffffff 	.word	0x7fffffff
 8003274:	403b0000 	.word	0x403b0000
 8003278:	408f4000 	.word	0x408f4000
 800327c:	42c80000 	.word	0x42c80000
 8003280:	41200000 	.word	0x41200000
 8003284:	200000e0 	.word	0x200000e0

08003288 <Attribute_Modified_Request_CB>:
 * @param  uint8_t  *att_data attribute data
 * @param  uint8_t  data_length length of the data
 * @retval None
 */
void Attribute_Modified_Request_CB(uint16_t Connection_Handle, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	0005      	movs	r5, r0
 8003290:	000c      	movs	r4, r1
 8003292:	0010      	movs	r0, r2
 8003294:	0019      	movs	r1, r3
 8003296:	1dbb      	adds	r3, r7, #6
 8003298:	1c2a      	adds	r2, r5, #0
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	1c22      	adds	r2, r4, #0
 80032a0:	801a      	strh	r2, [r3, #0]
 80032a2:	1cbb      	adds	r3, r7, #2
 80032a4:	1c02      	adds	r2, r0, #0
 80032a6:	801a      	strh	r2, [r3, #0]
 80032a8:	1c7b      	adds	r3, r7, #1
 80032aa:	1c0a      	adds	r2, r1, #0
 80032ac:	701a      	strb	r2, [r3, #0]
  if(attr_handle == EnvironmentalCharHandle + 2) {
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	4b23      	ldr	r3, [pc, #140]	; (8003340 <Attribute_Modified_Request_CB+0xb8>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	3302      	adds	r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d10f      	bne.n	80032dc <Attribute_Modified_Request_CB+0x54>
    if (att_data[0] == 1) {
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d103      	bne.n	80032cc <Attribute_Modified_Request_CB+0x44>
      send_env = TRUE;
 80032c4:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <Attribute_Modified_Request_CB+0xbc>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
    if (SendBackData) {
      Term_Update(att_data,data_length);
    }
  }
#endif /* STM32L476xx */
}
 80032ca:	e034      	b.n	8003336 <Attribute_Modified_Request_CB+0xae>
    } else if (att_data[0] == 0){
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d130      	bne.n	8003336 <Attribute_Modified_Request_CB+0xae>
      send_env = FALSE;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <Attribute_Modified_Request_CB+0xbc>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
}
 80032da:	e02c      	b.n	8003336 <Attribute_Modified_Request_CB+0xae>
  else if (attr_handle == AccGyroMagCharHandle +2) {
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	881a      	ldrh	r2, [r3, #0]
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <Attribute_Modified_Request_CB+0xc0>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	3302      	adds	r3, #2
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d10f      	bne.n	800330a <Attribute_Modified_Request_CB+0x82>
    if (att_data[0] == 1) {
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d103      	bne.n	80032fa <Attribute_Modified_Request_CB+0x72>
      send_mot = TRUE;
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <Attribute_Modified_Request_CB+0xc4>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
}
 80032f8:	e01d      	b.n	8003336 <Attribute_Modified_Request_CB+0xae>
    } else if (att_data[0] == 0){
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d119      	bne.n	8003336 <Attribute_Modified_Request_CB+0xae>
      send_mot = FALSE;
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <Attribute_Modified_Request_CB+0xc4>)
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
}
 8003308:	e015      	b.n	8003336 <Attribute_Modified_Request_CB+0xae>
  else if (attr_handle == QuaternionsCharHandle +2) {
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <Attribute_Modified_Request_CB+0xc8>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	3302      	adds	r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d10e      	bne.n	8003336 <Attribute_Modified_Request_CB+0xae>
    if (att_data[0] == 1) {
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d103      	bne.n	8003328 <Attribute_Modified_Request_CB+0xa0>
      send_quat = TRUE;
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <Attribute_Modified_Request_CB+0xcc>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
}
 8003326:	e006      	b.n	8003336 <Attribute_Modified_Request_CB+0xae>
    } else if (att_data[0] == 0){
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <Attribute_Modified_Request_CB+0xae>
      send_quat = FALSE;
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <Attribute_Modified_Request_CB+0xcc>)
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b002      	add	sp, #8
 800333c:	bdb0      	pop	{r4, r5, r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	200000b2 	.word	0x200000b2
 8003344:	200000dc 	.word	0x200000dc
 8003348:	200000b4 	.word	0x200000b4
 800334c:	200000dd 	.word	0x200000dd
 8003350:	200000b8 	.word	0x200000b8
 8003354:	200000de 	.word	0x200000de

08003358 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b092      	sub	sp, #72	; 0x48
 800335c:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800335e:	251c      	movs	r5, #28
 8003360:	197b      	adds	r3, r7, r5
 8003362:	4a42      	ldr	r2, [pc, #264]	; (800346c <Set_DeviceConnectable+0x114>)
 8003364:	ca03      	ldmia	r2!, {r0, r1}
 8003366:	c303      	stmia	r3!, {r0, r1}

  uint8_t manuf_data[26] = {
 8003368:	003b      	movs	r3, r7
 800336a:	2202      	movs	r2, #2
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	003b      	movs	r3, r7
 8003370:	220a      	movs	r2, #10
 8003372:	705a      	strb	r2, [r3, #1]
 8003374:	003b      	movs	r3, r7
 8003376:	2200      	movs	r2, #0
 8003378:	709a      	strb	r2, [r3, #2]
 800337a:	003b      	movs	r3, r7
 800337c:	2208      	movs	r2, #8
 800337e:	70da      	strb	r2, [r3, #3]
 8003380:	003b      	movs	r3, r7
 8003382:	2209      	movs	r2, #9
 8003384:	711a      	strb	r2, [r3, #4]
 8003386:	003b      	movs	r3, r7
 8003388:	2245      	movs	r2, #69	; 0x45
 800338a:	715a      	strb	r2, [r3, #5]
 800338c:	003b      	movs	r3, r7
 800338e:	2274      	movs	r2, #116	; 0x74
 8003390:	719a      	strb	r2, [r3, #6]
 8003392:	003b      	movs	r3, r7
 8003394:	2269      	movs	r2, #105	; 0x69
 8003396:	71da      	strb	r2, [r3, #7]
 8003398:	003b      	movs	r3, r7
 800339a:	2265      	movs	r2, #101	; 0x65
 800339c:	721a      	strb	r2, [r3, #8]
 800339e:	003b      	movs	r3, r7
 80033a0:	226e      	movs	r2, #110	; 0x6e
 80033a2:	725a      	strb	r2, [r3, #9]
 80033a4:	003b      	movs	r3, r7
 80033a6:	226e      	movs	r2, #110	; 0x6e
 80033a8:	729a      	strb	r2, [r3, #10]
 80033aa:	003b      	movs	r3, r7
 80033ac:	2265      	movs	r2, #101	; 0x65
 80033ae:	72da      	strb	r2, [r3, #11]
 80033b0:	003b      	movs	r3, r7
 80033b2:	220d      	movs	r2, #13
 80033b4:	731a      	strb	r2, [r3, #12]
 80033b6:	003b      	movs	r3, r7
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	735a      	strb	r2, [r3, #13]
 80033bc:	003b      	movs	r3, r7
 80033be:	2201      	movs	r2, #1
 80033c0:	739a      	strb	r2, [r3, #14]
 80033c2:	003b      	movs	r3, r7
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	73da      	strb	r2, [r3, #15]
 80033c8:	003b      	movs	r3, r7
 80033ca:	2200      	movs	r2, #0
 80033cc:	741a      	strb	r2, [r3, #16]
 80033ce:	003b      	movs	r3, r7
 80033d0:	22f4      	movs	r2, #244	; 0xf4
 80033d2:	745a      	strb	r2, [r3, #17]
 80033d4:	003b      	movs	r3, r7
 80033d6:	2200      	movs	r2, #0
 80033d8:	749a      	strb	r2, [r3, #18]
 80033da:	003b      	movs	r3, r7
 80033dc:	2200      	movs	r2, #0
 80033de:	74da      	strb	r2, [r3, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <Set_DeviceConnectable+0x118>)
 80033e2:	795a      	ldrb	r2, [r3, #5]
  uint8_t manuf_data[26] = {
 80033e4:	003b      	movs	r3, r7
 80033e6:	751a      	strb	r2, [r3, #20]
    bdaddr[4],
 80033e8:	4b21      	ldr	r3, [pc, #132]	; (8003470 <Set_DeviceConnectable+0x118>)
 80033ea:	791a      	ldrb	r2, [r3, #4]
  uint8_t manuf_data[26] = {
 80033ec:	003b      	movs	r3, r7
 80033ee:	755a      	strb	r2, [r3, #21]
    bdaddr[3],
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <Set_DeviceConnectable+0x118>)
 80033f2:	78da      	ldrb	r2, [r3, #3]
  uint8_t manuf_data[26] = {
 80033f4:	003b      	movs	r3, r7
 80033f6:	759a      	strb	r2, [r3, #22]
    bdaddr[2],
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <Set_DeviceConnectable+0x118>)
 80033fa:	789a      	ldrb	r2, [r3, #2]
  uint8_t manuf_data[26] = {
 80033fc:	003b      	movs	r3, r7
 80033fe:	75da      	strb	r2, [r3, #23]
    bdaddr[1],
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <Set_DeviceConnectable+0x118>)
 8003402:	785a      	ldrb	r2, [r3, #1]
  uint8_t manuf_data[26] = {
 8003404:	003b      	movs	r3, r7
 8003406:	761a      	strb	r2, [r3, #24]
    bdaddr[0]  /* BLE MAC stop */
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <Set_DeviceConnectable+0x118>)
 800340a:	781a      	ldrb	r2, [r3, #0]
  uint8_t manuf_data[26] = {
 800340c:	003b      	movs	r3, r7
 800340e:	765a      	strb	r2, [r3, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8003410:	003b      	movs	r3, r7
 8003412:	7c9b      	ldrb	r3, [r3, #18]
 8003414:	2201      	movs	r2, #1
 8003416:	4313      	orrs	r3, r2
 8003418:	b2da      	uxtb	r2, r3
 800341a:	003b      	movs	r3, r7
 800341c:	749a      	strb	r2, [r3, #18]

  hci_le_set_scan_response_data(0,NULL);
 800341e:	2100      	movs	r1, #0
 8003420:	2000      	movs	r0, #0
 8003422:	f005 f9c7 	bl	80087b4 <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8003426:	2327      	movs	r3, #39	; 0x27
 8003428:	18fc      	adds	r4, r7, r3
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	0119      	lsls	r1, r3, #4
 8003432:	2300      	movs	r3, #0
 8003434:	9306      	str	r3, [sp, #24]
 8003436:	2300      	movs	r3, #0
 8003438:	9305      	str	r3, [sp, #20]
 800343a:	2300      	movs	r3, #0
 800343c:	9304      	str	r3, [sp, #16]
 800343e:	2300      	movs	r3, #0
 8003440:	9303      	str	r3, [sp, #12]
 8003442:	197b      	adds	r3, r7, r5
 8003444:	9302      	str	r3, [sp, #8]
 8003446:	2308      	movs	r3, #8
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	2000      	movs	r0, #0
 8003452:	f005 fa25 	bl	80088a0 <aci_gap_set_discoverable>
 8003456:	0003      	movs	r3, r0
 8003458:	7023      	strb	r3, [r4, #0]
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 PUBLIC_ADDR,
                                 NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800345a:	003b      	movs	r3, r7
 800345c:	0019      	movs	r1, r3
 800345e:	201a      	movs	r0, #26
 8003460:	f005 feee 	bl	8009240 <aci_gap_update_adv_data>
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else {
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
  }
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b00a      	add	sp, #40	; 0x28
 800346a:	bdb0      	pop	{r4, r5, r7, pc}
 800346c:	0800b7cc 	.word	0x0800b7cc
 8003470:	200000a4 	.word	0x200000a4

08003474 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d000      	beq.n	800348a <APP_UserEvtRx+0x16>
 8003488:	e069      	b.n	800355e <APP_UserEvtRx+0xea>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	3301      	adds	r3, #1
 800348e:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b3e      	cmp	r3, #62	; 0x3e
 8003496:	d11f      	bne.n	80034d8 <APP_UserEvtRx+0x64>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3302      	adds	r3, #2
 800349c:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e015      	b.n	80034d0 <APP_UserEvtRx+0x5c>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <APP_UserEvtRx+0xf4>)
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	00c9      	lsls	r1, r1, #3
 80034b0:	5acb      	ldrh	r3, [r1, r3]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d109      	bne.n	80034ca <APP_UserEvtRx+0x56>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80034b6:	4a2c      	ldr	r2, [pc, #176]	; (8003568 <APP_UserEvtRx+0xf4>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	3304      	adds	r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	3201      	adds	r2, #1
 80034c6:	0010      	movs	r0, r2
 80034c8:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3301      	adds	r3, #1
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	d9e6      	bls.n	80034a4 <APP_UserEvtRx+0x30>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 80034d6:	e042      	b.n	800355e <APP_UserEvtRx+0xea>
    else if(event_pckt->evt == EVT_VENDOR)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2bff      	cmp	r3, #255	; 0xff
 80034de:	d122      	bne.n	8003526 <APP_UserEvtRx+0xb2>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3302      	adds	r3, #2
 80034e4:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e018      	b.n	800351e <APP_UserEvtRx+0xaa>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	785b      	ldrb	r3, [r3, #1]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b1c      	ldr	r3, [pc, #112]	; (800356c <APP_UserEvtRx+0xf8>)
 80034fa:	69f9      	ldr	r1, [r7, #28]
 80034fc:	00c9      	lsls	r1, r1, #3
 80034fe:	5acb      	ldrh	r3, [r1, r3]
 8003500:	429a      	cmp	r2, r3
 8003502:	d109      	bne.n	8003518 <APP_UserEvtRx+0xa4>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <APP_UserEvtRx+0xf8>)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	18d3      	adds	r3, r2, r3
 800350c:	3304      	adds	r3, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	3202      	adds	r2, #2
 8003514:	0010      	movs	r0, r2
 8003516:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	3301      	adds	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b2a      	cmp	r3, #42	; 0x2a
 8003522:	d9e3      	bls.n	80034ec <APP_UserEvtRx+0x78>
}
 8003524:	e01b      	b.n	800355e <APP_UserEvtRx+0xea>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e015      	b.n	8003558 <APP_UserEvtRx+0xe4>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b29a      	uxth	r2, r3
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <APP_UserEvtRx+0xfc>)
 8003534:	69f9      	ldr	r1, [r7, #28]
 8003536:	00c9      	lsls	r1, r1, #3
 8003538:	5acb      	ldrh	r3, [r1, r3]
 800353a:	429a      	cmp	r2, r3
 800353c:	d109      	bne.n	8003552 <APP_UserEvtRx+0xde>
          hci_events_table[i].process((void *)event_pckt->data);
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <APP_UserEvtRx+0xfc>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	18d3      	adds	r3, r2, r3
 8003546:	3304      	adds	r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	3202      	adds	r2, #2
 800354e:	0010      	movs	r0, r2
 8003550:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3301      	adds	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d9e6      	bls.n	800352c <APP_UserEvtRx+0xb8>
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b008      	add	sp, #32
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	0800b8e8 	.word	0x0800b8e8
 800356c:	0800b938 	.word	0x0800b938
 8003570:	0800b8b0 	.word	0x0800b8b0

08003574 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003578:	2005      	movs	r0, #5
 800357a:	f001 f93e 	bl	80047fa <HAL_NVIC_EnableIRQ>
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003588:	2005      	movs	r0, #5
 800358a:	f001 f946 	bl	800481a <HAL_NVIC_DisableIRQ>
}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <HCI_TL_SPI_Init+0xb8>)
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HCI_TL_SPI_Init+0xb8>)
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	0289      	lsls	r1, r1, #10
 80035a6:	430a      	orrs	r2, r1
 80035a8:	615a      	str	r2, [r3, #20]
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <HCI_TL_SPI_Init+0xb8>)
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	029b      	lsls	r3, r3, #10
 80035b2:	4013      	ands	r3, r2
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80035b8:	240c      	movs	r4, #12
 80035ba:	193b      	adds	r3, r7, r4
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035c0:	193b      	adds	r3, r7, r4
 80035c2:	2288      	movs	r2, #136	; 0x88
 80035c4:	0352      	lsls	r2, r2, #13
 80035c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	193b      	adds	r3, r7, r4
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80035ce:	193a      	adds	r2, r7, r4
 80035d0:	2390      	movs	r3, #144	; 0x90
 80035d2:	05db      	lsls	r3, r3, #23
 80035d4:	0011      	movs	r1, r2
 80035d6:	0018      	movs	r0, r3
 80035d8:	f001 f994 	bl	8004904 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80035dc:	0021      	movs	r1, r4
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	0052      	lsls	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e6:	000c      	movs	r4, r1
 80035e8:	193b      	adds	r3, r7, r4
 80035ea:	2201      	movs	r2, #1
 80035ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	193b      	adds	r3, r7, r4
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80035fa:	193a      	adds	r2, r7, r4
 80035fc:	2390      	movs	r3, #144	; 0x90
 80035fe:	05db      	lsls	r3, r3, #23
 8003600:	0011      	movs	r1, r2
 8003602:	0018      	movs	r0, r3
 8003604:	f001 f97e 	bl	8004904 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8003608:	0021      	movs	r1, r4
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2202      	movs	r2, #2
 800360e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2201      	movs	r2, #1
 8003614:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	187b      	adds	r3, r7, r1
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8003622:	187a      	adds	r2, r7, r1
 8003624:	2390      	movs	r3, #144	; 0x90
 8003626:	05db      	lsls	r3, r3, #23
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f001 f96a 	bl	8004904 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003630:	2390      	movs	r3, #144	; 0x90
 8003632:	05db      	lsls	r3, r3, #23
 8003634:	2201      	movs	r2, #1
 8003636:	2102      	movs	r1, #2
 8003638:	0018      	movs	r0, r3
 800363a:	f001 fbd0 	bl	8004dde <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800363e:	f000 fb13 	bl	8003c68 <BSP_SPI1_Init>
 8003642:	0003      	movs	r3, r0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b009      	add	sp, #36	; 0x24
 800364a:	bd90      	pop	{r4, r7, pc}
 800364c:	40021000 	.word	0x40021000

08003650 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8003654:	2390      	movs	r3, #144	; 0x90
 8003656:	05db      	lsls	r3, r3, #23
 8003658:	2101      	movs	r1, #1
 800365a:	0018      	movs	r0, r3
 800365c:	f001 faca 	bl	8004bf4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8003660:	2390      	movs	r3, #144	; 0x90
 8003662:	05db      	lsls	r3, r3, #23
 8003664:	2102      	movs	r1, #2
 8003666:	0018      	movs	r0, r3
 8003668:	f001 fac4 	bl	8004bf4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	005a      	lsls	r2, r3, #1
 8003670:	2390      	movs	r3, #144	; 0x90
 8003672:	05db      	lsls	r3, r3, #23
 8003674:	0011      	movs	r1, r2
 8003676:	0018      	movs	r0, r3
 8003678:	f001 fabc 	bl	8004bf4 <HAL_GPIO_DeInit>
  return 0;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003688:	2390      	movs	r3, #144	; 0x90
 800368a:	05db      	lsls	r3, r3, #23
 800368c:	2201      	movs	r2, #1
 800368e:	2102      	movs	r1, #2
 8003690:	0018      	movs	r0, r3
 8003692:	f001 fba4 	bl	8004dde <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	0059      	lsls	r1, r3, #1
 800369a:	2390      	movs	r3, #144	; 0x90
 800369c:	05db      	lsls	r3, r3, #23
 800369e:	2200      	movs	r2, #0
 80036a0:	0018      	movs	r0, r3
 80036a2:	f001 fb9c 	bl	8004dde <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80036a6:	2005      	movs	r0, #5
 80036a8:	f000 ffa0 	bl	80045ec <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	0059      	lsls	r1, r3, #1
 80036b0:	2390      	movs	r3, #144	; 0x90
 80036b2:	05db      	lsls	r3, r3, #23
 80036b4:	2201      	movs	r2, #1
 80036b6:	0018      	movs	r0, r3
 80036b8:	f001 fb91 	bl	8004dde <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80036bc:	2005      	movs	r0, #5
 80036be:	f000 ff95 	bl	80045ec <HAL_Delay>
  return 0;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80036cc:	b5b0      	push	{r4, r5, r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	000a      	movs	r2, r1
 80036d6:	1cbb      	adds	r3, r7, #2
 80036d8:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 80036da:	231d      	movs	r3, #29
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
  uint8_t char_00 = 0x00;
 80036e2:	2317      	movs	r3, #23
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80036ea:	2510      	movs	r5, #16
 80036ec:	197b      	adds	r3, r7, r5
 80036ee:	4a3e      	ldr	r2, [pc, #248]	; (80037e8 <HCI_TL_SPI_Receive+0x11c>)
 80036f0:	6811      	ldr	r1, [r2, #0]
 80036f2:	6019      	str	r1, [r3, #0]
 80036f4:	7912      	ldrb	r2, [r2, #4]
 80036f6:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80036f8:	f7ff ff44 	bl	8003584 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80036fc:	2390      	movs	r3, #144	; 0x90
 80036fe:	05db      	lsls	r3, r3, #23
 8003700:	2200      	movs	r2, #0
 8003702:	2102      	movs	r1, #2
 8003704:	0018      	movs	r0, r3
 8003706:	f001 fb6a 	bl	8004dde <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800370a:	2408      	movs	r4, #8
 800370c:	1939      	adds	r1, r7, r4
 800370e:	197b      	adds	r3, r7, r5
 8003710:	2205      	movs	r2, #5
 8003712:	0018      	movs	r0, r3
 8003714:	f000 fad8 	bl	8003cc8 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8003718:	0021      	movs	r1, r4
 800371a:	187b      	adds	r3, r7, r1
 800371c:	791b      	ldrb	r3, [r3, #4]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	b21a      	sxth	r2, r3
 8003722:	187b      	adds	r3, r7, r1
 8003724:	78db      	ldrb	r3, [r3, #3]
 8003726:	b21b      	sxth	r3, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	b21a      	sxth	r2, r3
 800372c:	211e      	movs	r1, #30
 800372e:	187b      	adds	r3, r7, r1
 8003730:	801a      	strh	r2, [r3, #0]

  if(byte_count > 0)
 8003732:	187b      	adds	r3, r7, r1
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02d      	beq.n	8003796 <HCI_TL_SPI_Receive+0xca>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 800373a:	187a      	adds	r2, r7, r1
 800373c:	1cbb      	adds	r3, r7, #2
 800373e:	8812      	ldrh	r2, [r2, #0]
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d903      	bls.n	800374e <HCI_TL_SPI_Receive+0x82>
    {
      byte_count = size;
 8003746:	187b      	adds	r3, r7, r1
 8003748:	1cba      	adds	r2, r7, #2
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	801a      	strh	r2, [r3, #0]
    }

    for(len = 0; len < byte_count; len++)
 800374e:	231d      	movs	r3, #29
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e015      	b.n	8003784 <HCI_TL_SPI_Receive+0xb8>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8003758:	2416      	movs	r4, #22
 800375a:	1939      	adds	r1, r7, r4
 800375c:	2317      	movs	r3, #23
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2201      	movs	r2, #1
 8003762:	0018      	movs	r0, r3
 8003764:	f000 fab0 	bl	8003cc8 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8003768:	211d      	movs	r1, #29
 800376a:	187b      	adds	r3, r7, r1
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	193a      	adds	r2, r7, r4
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800377a:	187b      	adds	r3, r7, r1
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	187b      	adds	r3, r7, r1
 8003780:	3201      	adds	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	231d      	movs	r3, #29
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	221e      	movs	r2, #30
 800378e:	18ba      	adds	r2, r7, r2
 8003790:	8812      	ldrh	r2, [r2, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d8e0      	bhi.n	8003758 <HCI_TL_SPI_Receive+0x8c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8003796:	f000 ff1f 	bl	80045d8 <HAL_GetTick>
 800379a:	0003      	movs	r3, r0
 800379c:	61bb      	str	r3, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800379e:	e007      	b.n	80037b0 <HCI_TL_SPI_Receive+0xe4>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80037a0:	2390      	movs	r3, #144	; 0x90
 80037a2:	05db      	lsls	r3, r3, #23
 80037a4:	2101      	movs	r1, #1
 80037a6:	0018      	movs	r0, r3
 80037a8:	f001 fafc 	bl	8004da4 <HAL_GPIO_ReadPin>
 80037ac:	1e03      	subs	r3, r0, #0
 80037ae:	d009      	beq.n	80037c4 <HCI_TL_SPI_Receive+0xf8>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80037b0:	f000 ff12 	bl	80045d8 <HAL_GetTick>
 80037b4:	0002      	movs	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad2      	subs	r2, r2, r3
 80037ba:	23fa      	movs	r3, #250	; 0xfa
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	429a      	cmp	r2, r3
 80037c0:	d3ee      	bcc.n	80037a0 <HCI_TL_SPI_Receive+0xd4>
 80037c2:	e000      	b.n	80037c6 <HCI_TL_SPI_Receive+0xfa>
      break;
 80037c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80037c6:	f7ff fed5 	bl	8003574 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80037ca:	2390      	movs	r3, #144	; 0x90
 80037cc:	05db      	lsls	r3, r3, #23
 80037ce:	2201      	movs	r2, #1
 80037d0:	2102      	movs	r1, #2
 80037d2:	0018      	movs	r0, r3
 80037d4:	f001 fb03 	bl	8004dde <HAL_GPIO_WritePin>

  return len;
 80037d8:	231d      	movs	r3, #29
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b008      	add	sp, #32
 80037e4:	bdb0      	pop	{r4, r5, r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	0800b7d4 	.word	0x0800b7d4

080037ec <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b08b      	sub	sp, #44	; 0x2c
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	000a      	movs	r2, r1
 80037f6:	1cbb      	adds	r3, r7, #2
 80037f8:	801a      	strh	r2, [r3, #0]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80037fa:	2314      	movs	r3, #20
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	4a46      	ldr	r2, [pc, #280]	; (8003918 <HCI_TL_SPI_Send+0x12c>)
 8003800:	6811      	ldr	r1, [r2, #0]
 8003802:	6019      	str	r1, [r3, #0]
 8003804:	7912      	ldrb	r2, [r2, #4]
 8003806:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8003808:	f000 fee6 	bl	80045d8 <HAL_GetTick>
 800380c:	0003      	movs	r3, r0
 800380e:	623b      	str	r3, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8003810:	f7ff feb8 	bl	8003584 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8003814:	f000 fee0 	bl	80045d8 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	61fb      	str	r3, [r7, #28]

    result = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003820:	2390      	movs	r3, #144	; 0x90
 8003822:	05db      	lsls	r3, r3, #23
 8003824:	2200      	movs	r2, #0
 8003826:	2102      	movs	r1, #2
 8003828:	0018      	movs	r0, r3
 800382a:	f001 fad8 	bl	8004dde <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 800382e:	e00a      	b.n	8003846 <HCI_TL_SPI_Send+0x5a>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8003830:	f000 fed2 	bl	80045d8 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d903      	bls.n	8003846 <HCI_TL_SPI_Send+0x5a>
      {
        result = -3;
 800383e:	2303      	movs	r3, #3
 8003840:	425b      	negs	r3, r3
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003844:	e003      	b.n	800384e <HCI_TL_SPI_Send+0x62>
    while(!IsDataAvailable())
 8003846:	f000 f86b 	bl	8003920 <IsDataAvailable>
 800384a:	1e03      	subs	r3, r0, #0
 800384c:	d0f0      	beq.n	8003830 <HCI_TL_SPI_Send+0x44>
      }
    }
    if(result == -3)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	3303      	adds	r3, #3
 8003852:	d107      	bne.n	8003864 <HCI_TL_SPI_Send+0x78>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003854:	2390      	movs	r3, #144	; 0x90
 8003856:	05db      	lsls	r3, r3, #23
 8003858:	2201      	movs	r2, #1
 800385a:	2102      	movs	r1, #2
 800385c:	0018      	movs	r0, r3
 800385e:	f001 fabe 	bl	8004dde <HAL_GPIO_WritePin>
      break;
 8003862:	e03a      	b.n	80038da <HCI_TL_SPI_Send+0xee>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003864:	240c      	movs	r4, #12
 8003866:	1939      	adds	r1, r7, r4
 8003868:	2314      	movs	r3, #20
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2205      	movs	r2, #5
 800386e:	0018      	movs	r0, r3
 8003870:	f000 fa2a 	bl	8003cc8 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8003874:	0021      	movs	r1, r4
 8003876:	187b      	adds	r3, r7, r1
 8003878:	789b      	ldrb	r3, [r3, #2]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	b21a      	sxth	r2, r3
 800387e:	187b      	adds	r3, r7, r1
 8003880:	785b      	ldrb	r3, [r3, #1]
 8003882:	b21b      	sxth	r3, r3
 8003884:	4313      	orrs	r3, r2
 8003886:	b21a      	sxth	r2, r3
 8003888:	211a      	movs	r1, #26
 800388a:	187b      	adds	r3, r7, r1
 800388c:	801a      	strh	r2, [r3, #0]

    if(rx_bytes >= size)
 800388e:	187a      	adds	r2, r7, r1
 8003890:	1cbb      	adds	r3, r7, #2
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d307      	bcc.n	80038aa <HCI_TL_SPI_Send+0xbe>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800389a:	1cbb      	adds	r3, r7, #2
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	491f      	ldr	r1, [pc, #124]	; (800391c <HCI_TL_SPI_Send+0x130>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 fa10 	bl	8003cc8 <BSP_SPI1_SendRecv>
 80038a8:	e002      	b.n	80038b0 <HCI_TL_SPI_Send+0xc4>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80038aa:	2302      	movs	r3, #2
 80038ac:	425b      	negs	r3, r3
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80038b0:	2390      	movs	r3, #144	; 0x90
 80038b2:	05db      	lsls	r3, r3, #23
 80038b4:	2201      	movs	r2, #1
 80038b6:	2102      	movs	r1, #2
 80038b8:	0018      	movs	r0, r3
 80038ba:	f001 fa90 	bl	8004dde <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80038be:	f000 fe8b 	bl	80045d8 <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b64      	cmp	r3, #100	; 0x64
 80038ca:	d903      	bls.n	80038d4 <HCI_TL_SPI_Send+0xe8>
    {
      result = -3;
 80038cc:	2303      	movs	r3, #3
 80038ce:	425b      	negs	r3, r3
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80038d2:	e002      	b.n	80038da <HCI_TL_SPI_Send+0xee>
    }
  } while(result < 0);
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db9c      	blt.n	8003814 <HCI_TL_SPI_Send+0x28>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80038da:	f000 fe7d 	bl	80045d8 <HAL_GetTick>
 80038de:	0003      	movs	r3, r0
 80038e0:	623b      	str	r3, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80038e2:	e007      	b.n	80038f4 <HCI_TL_SPI_Send+0x108>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80038e4:	2390      	movs	r3, #144	; 0x90
 80038e6:	05db      	lsls	r3, r3, #23
 80038e8:	2101      	movs	r1, #1
 80038ea:	0018      	movs	r0, r3
 80038ec:	f001 fa5a 	bl	8004da4 <HAL_GPIO_ReadPin>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d009      	beq.n	8003908 <HCI_TL_SPI_Send+0x11c>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80038f4:	f000 fe70 	bl	80045d8 <HAL_GetTick>
 80038f8:	0002      	movs	r2, r0
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	1ad2      	subs	r2, r2, r3
 80038fe:	23fa      	movs	r3, #250	; 0xfa
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	429a      	cmp	r2, r3
 8003904:	d3ee      	bcc.n	80038e4 <HCI_TL_SPI_Send+0xf8>
 8003906:	e000      	b.n	800390a <HCI_TL_SPI_Send+0x11e>
      break;
 8003908:	46c0      	nop			; (mov r8, r8)
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 800390a:	f7ff fe33 	bl	8003574 <HCI_TL_SPI_Enable_IRQ>

  return result;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b00b      	add	sp, #44	; 0x2c
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	0800b7dc 	.word	0x0800b7dc
 800391c:	20000120 	.word	0x20000120

08003920 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003924:	2390      	movs	r3, #144	; 0x90
 8003926:	05db      	lsls	r3, r3, #23
 8003928:	2101      	movs	r1, #1
 800392a:	0018      	movs	r0, r3
 800392c:	f001 fa3a 	bl	8004da4 <HAL_GPIO_ReadPin>
 8003930:	0003      	movs	r3, r0
 8003932:	3b01      	subs	r3, #1
 8003934:	425a      	negs	r2, r3
 8003936:	4153      	adcs	r3, r2
 8003938:	b2db      	uxtb	r3, r3
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <hci_tl_lowlevel_init+0x64>)
 800394a:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <hci_tl_lowlevel_init+0x68>)
 8003950:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	4a15      	ldr	r2, [pc, #84]	; (80039ac <hci_tl_lowlevel_init+0x6c>)
 8003956:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <hci_tl_lowlevel_init+0x70>)
 800395c:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <hci_tl_lowlevel_init+0x74>)
 8003962:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <hci_tl_lowlevel_init+0x78>)
 8003968:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	0018      	movs	r0, r3
 800396e:	f006 fb47 	bl	800a000 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8003972:	23c0      	movs	r3, #192	; 0xc0
 8003974:	04da      	lsls	r2, r3, #19
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <hci_tl_lowlevel_init+0x7c>)
 8003978:	0011      	movs	r1, r2
 800397a:	0018      	movs	r0, r3
 800397c:	f000 ff8b 	bl	8004896 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8003980:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <hci_tl_lowlevel_init+0x80>)
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <hci_tl_lowlevel_init+0x7c>)
 8003984:	2100      	movs	r1, #0
 8003986:	0018      	movs	r0, r3
 8003988:	f000 ff64 	bl	8004854 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2005      	movs	r0, #5
 8003992:	f000 ff1d 	bl	80047d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003996:	2005      	movs	r0, #5
 8003998:	f000 ff2f 	bl	80047fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b008      	add	sp, #32
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	08003595 	.word	0x08003595
 80039a8:	08003651 	.word	0x08003651
 80039ac:	080037ed 	.word	0x080037ed
 80039b0:	080036cd 	.word	0x080036cd
 80039b4:	08003685 	.word	0x08003685
 80039b8:	08003d09 	.word	0x08003d09
 80039bc:	20000118 	.word	0x20000118
 80039c0:	080039c5 	.word	0x080039c5

080039c4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80039c8:	e004      	b.n	80039d4 <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 80039ca:	2000      	movs	r0, #0
 80039cc:	f006 fc96 	bl	800a2fc <hci_notify_asynch_evt>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d104      	bne.n	80039de <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 80039d4:	f7ff ffa4 	bl	8003920 <IsDataAvailable>
 80039d8:	1e03      	subs	r3, r0, #0
 80039da:	d1f6      	bne.n	80039ca <hci_tl_lowlevel_isr+0x6>
 80039dc:	e000      	b.n	80039e0 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 80039de:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039e8:	f000 fd9c 	bl	8004524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039ec:	f000 f807 	bl	80039fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039f0:	f000 f858 	bl	8003aa4 <MX_GPIO_Init>
  MX_BlueNRG_2_Init();
 80039f4:	f7fd fdfe 	bl	80015f4 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 80039f8:	f7fd fe22 	bl	8001640 <MX_BlueNRG_2_Process>
 80039fc:	e7fc      	b.n	80039f8 <main+0x14>

080039fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039fe:	b590      	push	{r4, r7, lr}
 8003a00:	b099      	sub	sp, #100	; 0x64
 8003a02:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a04:	242c      	movs	r4, #44	; 0x2c
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	0018      	movs	r0, r3
 8003a0a:	2334      	movs	r3, #52	; 0x34
 8003a0c:	001a      	movs	r2, r3
 8003a0e:	2100      	movs	r1, #0
 8003a10:	f006 fe0d 	bl	800a62e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a14:	231c      	movs	r3, #28
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	0018      	movs	r0, r3
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f006 fe05 	bl	800a62e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a24:	003b      	movs	r3, r7
 8003a26:	0018      	movs	r0, r3
 8003a28:	231c      	movs	r3, #28
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	f006 fdfe 	bl	800a62e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	2220      	movs	r2, #32
 8003a36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003a38:	193b      	adds	r3, r7, r4
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a3e:	193b      	adds	r3, r7, r4
 8003a40:	2200      	movs	r2, #0
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	0018      	movs	r0, r3
 8003a48:	f001 fa02 	bl	8004e50 <HAL_RCC_OscConfig>
 8003a4c:	1e03      	subs	r3, r0, #0
 8003a4e:	d001      	beq.n	8003a54 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8003a50:	f000 f8b0 	bl	8003bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a54:	211c      	movs	r1, #28
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a6e:	187b      	adds	r3, r7, r1
 8003a70:	2101      	movs	r1, #1
 8003a72:	0018      	movs	r0, r3
 8003a74:	f001 fd72 	bl	800555c <HAL_RCC_ClockConfig>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d001      	beq.n	8003a80 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003a7c:	f000 f89a 	bl	8003bb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a80:	003b      	movs	r3, r7
 8003a82:	2202      	movs	r2, #2
 8003a84:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a86:	003b      	movs	r3, r7
 8003a88:	2200      	movs	r2, #0
 8003a8a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a8c:	003b      	movs	r3, r7
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f001 fed0 	bl	8005834 <HAL_RCCEx_PeriphCLKConfig>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d001      	beq.n	8003a9c <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003a98:	f000 f88c 	bl	8003bb4 <Error_Handler>
  }
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b019      	add	sp, #100	; 0x64
 8003aa2:	bd90      	pop	{r4, r7, pc}

08003aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b08b      	sub	sp, #44	; 0x2c
 8003aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aaa:	2414      	movs	r4, #20
 8003aac:	193b      	adds	r3, r7, r4
 8003aae:	0018      	movs	r0, r3
 8003ab0:	2314      	movs	r3, #20
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f006 fdba 	bl	800a62e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aba:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	0309      	lsls	r1, r1, #12
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	615a      	str	r2, [r3, #20]
 8003ac8:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	031b      	lsls	r3, r3, #12
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	03c9      	lsls	r1, r1, #15
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	615a      	str	r2, [r3, #20]
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	03db      	lsls	r3, r3, #15
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0289      	lsls	r1, r1, #10
 8003afc:	430a      	orrs	r2, r1
 8003afe:	615a      	str	r2, [r3, #20]
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0e:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	02c9      	lsls	r1, r1, #11
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	615a      	str	r2, [r3, #20]
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <MX_GPIO_Init+0x10c>)
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	02db      	lsls	r3, r3, #11
 8003b24:	4013      	ands	r3, r2
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8003b2a:	2381      	movs	r3, #129	; 0x81
 8003b2c:	0059      	lsls	r1, r3, #1
 8003b2e:	2390      	movs	r3, #144	; 0x90
 8003b30:	05db      	lsls	r3, r3, #23
 8003b32:	2200      	movs	r2, #0
 8003b34:	0018      	movs	r0, r3
 8003b36:	f001 f952 	bl	8004dde <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b3a:	193b      	adds	r3, r7, r4
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b40:	193b      	adds	r3, r7, r4
 8003b42:	2288      	movs	r2, #136	; 0x88
 8003b44:	0352      	lsls	r2, r2, #13
 8003b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b48:	193b      	adds	r3, r7, r4
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4e:	193a      	adds	r2, r7, r4
 8003b50:	2390      	movs	r3, #144	; 0x90
 8003b52:	05db      	lsls	r3, r3, #23
 8003b54:	0011      	movs	r1, r2
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 fed4 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8003b5c:	0021      	movs	r1, r4
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	2281      	movs	r2, #129	; 0x81
 8003b62:	0052      	lsls	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	2201      	movs	r2, #1
 8003b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	2200      	movs	r2, #0
 8003b76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b78:	187a      	adds	r2, r7, r1
 8003b7a:	2390      	movs	r3, #144	; 0x90
 8003b7c:	05db      	lsls	r3, r3, #23
 8003b7e:	0011      	movs	r1, r2
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 febf 	bl	8004904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003b86:	2200      	movs	r2, #0
 8003b88:	2100      	movs	r1, #0
 8003b8a:	2005      	movs	r0, #5
 8003b8c:	f000 fe20 	bl	80047d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003b90:	2005      	movs	r0, #5
 8003b92:	f000 fe32 	bl	80047fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	2007      	movs	r0, #7
 8003b9c:	f000 fe18 	bl	80047d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003ba0:	2007      	movs	r0, #7
 8003ba2:	f000 fe2a 	bl	80047fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b00b      	add	sp, #44	; 0x2c
 8003bac:	bd90      	pop	{r4, r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb8:	b672      	cpsid	i
}
 8003bba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bbc:	e7fe      	b.n	8003bbc <Error_Handler+0x8>
	...

08003bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_MspInit+0x44>)
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_MspInit+0x44>)
 8003bcc:	2101      	movs	r1, #1
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	619a      	str	r2, [r3, #24]
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_MspInit+0x44>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4013      	ands	r3, r2
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_MspInit+0x44>)
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_MspInit+0x44>)
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	0549      	lsls	r1, r1, #21
 8003be8:	430a      	orrs	r2, r1
 8003bea:	61da      	str	r2, [r3, #28]
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_MspInit+0x44>)
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	055b      	lsls	r3, r3, #21
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	40021000 	.word	0x40021000

08003c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <NMI_Handler+0x4>

08003c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c12:	e7fe      	b.n	8003c12 <HardFault_Handler+0x4>

08003c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c2c:	f000 fcc2 	bl	80045b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <EXTI0_1_IRQHandler+0x14>)
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 fe3c 	bl	80048bc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	20000118 	.word	0x20000118

08003c50 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <EXTI4_15_IRQHandler+0x14>)
 8003c56:	0018      	movs	r0, r3
 8003c58:	f000 fe30 	bl	80048bc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20000010 	.word	0x20000010

08003c68 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <BSP_SPI1_Init+0x54>)
 8003c74:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <BSP_SPI1_Init+0x58>)
 8003c76:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <BSP_SPI1_Init+0x5c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	1c59      	adds	r1, r3, #1
 8003c7e:	4a11      	ldr	r2, [pc, #68]	; (8003cc4 <BSP_SPI1_Init+0x5c>)
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d115      	bne.n	8003cb2 <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <BSP_SPI1_Init+0x54>)
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f002 f973 	bl	8005f74 <HAL_SPI_GetState>
 8003c8e:	1e03      	subs	r3, r0, #0
 8003c90:	d10f      	bne.n	8003cb2 <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <BSP_SPI1_Init+0x54>)
 8003c94:	0018      	movs	r0, r3
 8003c96:	f000 f887 	bl	8003da8 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d108      	bne.n	8003cb2 <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <BSP_SPI1_Init+0x54>)
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f000 f838 	bl	8003d18 <MX_SPI1_Init>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d002      	beq.n	8003cb2 <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003cac:	2308      	movs	r3, #8
 8003cae:	425b      	negs	r3, r3
 8003cb0:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003cb2:	687b      	ldr	r3, [r7, #4]
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000220 	.word	0x20000220
 8003cc0:	40013000 	.word	0x40013000
 8003cc4:	20000284 	.word	0x20000284

08003cc8 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003cc8:	b590      	push	{r4, r7, lr}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	1dbb      	adds	r3, r7, #6
 8003cd4:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8003cda:	1dbb      	adds	r3, r7, #6
 8003cdc:	881c      	ldrh	r4, [r3, #0]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	4808      	ldr	r0, [pc, #32]	; (8003d04 <BSP_SPI1_SendRecv+0x3c>)
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	015b      	lsls	r3, r3, #5
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	0023      	movs	r3, r4
 8003cec:	f001 ff60 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d002      	beq.n	8003cfa <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003cf4:	2306      	movs	r3, #6
 8003cf6:	425b      	negs	r3, r3
 8003cf8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003cfa:	697b      	ldr	r3, [r7, #20]
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b007      	add	sp, #28
 8003d02:	bd90      	pop	{r4, r7, pc}
 8003d04:	20000220 	.word	0x20000220

08003d08 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003d0c:	f000 fc64 	bl	80045d8 <HAL_GetTick>
 8003d10:	0003      	movs	r3, r0
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d20:	240f      	movs	r4, #15
 8003d22:	193b      	adds	r3, r7, r4
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <MX_SPI1_Init+0x8c>)
 8003d2c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2282      	movs	r2, #130	; 0x82
 8003d32:	0052      	lsls	r2, r2, #1
 8003d34:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	22e0      	movs	r2, #224	; 0xe0
 8003d40:	00d2      	lsls	r2, r2, #3
 8003d42:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2280      	movs	r2, #128	; 0x80
 8003d54:	0092      	lsls	r2, r2, #2
 8003d56:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2228      	movs	r2, #40	; 0x28
 8003d5c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2207      	movs	r2, #7
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f001 fe53 	bl	8005a30 <HAL_SPI_Init>
 8003d8a:	1e03      	subs	r3, r0, #0
 8003d8c:	d002      	beq.n	8003d94 <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003d94:	230f      	movs	r3, #15
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	781b      	ldrb	r3, [r3, #0]
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b005      	add	sp, #20
 8003da0:	bd90      	pop	{r4, r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	40013000 	.word	0x40013000

08003da8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b08b      	sub	sp, #44	; 0x2c
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003db0:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <SPI1_MspInit+0xec>)
 8003db2:	699a      	ldr	r2, [r3, #24]
 8003db4:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <SPI1_MspInit+0xec>)
 8003db6:	2180      	movs	r1, #128	; 0x80
 8003db8:	0149      	lsls	r1, r1, #5
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	619a      	str	r2, [r3, #24]
 8003dbe:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <SPI1_MspInit+0xec>)
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	015b      	lsls	r3, r3, #5
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dcc:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <SPI1_MspInit+0xec>)
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <SPI1_MspInit+0xec>)
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	0289      	lsls	r1, r1, #10
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	615a      	str	r2, [r3, #20]
 8003dda:	4b2e      	ldr	r3, [pc, #184]	; (8003e94 <SPI1_MspInit+0xec>)
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	029b      	lsls	r3, r3, #10
 8003de2:	4013      	ands	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de8:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <SPI1_MspInit+0xec>)
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <SPI1_MspInit+0xec>)
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	02c9      	lsls	r1, r1, #11
 8003df2:	430a      	orrs	r2, r1
 8003df4:	615a      	str	r2, [r3, #20]
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <SPI1_MspInit+0xec>)
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	02db      	lsls	r3, r3, #11
 8003dfe:	4013      	ands	r3, r2
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003e04:	2414      	movs	r4, #20
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	2240      	movs	r2, #64	; 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	193b      	adds	r3, r7, r4
 8003e0e:	2202      	movs	r2, #2
 8003e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e18:	193b      	adds	r3, r7, r4
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003e24:	193a      	adds	r2, r7, r4
 8003e26:	2390      	movs	r3, #144	; 0x90
 8003e28:	05db      	lsls	r3, r3, #23
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 fd69 	bl	8004904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003e32:	193b      	adds	r3, r7, r4
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	193b      	adds	r3, r7, r4
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	193b      	adds	r3, r7, r4
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e44:	193b      	adds	r3, r7, r4
 8003e46:	2203      	movs	r2, #3
 8003e48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003e4a:	193b      	adds	r3, r7, r4
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003e50:	193a      	adds	r2, r7, r4
 8003e52:	2390      	movs	r3, #144	; 0x90
 8003e54:	05db      	lsls	r3, r3, #23
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 fd53 	bl	8004904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003e5e:	0021      	movs	r1, r4
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	2208      	movs	r2, #8
 8003e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	2202      	movs	r2, #2
 8003e6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2203      	movs	r2, #3
 8003e76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <SPI1_MspInit+0xf0>)
 8003e82:	0019      	movs	r1, r3
 8003e84:	0010      	movs	r0, r2
 8003e86:	f000 fd3d 	bl	8004904 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b00b      	add	sp, #44	; 0x2c
 8003e90:	bd90      	pop	{r4, r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	40021000 	.word	0x40021000
 8003e98:	48000400 	.word	0x48000400

08003e9c <_getpid>:
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_kill>:
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
 8003eb2:	f006 fb89 	bl	800a5c8 <__errno>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	2216      	movs	r2, #22
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	425b      	negs	r3, r3
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_exit>:
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	425a      	negs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0011      	movs	r1, r2
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f7ff ffe5 	bl	8003ea8 <_kill>
 8003ede:	e7fe      	b.n	8003ede <_exit+0x16>

08003ee0 <_read>:
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e00a      	b.n	8003f08 <_read+0x28>
 8003ef2:	e000      	b.n	8003ef6 <_read+0x16>
 8003ef4:	bf00      	nop
 8003ef6:	0001      	movs	r1, r0
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	60ba      	str	r2, [r7, #8]
 8003efe:	b2ca      	uxtb	r2, r1
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3301      	adds	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	dbf0      	blt.n	8003ef2 <_read+0x12>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b006      	add	sp, #24
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <_write>:
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e009      	b.n	8003f40 <_write+0x26>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	60ba      	str	r2, [r7, #8]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f000 fa7d 	bl	8004434 <__io_putchar>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	dbf1      	blt.n	8003f2c <_write+0x12>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b006      	add	sp, #24
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <_close>:
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	425b      	negs	r3, r3
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b002      	add	sp, #8
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_fstat>:
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	0192      	lsls	r2, r2, #6
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_isatty>:
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b002      	add	sp, #8
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_lseek>:
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b004      	add	sp, #16
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <_sbrk>:
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <_sbrk+0x5c>)
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <_sbrk+0x60>)
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <_sbrk+0x64>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <_sbrk+0x22>
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <_sbrk+0x64>)
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <_sbrk+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <_sbrk+0x64>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d207      	bcs.n	8003fec <_sbrk+0x40>
 8003fdc:	f006 faf4 	bl	800a5c8 <__errno>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	425b      	negs	r3, r3
 8003fea:	e009      	b.n	8004000 <_sbrk+0x54>
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <_sbrk+0x64>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	18d2      	adds	r2, r2, r3
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <_sbrk+0x64>)
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b006      	add	sp, #24
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20004000 	.word	0x20004000
 800400c:	00000400 	.word	0x00000400
 8004010:	20000288 	.word	0x20000288
 8004014:	200008d8 	.word	0x200008d8

08004018 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004024:	480d      	ldr	r0, [pc, #52]	; (800405c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004026:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004028:	f7ff fff6 	bl	8004018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800402c:	480c      	ldr	r0, [pc, #48]	; (8004060 <LoopForever+0x6>)
  ldr r1, =_edata
 800402e:	490d      	ldr	r1, [pc, #52]	; (8004064 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004030:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <LoopForever+0xe>)
  movs r3, #0
 8004032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004034:	e002      	b.n	800403c <LoopCopyDataInit>

08004036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403a:	3304      	adds	r3, #4

0800403c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800403c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004040:	d3f9      	bcc.n	8004036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004042:	4a0a      	ldr	r2, [pc, #40]	; (800406c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004044:	4c0a      	ldr	r4, [pc, #40]	; (8004070 <LoopForever+0x16>)
  movs r3, #0
 8004046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004048:	e001      	b.n	800404e <LoopFillZerobss>

0800404a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800404c:	3204      	adds	r2, #4

0800404e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004050:	d3fb      	bcc.n	800404a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004052:	f006 fabf 	bl	800a5d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004056:	f7ff fcc5 	bl	80039e4 <main>

0800405a <LoopForever>:

LoopForever:
    b LoopForever
 800405a:	e7fe      	b.n	800405a <LoopForever>
  ldr   r0, =_estack
 800405c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004064:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8004068:	0800bbe8 	.word	0x0800bbe8
  ldr r2, =_sbss
 800406c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8004070:	200008d4 	.word	0x200008d4

08004074 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004074:	e7fe      	b.n	8004074 <ADC1_COMP_IRQHandler>
	...

08004078 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	0002      	movs	r2, r0
 8004080:	1dfb      	adds	r3, r7, #7
 8004082:	701a      	strb	r2, [r3, #0]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8004084:	1dfb      	adds	r3, r7, #7
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <BSP_LED_Init+0x24>)
 800408a:	0092      	lsls	r2, r2, #2
 800408c:	58d3      	ldr	r3, [r2, r3]
 800408e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8004090:	2300      	movs	r3, #0
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	0800b87c 	.word	0x0800b87c

080040a0 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	0002      	movs	r2, r0
 80040a8:	1dfb      	adds	r3, r7, #7
 80040aa:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <BSP_LED_On+0x2c>)
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	58d3      	ldr	r3, [r2, r3]
 80040b6:	2120      	movs	r1, #32
 80040b8:	2201      	movs	r2, #1
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 fe8f 	bl	8004dde <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b002      	add	sp, #8
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	20000008 	.word	0x20000008

080040d0 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	0002      	movs	r2, r0
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80040dc:	1dfb      	adds	r3, r7, #7
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <BSP_LED_Off+0x2c>)
 80040e2:	0092      	lsls	r2, r2, #2
 80040e4:	58d3      	ldr	r3, [r2, r3]
 80040e6:	2120      	movs	r1, #32
 80040e8:	2200      	movs	r2, #0
 80040ea:	0018      	movs	r0, r3
 80040ec:	f000 fe77 	bl	8004dde <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b002      	add	sp, #8
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	20000008 	.word	0x20000008

08004100 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	0002      	movs	r2, r0
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <BSP_LED_Toggle+0x2c>)
 8004112:	0092      	lsls	r2, r2, #2
 8004114:	58d3      	ldr	r3, [r2, r3]
 8004116:	2220      	movs	r2, #32
 8004118:	0011      	movs	r1, r2
 800411a:	0018      	movs	r0, r3
 800411c:	f000 fe7c 	bl	8004e18 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8004120:	2300      	movs	r3, #0
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	20000008 	.word	0x20000008

08004130 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004136:	4b21      	ldr	r3, [pc, #132]	; (80041bc <LED_USER_GPIO_Init+0x8c>)
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <LED_USER_GPIO_Init+0x8c>)
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	0289      	lsls	r1, r1, #10
 8004140:	430a      	orrs	r2, r1
 8004142:	615a      	str	r2, [r3, #20]
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <LED_USER_GPIO_Init+0x8c>)
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	029b      	lsls	r3, r3, #10
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004152:	240c      	movs	r4, #12
 8004154:	193b      	adds	r3, r7, r4
 8004156:	0018      	movs	r0, r3
 8004158:	2314      	movs	r3, #20
 800415a:	001a      	movs	r2, r3
 800415c:	2100      	movs	r1, #0
 800415e:	f006 fa66 	bl	800a62e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <LED_USER_GPIO_Init+0x8c>)
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <LED_USER_GPIO_Init+0x8c>)
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	0289      	lsls	r1, r1, #10
 800416c:	430a      	orrs	r2, r1
 800416e:	615a      	str	r2, [r3, #20]
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <LED_USER_GPIO_Init+0x8c>)
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	029b      	lsls	r3, r3, #10
 8004178:	4013      	ands	r3, r2
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800417e:	2390      	movs	r3, #144	; 0x90
 8004180:	05db      	lsls	r3, r3, #23
 8004182:	2200      	movs	r2, #0
 8004184:	2120      	movs	r1, #32
 8004186:	0018      	movs	r0, r3
 8004188:	f000 fe29 	bl	8004dde <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800418c:	0021      	movs	r1, r4
 800418e:	187b      	adds	r3, r7, r1
 8004190:	2220      	movs	r2, #32
 8004192:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004194:	187b      	adds	r3, r7, r1
 8004196:	2201      	movs	r2, #1
 8004198:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419a:	187b      	adds	r3, r7, r1
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	2200      	movs	r2, #0
 80041a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80041a6:	187a      	adds	r2, r7, r1
 80041a8:	2390      	movs	r3, #144	; 0x90
 80041aa:	05db      	lsls	r3, r3, #23
 80041ac:	0011      	movs	r1, r2
 80041ae:	0018      	movs	r0, r3
 80041b0:	f000 fba8 	bl	8004904 <HAL_GPIO_Init>

}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b009      	add	sp, #36	; 0x24
 80041ba:	bd90      	pop	{r4, r7, pc}
 80041bc:	40021000 	.word	0x40021000

080041c0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	0002      	movs	r2, r0
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	1dbb      	adds	r3, r7, #6
 80041ce:	1c0a      	adds	r2, r1, #0
 80041d0:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80041d6:	1dfb      	adds	r3, r7, #7
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <BSP_PB_Init+0xa0>)
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	58d3      	ldr	r3, [r2, r3]
 80041e0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80041e2:	1dbb      	adds	r3, r7, #6
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d134      	bne.n	8004254 <BSP_PB_Init+0x94>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80041ea:	1dfb      	adds	r3, r7, #7
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	00da      	lsls	r2, r3, #3
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <BSP_PB_Init+0xa4>)
 80041f2:	18d0      	adds	r0, r2, r3
 80041f4:	1dfb      	adds	r3, r7, #7
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <BSP_PB_Init+0xa8>)
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	58d3      	ldr	r3, [r2, r3]
 80041fe:	0019      	movs	r1, r3
 8004200:	f000 fb49 	bl	8004896 <HAL_EXTI_GetHandle>
 8004204:	1e03      	subs	r3, r0, #0
 8004206:	d003      	beq.n	8004210 <BSP_PB_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004208:	2304      	movs	r3, #4
 800420a:	425b      	negs	r3, r3
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e021      	b.n	8004254 <BSP_PB_Init+0x94>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8004210:	1dfb      	adds	r3, r7, #7
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	00da      	lsls	r2, r3, #3
 8004216:	4b13      	ldr	r3, [pc, #76]	; (8004264 <BSP_PB_Init+0xa4>)
 8004218:	18d0      	adds	r0, r2, r3
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <BSP_PB_Init+0xac>)
 8004220:	0092      	lsls	r2, r2, #2
 8004222:	58d3      	ldr	r3, [r2, r3]
 8004224:	001a      	movs	r2, r3
 8004226:	2100      	movs	r1, #0
 8004228:	f000 fb14 	bl	8004854 <HAL_EXTI_RegisterCallback>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d003      	beq.n	8004238 <BSP_PB_Init+0x78>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004230:	2304      	movs	r3, #4
 8004232:	425b      	negs	r3, r3
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	e00d      	b.n	8004254 <BSP_PB_Init+0x94>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004238:	2007      	movs	r0, #7
 800423a:	1dfb      	adds	r3, r7, #7
 800423c:	781a      	ldrb	r2, [r3, #0]
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <BSP_PB_Init+0xb0>)
 8004240:	0092      	lsls	r2, r2, #2
 8004242:	58d3      	ldr	r3, [r2, r3]
 8004244:	2200      	movs	r2, #0
 8004246:	0019      	movs	r1, r3
 8004248:	f000 fac2 	bl	80047d0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800424c:	2307      	movs	r3, #7
 800424e:	0018      	movs	r0, r3
 8004250:	f000 fad3 	bl	80047fa <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8004254:	68fb      	ldr	r3, [r7, #12]
}
 8004256:	0018      	movs	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	b004      	add	sp, #16
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	0800b880 	.word	0x0800b880
 8004264:	20000010 	.word	0x20000010
 8004268:	0800b884 	.word	0x0800b884
 800426c:	0800b888 	.word	0x0800b888
 8004270:	0800b88c 	.word	0x0800b88c

08004274 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	0002      	movs	r2, r0
 800427c:	1dfb      	adds	r3, r7, #7
 800427e:	701a      	strb	r2, [r3, #0]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8004280:	1dfb      	adds	r3, r7, #7
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <BSP_PB_GetState+0x34>)
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	58d3      	ldr	r3, [r2, r3]
 800428a:	2280      	movs	r2, #128	; 0x80
 800428c:	0192      	lsls	r2, r2, #6
 800428e:	0011      	movs	r1, r2
 8004290:	0018      	movs	r0, r3
 8004292:	f000 fd87 	bl	8004da4 <HAL_GPIO_ReadPin>
 8004296:	0003      	movs	r3, r0
 8004298:	425a      	negs	r2, r3
 800429a:	4153      	adcs	r3, r2
 800429c:	b2db      	uxtb	r3, r3
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	2000000c 	.word	0x2000000c

080042ac <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80042b0:	2000      	movs	r0, #0
 80042b2:	f7fe fb37 	bl	8002924 <BSP_PB_Callback>
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <BUTTON_USER_GPIO_Init+0x78>)
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <BUTTON_USER_GPIO_Init+0x78>)
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	0309      	lsls	r1, r1, #12
 80042cc:	430a      	orrs	r2, r1
 80042ce:	615a      	str	r2, [r3, #20]
 80042d0:	4b18      	ldr	r3, [pc, #96]	; (8004334 <BUTTON_USER_GPIO_Init+0x78>)
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	031b      	lsls	r3, r3, #12
 80042d8:	4013      	ands	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042de:	240c      	movs	r4, #12
 80042e0:	193b      	adds	r3, r7, r4
 80042e2:	0018      	movs	r0, r3
 80042e4:	2314      	movs	r3, #20
 80042e6:	001a      	movs	r2, r3
 80042e8:	2100      	movs	r1, #0
 80042ea:	f006 f9a0 	bl	800a62e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <BUTTON_USER_GPIO_Init+0x78>)
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <BUTTON_USER_GPIO_Init+0x78>)
 80042f4:	2180      	movs	r1, #128	; 0x80
 80042f6:	0309      	lsls	r1, r1, #12
 80042f8:	430a      	orrs	r2, r1
 80042fa:	615a      	str	r2, [r3, #20]
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <BUTTON_USER_GPIO_Init+0x78>)
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	031b      	lsls	r3, r3, #12
 8004304:	4013      	ands	r3, r2
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800430a:	193b      	adds	r3, r7, r4
 800430c:	2280      	movs	r2, #128	; 0x80
 800430e:	0192      	lsls	r2, r2, #6
 8004310:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004312:	193b      	adds	r3, r7, r4
 8004314:	2284      	movs	r2, #132	; 0x84
 8004316:	0392      	lsls	r2, r2, #14
 8004318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	193b      	adds	r3, r7, r4
 800431c:	2200      	movs	r2, #0
 800431e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004320:	193b      	adds	r3, r7, r4
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <BUTTON_USER_GPIO_Init+0x7c>)
 8004324:	0019      	movs	r1, r3
 8004326:	0010      	movs	r0, r2
 8004328:	f000 faec 	bl	8004904 <HAL_GPIO_Init>

}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b009      	add	sp, #36	; 0x24
 8004332:	bd90      	pop	{r4, r7, pc}
 8004334:	40021000 	.word	0x40021000
 8004338:	48000800 	.word	0x48000800

0800433c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	0002      	movs	r2, r0
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800434c:	1dfb      	adds	r3, r7, #7
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d903      	bls.n	800435c <BSP_COM_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004354:	2302      	movs	r3, #2
 8004356:	425b      	negs	r3, r3
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	e027      	b.n	80043ac <BSP_COM_Init+0x70>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800435c:	1dfb      	adds	r3, r7, #7
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <BSP_COM_Init+0x7c>)
 8004366:	0089      	lsls	r1, r1, #2
 8004368:	58c8      	ldr	r0, [r1, r3]
 800436a:	4914      	ldr	r1, [pc, #80]	; (80043bc <BSP_COM_Init+0x80>)
 800436c:	0013      	movs	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	189b      	adds	r3, r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	5058      	str	r0, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	0013      	movs	r3, r2
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	189b      	adds	r3, r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <BSP_COM_Init+0x80>)
 8004384:	189b      	adds	r3, r3, r2
 8004386:	0018      	movs	r0, r3
 8004388:	f000 f870 	bl	800446c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800438c:	1dfb      	adds	r3, r7, #7
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	0013      	movs	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	189b      	adds	r3, r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <BSP_COM_Init+0x80>)
 800439a:	189b      	adds	r3, r3, r2
 800439c:	0018      	movs	r0, r3
 800439e:	f000 f80f 	bl	80043c0 <MX_USART2_UART_Init>
 80043a2:	1e03      	subs	r3, r0, #0
 80043a4:	d002      	beq.n	80043ac <BSP_COM_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80043a6:	2304      	movs	r3, #4
 80043a8:	425b      	negs	r3, r3
 80043aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80043ac:	68fb      	ldr	r3, [r7, #12]
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b004      	add	sp, #16
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	20000018 	.word	0x20000018
 80043bc:	2000028c 	.word	0x2000028c

080043c0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80043c8:	240f      	movs	r4, #15
 80043ca:	193b      	adds	r3, r7, r4
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]

  huart->Instance = USART2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a17      	ldr	r2, [pc, #92]	; (8004430 <MX_USART2_UART_Init+0x70>)
 80043d4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	22e1      	movs	r2, #225	; 0xe1
 80043da:	0252      	lsls	r2, r2, #9
 80043dc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	220c      	movs	r2, #12
 80043f4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0018      	movs	r0, r3
 8004412:	f001 ff31 	bl	8006278 <HAL_UART_Init>
 8004416:	1e03      	subs	r3, r0, #0
 8004418:	d002      	beq.n	8004420 <MX_USART2_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 800441a:	193b      	adds	r3, r7, r4
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004420:	230f      	movs	r3, #15
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	781b      	ldrb	r3, [r3, #0]
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b005      	add	sp, #20
 800442c:	bd90      	pop	{r4, r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	40004400 	.word	0x40004400

08004434 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <__io_putchar+0x30>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	001a      	movs	r2, r3
 8004442:	0013      	movs	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	189b      	adds	r3, r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4a07      	ldr	r2, [pc, #28]	; (8004468 <__io_putchar+0x34>)
 800444c:	1898      	adds	r0, r3, r2
 800444e:	23fa      	movs	r3, #250	; 0xfa
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	1d39      	adds	r1, r7, #4
 8004454:	2201      	movs	r2, #1
 8004456:	f001 ff6b 	bl	8006330 <HAL_UART_Transmit>
  return ch;
 800445a:	687b      	ldr	r3, [r7, #4]
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000314 	.word	0x20000314
 8004468:	2000028c 	.word	0x2000028c

0800446c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b08b      	sub	sp, #44	; 0x2c
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <USART2_MspInit+0xb4>)
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	4b29      	ldr	r3, [pc, #164]	; (8004520 <USART2_MspInit+0xb4>)
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	0289      	lsls	r1, r1, #10
 800447e:	430a      	orrs	r2, r1
 8004480:	61da      	str	r2, [r3, #28]
 8004482:	4b27      	ldr	r3, [pc, #156]	; (8004520 <USART2_MspInit+0xb4>)
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	029b      	lsls	r3, r3, #10
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004490:	4b23      	ldr	r3, [pc, #140]	; (8004520 <USART2_MspInit+0xb4>)
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	4b22      	ldr	r3, [pc, #136]	; (8004520 <USART2_MspInit+0xb4>)
 8004496:	2180      	movs	r1, #128	; 0x80
 8004498:	0289      	lsls	r1, r1, #10
 800449a:	430a      	orrs	r2, r1
 800449c:	615a      	str	r2, [r3, #20]
 800449e:	4b20      	ldr	r3, [pc, #128]	; (8004520 <USART2_MspInit+0xb4>)
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	029b      	lsls	r3, r3, #10
 80044a6:	4013      	ands	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80044ac:	2414      	movs	r4, #20
 80044ae:	193b      	adds	r3, r7, r4
 80044b0:	2204      	movs	r2, #4
 80044b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	193b      	adds	r3, r7, r4
 80044b6:	2202      	movs	r2, #2
 80044b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	2200      	movs	r2, #0
 80044be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	2200      	movs	r2, #0
 80044c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80044c6:	193b      	adds	r3, r7, r4
 80044c8:	2201      	movs	r2, #1
 80044ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80044cc:	193a      	adds	r2, r7, r4
 80044ce:	2390      	movs	r3, #144	; 0x90
 80044d0:	05db      	lsls	r3, r3, #23
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f000 fa15 	bl	8004904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80044da:	0021      	movs	r1, r4
 80044dc:	187b      	adds	r3, r7, r1
 80044de:	2208      	movs	r2, #8
 80044e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e2:	187b      	adds	r3, r7, r1
 80044e4:	2202      	movs	r2, #2
 80044e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	187b      	adds	r3, r7, r1
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	187b      	adds	r3, r7, r1
 80044f0:	2200      	movs	r2, #0
 80044f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80044f4:	187b      	adds	r3, r7, r1
 80044f6:	2201      	movs	r2, #1
 80044f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80044fa:	187a      	adds	r2, r7, r1
 80044fc:	2390      	movs	r3, #144	; 0x90
 80044fe:	05db      	lsls	r3, r3, #23
 8004500:	0011      	movs	r1, r2
 8004502:	0018      	movs	r0, r3
 8004504:	f000 f9fe 	bl	8004904 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004508:	2200      	movs	r2, #0
 800450a:	2100      	movs	r1, #0
 800450c:	201c      	movs	r0, #28
 800450e:	f000 f95f 	bl	80047d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004512:	201c      	movs	r0, #28
 8004514:	f000 f971 	bl	80047fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b00b      	add	sp, #44	; 0x2c
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	40021000 	.word	0x40021000

08004524 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <HAL_Init+0x24>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <HAL_Init+0x24>)
 800452e:	2110      	movs	r1, #16
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004534:	2000      	movs	r0, #0
 8004536:	f000 f809 	bl	800454c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800453a:	f7ff fb41 	bl	8003bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	40022000 	.word	0x40022000

0800454c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <HAL_InitTick+0x5c>)
 8004556:	681c      	ldr	r4, [r3, #0]
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <HAL_InitTick+0x60>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	0019      	movs	r1, r3
 800455e:	23fa      	movs	r3, #250	; 0xfa
 8004560:	0098      	lsls	r0, r3, #2
 8004562:	f7fb fddb 	bl	800011c <__udivsi3>
 8004566:	0003      	movs	r3, r0
 8004568:	0019      	movs	r1, r3
 800456a:	0020      	movs	r0, r4
 800456c:	f7fb fdd6 	bl	800011c <__udivsi3>
 8004570:	0003      	movs	r3, r0
 8004572:	0018      	movs	r0, r3
 8004574:	f000 f961 	bl	800483a <HAL_SYSTICK_Config>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e00f      	b.n	80045a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d80b      	bhi.n	800459e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	2301      	movs	r3, #1
 800458a:	425b      	negs	r3, r3
 800458c:	2200      	movs	r2, #0
 800458e:	0018      	movs	r0, r3
 8004590:	f000 f91e 	bl	80047d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_InitTick+0x64>)
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b003      	add	sp, #12
 80045a6:	bd90      	pop	{r4, r7, pc}
 80045a8:	20000004 	.word	0x20000004
 80045ac:	20000020 	.word	0x20000020
 80045b0:	2000001c 	.word	0x2000001c

080045b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_IncTick+0x1c>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	001a      	movs	r2, r3
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_IncTick+0x20>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	18d2      	adds	r2, r2, r3
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <HAL_IncTick+0x20>)
 80045c6:	601a      	str	r2, [r3, #0]
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	20000020 	.word	0x20000020
 80045d4:	20000318 	.word	0x20000318

080045d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  return uwTick;
 80045dc:	4b02      	ldr	r3, [pc, #8]	; (80045e8 <HAL_GetTick+0x10>)
 80045de:	681b      	ldr	r3, [r3, #0]
}
 80045e0:	0018      	movs	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	20000318 	.word	0x20000318

080045ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045f4:	f7ff fff0 	bl	80045d8 <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3301      	adds	r3, #1
 8004604:	d005      	beq.n	8004612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <HAL_Delay+0x44>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	001a      	movs	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	189b      	adds	r3, r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	f7ff ffe0 	bl	80045d8 <HAL_GetTick>
 8004618:	0002      	movs	r2, r0
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	429a      	cmp	r2, r3
 8004622:	d8f7      	bhi.n	8004614 <HAL_Delay+0x28>
  {
  }
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b004      	add	sp, #16
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	20000020 	.word	0x20000020

08004634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	0002      	movs	r2, r0
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004640:	1dfb      	adds	r3, r7, #7
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b7f      	cmp	r3, #127	; 0x7f
 8004646:	d809      	bhi.n	800465c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004648:	1dfb      	adds	r3, r7, #7
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	001a      	movs	r2, r3
 800464e:	231f      	movs	r3, #31
 8004650:	401a      	ands	r2, r3
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <__NVIC_EnableIRQ+0x30>)
 8004654:	2101      	movs	r1, #1
 8004656:	4091      	lsls	r1, r2
 8004658:	000a      	movs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
  }
}
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}
 8004664:	e000e100 	.word	0xe000e100

08004668 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	0002      	movs	r2, r0
 8004670:	1dfb      	adds	r3, r7, #7
 8004672:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b7f      	cmp	r3, #127	; 0x7f
 800467a:	d810      	bhi.n	800469e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467c:	1dfb      	adds	r3, r7, #7
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	001a      	movs	r2, r3
 8004682:	231f      	movs	r3, #31
 8004684:	4013      	ands	r3, r2
 8004686:	4908      	ldr	r1, [pc, #32]	; (80046a8 <__NVIC_DisableIRQ+0x40>)
 8004688:	2201      	movs	r2, #1
 800468a:	409a      	lsls	r2, r3
 800468c:	0013      	movs	r3, r2
 800468e:	2280      	movs	r2, #128	; 0x80
 8004690:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004692:	f3bf 8f4f 	dsb	sy
}
 8004696:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004698:	f3bf 8f6f 	isb	sy
}
 800469c:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	e000e100 	.word	0xe000e100

080046ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	0002      	movs	r2, r0
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	1dfb      	adds	r3, r7, #7
 80046b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80046ba:	1dfb      	adds	r3, r7, #7
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b7f      	cmp	r3, #127	; 0x7f
 80046c0:	d828      	bhi.n	8004714 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046c2:	4a2f      	ldr	r2, [pc, #188]	; (8004780 <__NVIC_SetPriority+0xd4>)
 80046c4:	1dfb      	adds	r3, r7, #7
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	33c0      	adds	r3, #192	; 0xc0
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	589b      	ldr	r3, [r3, r2]
 80046d2:	1dfa      	adds	r2, r7, #7
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	0011      	movs	r1, r2
 80046d8:	2203      	movs	r2, #3
 80046da:	400a      	ands	r2, r1
 80046dc:	00d2      	lsls	r2, r2, #3
 80046de:	21ff      	movs	r1, #255	; 0xff
 80046e0:	4091      	lsls	r1, r2
 80046e2:	000a      	movs	r2, r1
 80046e4:	43d2      	mvns	r2, r2
 80046e6:	401a      	ands	r2, r3
 80046e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	019b      	lsls	r3, r3, #6
 80046ee:	22ff      	movs	r2, #255	; 0xff
 80046f0:	401a      	ands	r2, r3
 80046f2:	1dfb      	adds	r3, r7, #7
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	0018      	movs	r0, r3
 80046f8:	2303      	movs	r3, #3
 80046fa:	4003      	ands	r3, r0
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004700:	481f      	ldr	r0, [pc, #124]	; (8004780 <__NVIC_SetPriority+0xd4>)
 8004702:	1dfb      	adds	r3, r7, #7
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b25b      	sxtb	r3, r3
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	430a      	orrs	r2, r1
 800470c:	33c0      	adds	r3, #192	; 0xc0
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004712:	e031      	b.n	8004778 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004714:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <__NVIC_SetPriority+0xd8>)
 8004716:	1dfb      	adds	r3, r7, #7
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	0019      	movs	r1, r3
 800471c:	230f      	movs	r3, #15
 800471e:	400b      	ands	r3, r1
 8004720:	3b08      	subs	r3, #8
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	3306      	adds	r3, #6
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	3304      	adds	r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	1dfa      	adds	r2, r7, #7
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	0011      	movs	r1, r2
 8004734:	2203      	movs	r2, #3
 8004736:	400a      	ands	r2, r1
 8004738:	00d2      	lsls	r2, r2, #3
 800473a:	21ff      	movs	r1, #255	; 0xff
 800473c:	4091      	lsls	r1, r2
 800473e:	000a      	movs	r2, r1
 8004740:	43d2      	mvns	r2, r2
 8004742:	401a      	ands	r2, r3
 8004744:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	019b      	lsls	r3, r3, #6
 800474a:	22ff      	movs	r2, #255	; 0xff
 800474c:	401a      	ands	r2, r3
 800474e:	1dfb      	adds	r3, r7, #7
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	0018      	movs	r0, r3
 8004754:	2303      	movs	r3, #3
 8004756:	4003      	ands	r3, r0
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800475c:	4809      	ldr	r0, [pc, #36]	; (8004784 <__NVIC_SetPriority+0xd8>)
 800475e:	1dfb      	adds	r3, r7, #7
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	001c      	movs	r4, r3
 8004764:	230f      	movs	r3, #15
 8004766:	4023      	ands	r3, r4
 8004768:	3b08      	subs	r3, #8
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	430a      	orrs	r2, r1
 800476e:	3306      	adds	r3, #6
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	18c3      	adds	r3, r0, r3
 8004774:	3304      	adds	r3, #4
 8004776:	601a      	str	r2, [r3, #0]
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b003      	add	sp, #12
 800477e:	bd90      	pop	{r4, r7, pc}
 8004780:	e000e100 	.word	0xe000e100
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	1e5a      	subs	r2, r3, #1
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	045b      	lsls	r3, r3, #17
 8004798:	429a      	cmp	r2, r3
 800479a:	d301      	bcc.n	80047a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800479c:	2301      	movs	r3, #1
 800479e:	e010      	b.n	80047c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <SysTick_Config+0x44>)
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	3a01      	subs	r2, #1
 80047a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047a8:	2301      	movs	r3, #1
 80047aa:	425b      	negs	r3, r3
 80047ac:	2103      	movs	r1, #3
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7ff ff7c 	bl	80046ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <SysTick_Config+0x44>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ba:	4b04      	ldr	r3, [pc, #16]	; (80047cc <SysTick_Config+0x44>)
 80047bc:	2207      	movs	r2, #7
 80047be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b002      	add	sp, #8
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	e000e010 	.word	0xe000e010

080047d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	210f      	movs	r1, #15
 80047dc:	187b      	adds	r3, r7, r1
 80047de:	1c02      	adds	r2, r0, #0
 80047e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	0011      	movs	r1, r2
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7ff ff5d 	bl	80046ac <__NVIC_SetPriority>
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b004      	add	sp, #16
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	0002      	movs	r2, r0
 8004802:	1dfb      	adds	r3, r7, #7
 8004804:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004806:	1dfb      	adds	r3, r7, #7
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	b25b      	sxtb	r3, r3
 800480c:	0018      	movs	r0, r3
 800480e:	f7ff ff11 	bl	8004634 <__NVIC_EnableIRQ>
}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b002      	add	sp, #8
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	0002      	movs	r2, r0
 8004822:	1dfb      	adds	r3, r7, #7
 8004824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004826:	1dfb      	adds	r3, r7, #7
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	b25b      	sxtb	r3, r3
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff ff1b 	bl	8004668 <__NVIC_DisableIRQ>
}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b002      	add	sp, #8
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f7ff ff9f 	bl	8004788 <SysTick_Config>
 800484a:	0003      	movs	r3, r0
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	b002      	add	sp, #8
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	200b      	movs	r0, #11
 8004860:	183b      	adds	r3, r7, r0
 8004862:	1c0a      	adds	r2, r1, #0
 8004864:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004866:	2317      	movs	r3, #23
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800486e:	183b      	adds	r3, r7, r0
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	605a      	str	r2, [r3, #4]
      break;
 800487c:	e004      	b.n	8004888 <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 800487e:	2317      	movs	r3, #23
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
      break;
 8004886:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8004888:	2317      	movs	r3, #23
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b006      	add	sp, #24
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e003      	b.n	80048b2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
  }
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	221f      	movs	r2, #31
 80048ca:	4013      	ands	r3, r2
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	0013      	movs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <HAL_EXTI_IRQHandler+0x44>)
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4013      	ands	r3, r2
 80048dc:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_EXTI_IRQHandler+0x44>)
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4798      	blx	r3
    }
  }
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b004      	add	sp, #16
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40010400 	.word	0x40010400

08004904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004912:	e155      	b.n	8004bc0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4091      	lsls	r1, r2
 800491e:	000a      	movs	r2, r1
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d100      	bne.n	800492c <HAL_GPIO_Init+0x28>
 800492a:	e146      	b.n	8004bba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2203      	movs	r2, #3
 8004932:	4013      	ands	r3, r2
 8004934:	2b01      	cmp	r3, #1
 8004936:	d005      	beq.n	8004944 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2203      	movs	r2, #3
 800493e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004940:	2b02      	cmp	r3, #2
 8004942:	d130      	bne.n	80049a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	409a      	lsls	r2, r3
 8004952:	0013      	movs	r3, r2
 8004954:	43da      	mvns	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	409a      	lsls	r2, r3
 8004966:	0013      	movs	r3, r2
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800497a:	2201      	movs	r2, #1
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	409a      	lsls	r2, r3
 8004980:	0013      	movs	r3, r2
 8004982:	43da      	mvns	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	2201      	movs	r2, #1
 8004992:	401a      	ands	r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	409a      	lsls	r2, r3
 8004998:	0013      	movs	r3, r2
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2203      	movs	r2, #3
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d017      	beq.n	80049e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	2203      	movs	r2, #3
 80049be:	409a      	lsls	r2, r3
 80049c0:	0013      	movs	r3, r2
 80049c2:	43da      	mvns	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	409a      	lsls	r2, r3
 80049d4:	0013      	movs	r3, r2
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2203      	movs	r2, #3
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d123      	bne.n	8004a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	08da      	lsrs	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3208      	adds	r2, #8
 80049f6:	0092      	lsls	r2, r2, #2
 80049f8:	58d3      	ldr	r3, [r2, r3]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2207      	movs	r2, #7
 8004a00:	4013      	ands	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	220f      	movs	r2, #15
 8004a06:	409a      	lsls	r2, r3
 8004a08:	0013      	movs	r3, r2
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2107      	movs	r1, #7
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	0013      	movs	r3, r2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	6939      	ldr	r1, [r7, #16]
 8004a34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	2203      	movs	r2, #3
 8004a42:	409a      	lsls	r2, r3
 8004a44:	0013      	movs	r3, r2
 8004a46:	43da      	mvns	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2203      	movs	r2, #3
 8004a54:	401a      	ands	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	0013      	movs	r3, r2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	23c0      	movs	r3, #192	; 0xc0
 8004a70:	029b      	lsls	r3, r3, #10
 8004a72:	4013      	ands	r3, r2
 8004a74:	d100      	bne.n	8004a78 <HAL_GPIO_Init+0x174>
 8004a76:	e0a0      	b.n	8004bba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a78:	4b57      	ldr	r3, [pc, #348]	; (8004bd8 <HAL_GPIO_Init+0x2d4>)
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	4b56      	ldr	r3, [pc, #344]	; (8004bd8 <HAL_GPIO_Init+0x2d4>)
 8004a7e:	2101      	movs	r1, #1
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]
 8004a84:	4b54      	ldr	r3, [pc, #336]	; (8004bd8 <HAL_GPIO_Init+0x2d4>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a90:	4a52      	ldr	r2, [pc, #328]	; (8004bdc <HAL_GPIO_Init+0x2d8>)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	589b      	ldr	r3, [r3, r2]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	0013      	movs	r3, r2
 8004aac:	43da      	mvns	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	2390      	movs	r3, #144	; 0x90
 8004ab8:	05db      	lsls	r3, r3, #23
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d019      	beq.n	8004af2 <HAL_GPIO_Init+0x1ee>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a47      	ldr	r2, [pc, #284]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <HAL_GPIO_Init+0x1ea>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a46      	ldr	r2, [pc, #280]	; (8004be4 <HAL_GPIO_Init+0x2e0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00d      	beq.n	8004aea <HAL_GPIO_Init+0x1e6>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a45      	ldr	r2, [pc, #276]	; (8004be8 <HAL_GPIO_Init+0x2e4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <HAL_GPIO_Init+0x1e2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a44      	ldr	r2, [pc, #272]	; (8004bec <HAL_GPIO_Init+0x2e8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_GPIO_Init+0x1de>
 8004ade:	2304      	movs	r3, #4
 8004ae0:	e008      	b.n	8004af4 <HAL_GPIO_Init+0x1f0>
 8004ae2:	2305      	movs	r3, #5
 8004ae4:	e006      	b.n	8004af4 <HAL_GPIO_Init+0x1f0>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e004      	b.n	8004af4 <HAL_GPIO_Init+0x1f0>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_Init+0x1f0>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_Init+0x1f0>
 8004af2:	2300      	movs	r3, #0
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	2103      	movs	r1, #3
 8004af8:	400a      	ands	r2, r1
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	4093      	lsls	r3, r2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b04:	4935      	ldr	r1, [pc, #212]	; (8004bdc <HAL_GPIO_Init+0x2d8>)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b12:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	035b      	lsls	r3, r3, #13
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b36:	4b2e      	ldr	r3, [pc, #184]	; (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004b3c:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	43da      	mvns	r2, r3
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	039b      	lsls	r3, r3, #14
 8004b54:	4013      	ands	r3, r2
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004b60:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004b66:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004b90:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	43da      	mvns	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	025b      	lsls	r3, r3, #9
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	40da      	lsrs	r2, r3
 8004bc8:	1e13      	subs	r3, r2, #0
 8004bca:	d000      	beq.n	8004bce <HAL_GPIO_Init+0x2ca>
 8004bcc:	e6a2      	b.n	8004914 <HAL_GPIO_Init+0x10>
  } 
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b006      	add	sp, #24
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	48000400 	.word	0x48000400
 8004be4:	48000800 	.word	0x48000800
 8004be8:	48000c00 	.word	0x48000c00
 8004bec:	48001000 	.word	0x48001000
 8004bf0:	40010400 	.word	0x40010400

08004bf4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004c02:	e0b7      	b.n	8004d74 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c04:	2201      	movs	r2, #1
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d100      	bne.n	8004c18 <HAL_GPIO_DeInit+0x24>
 8004c16:	e0aa      	b.n	8004d6e <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004c18:	4a5c      	ldr	r2, [pc, #368]	; (8004d8c <HAL_GPIO_DeInit+0x198>)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	3302      	adds	r3, #2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	589b      	ldr	r3, [r3, r2]
 8004c24:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	220f      	movs	r2, #15
 8004c30:	409a      	lsls	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4013      	ands	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	2390      	movs	r3, #144	; 0x90
 8004c3c:	05db      	lsls	r3, r3, #23
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d019      	beq.n	8004c76 <HAL_GPIO_DeInit+0x82>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_GPIO_DeInit+0x19c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_GPIO_DeInit+0x7e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <HAL_GPIO_DeInit+0x1a0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00d      	beq.n	8004c6e <HAL_GPIO_DeInit+0x7a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a50      	ldr	r2, [pc, #320]	; (8004d98 <HAL_GPIO_DeInit+0x1a4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <HAL_GPIO_DeInit+0x76>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4f      	ldr	r2, [pc, #316]	; (8004d9c <HAL_GPIO_DeInit+0x1a8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_GPIO_DeInit+0x72>
 8004c62:	2304      	movs	r3, #4
 8004c64:	e008      	b.n	8004c78 <HAL_GPIO_DeInit+0x84>
 8004c66:	2305      	movs	r3, #5
 8004c68:	e006      	b.n	8004c78 <HAL_GPIO_DeInit+0x84>
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e004      	b.n	8004c78 <HAL_GPIO_DeInit+0x84>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e002      	b.n	8004c78 <HAL_GPIO_DeInit+0x84>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <HAL_GPIO_DeInit+0x84>
 8004c76:	2300      	movs	r3, #0
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	0092      	lsls	r2, r2, #2
 8004c80:	4093      	lsls	r3, r2
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d132      	bne.n	8004cee <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004c88:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <HAL_GPIO_DeInit+0x1ac>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	43d9      	mvns	r1, r3
 8004c90:	4b43      	ldr	r3, [pc, #268]	; (8004da0 <HAL_GPIO_DeInit+0x1ac>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004c96:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <HAL_GPIO_DeInit+0x1ac>)
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	43d9      	mvns	r1, r3
 8004c9e:	4b40      	ldr	r3, [pc, #256]	; (8004da0 <HAL_GPIO_DeInit+0x1ac>)
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ca4:	4b3e      	ldr	r3, [pc, #248]	; (8004da0 <HAL_GPIO_DeInit+0x1ac>)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43d9      	mvns	r1, r3
 8004cac:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <HAL_GPIO_DeInit+0x1ac>)
 8004cae:	400a      	ands	r2, r1
 8004cb0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <HAL_GPIO_DeInit+0x1ac>)
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	43d9      	mvns	r1, r3
 8004cba:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <HAL_GPIO_DeInit+0x1ac>)
 8004cbc:	400a      	ands	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	220f      	movs	r2, #15
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	0013      	movs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004cd0:	4a2e      	ldr	r2, [pc, #184]	; (8004d8c <HAL_GPIO_DeInit+0x198>)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	589a      	ldr	r2, [r3, r2]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	43d9      	mvns	r1, r3
 8004ce0:	482a      	ldr	r0, [pc, #168]	; (8004d8c <HAL_GPIO_DeInit+0x198>)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	400a      	ands	r2, r1
 8004ce8:	3302      	adds	r3, #2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	0052      	lsls	r2, r2, #1
 8004cf6:	2103      	movs	r1, #3
 8004cf8:	4091      	lsls	r1, r2
 8004cfa:	000a      	movs	r2, r1
 8004cfc:	43d2      	mvns	r2, r2
 8004cfe:	401a      	ands	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	08da      	lsrs	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3208      	adds	r2, #8
 8004d0c:	0092      	lsls	r2, r2, #2
 8004d0e:	58d3      	ldr	r3, [r2, r3]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	2107      	movs	r1, #7
 8004d14:	400a      	ands	r2, r1
 8004d16:	0092      	lsls	r2, r2, #2
 8004d18:	210f      	movs	r1, #15
 8004d1a:	4091      	lsls	r1, r2
 8004d1c:	000a      	movs	r2, r1
 8004d1e:	43d1      	mvns	r1, r2
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	08d2      	lsrs	r2, r2, #3
 8004d24:	4019      	ands	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3208      	adds	r2, #8
 8004d2a:	0092      	lsls	r2, r2, #2
 8004d2c:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	0052      	lsls	r2, r2, #1
 8004d36:	2103      	movs	r1, #3
 8004d38:	4091      	lsls	r1, r2
 8004d3a:	000a      	movs	r2, r1
 8004d3c:	43d2      	mvns	r2, r2
 8004d3e:	401a      	ands	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4091      	lsls	r1, r2
 8004d4e:	000a      	movs	r2, r1
 8004d50:	43d2      	mvns	r2, r2
 8004d52:	401a      	ands	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	0052      	lsls	r2, r2, #1
 8004d60:	2103      	movs	r1, #3
 8004d62:	4091      	lsls	r1, r2
 8004d64:	000a      	movs	r2, r1
 8004d66:	43d2      	mvns	r2, r2
 8004d68:	401a      	ands	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	609a      	str	r2, [r3, #8]

    }

    position++;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3301      	adds	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	40da      	lsrs	r2, r3
 8004d7a:	1e13      	subs	r3, r2, #0
 8004d7c:	d000      	beq.n	8004d80 <HAL_GPIO_DeInit+0x18c>
 8004d7e:	e741      	b.n	8004c04 <HAL_GPIO_DeInit+0x10>
  }
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b006      	add	sp, #24
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	48000400 	.word	0x48000400
 8004d94:	48000800 	.word	0x48000800
 8004d98:	48000c00 	.word	0x48000c00
 8004d9c:	48001000 	.word	0x48001000
 8004da0:	40010400 	.word	0x40010400

08004da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	000a      	movs	r2, r1
 8004dae:	1cbb      	adds	r3, r7, #2
 8004db0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	1cba      	adds	r2, r7, #2
 8004db8:	8812      	ldrh	r2, [r2, #0]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004dbe:	230f      	movs	r3, #15
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e003      	b.n	8004dd0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dc8:	230f      	movs	r3, #15
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	781b      	ldrb	r3, [r3, #0]
  }
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b004      	add	sp, #16
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	0008      	movs	r0, r1
 8004de8:	0011      	movs	r1, r2
 8004dea:	1cbb      	adds	r3, r7, #2
 8004dec:	1c02      	adds	r2, r0, #0
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	1c7b      	adds	r3, r7, #1
 8004df2:	1c0a      	adds	r2, r1, #0
 8004df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004df6:	1c7b      	adds	r3, r7, #1
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dfe:	1cbb      	adds	r3, r7, #2
 8004e00:	881a      	ldrh	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e06:	e003      	b.n	8004e10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e08:	1cbb      	adds	r3, r7, #2
 8004e0a:	881a      	ldrh	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b002      	add	sp, #8
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	000a      	movs	r2, r1
 8004e22:	1cbb      	adds	r3, r7, #2
 8004e24:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e2c:	1cbb      	adds	r3, r7, #2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4013      	ands	r3, r2
 8004e34:	041a      	lsls	r2, r3, #16
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	1cb9      	adds	r1, r7, #2
 8004e3c:	8809      	ldrh	r1, [r1, #0]
 8004e3e:	400b      	ands	r3, r1
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	619a      	str	r2, [r3, #24]
}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b004      	add	sp, #16
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f000 fb76 	bl	8005550 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d100      	bne.n	8004e70 <HAL_RCC_OscConfig+0x20>
 8004e6e:	e08e      	b.n	8004f8e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e70:	4bc5      	ldr	r3, [pc, #788]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	220c      	movs	r2, #12
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d00e      	beq.n	8004e9a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e7c:	4bc2      	ldr	r3, [pc, #776]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	220c      	movs	r2, #12
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d117      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x68>
 8004e88:	4bbf      	ldr	r3, [pc, #764]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	23c0      	movs	r3, #192	; 0xc0
 8004e8e:	025b      	lsls	r3, r3, #9
 8004e90:	401a      	ands	r2, r3
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	025b      	lsls	r3, r3, #9
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d10e      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9a:	4bbb      	ldr	r3, [pc, #748]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d100      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x58>
 8004ea6:	e071      	b.n	8004f8c <HAL_RCC_OscConfig+0x13c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d000      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x62>
 8004eb0:	e06c      	b.n	8004f8c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f000 fb4c 	bl	8005550 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d107      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x80>
 8004ec0:	4bb1      	ldr	r3, [pc, #708]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4bb0      	ldr	r3, [pc, #704]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	0249      	lsls	r1, r1, #9
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e02f      	b.n	8004f30 <HAL_RCC_OscConfig+0xe0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10c      	bne.n	8004ef2 <HAL_RCC_OscConfig+0xa2>
 8004ed8:	4bab      	ldr	r3, [pc, #684]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	4baa      	ldr	r3, [pc, #680]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004ede:	49ab      	ldr	r1, [pc, #684]	; (800518c <HAL_RCC_OscConfig+0x33c>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	4ba8      	ldr	r3, [pc, #672]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4ba7      	ldr	r3, [pc, #668]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004eea:	49a9      	ldr	r1, [pc, #676]	; (8005190 <HAL_RCC_OscConfig+0x340>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e01e      	b.n	8004f30 <HAL_RCC_OscConfig+0xe0>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10e      	bne.n	8004f18 <HAL_RCC_OscConfig+0xc8>
 8004efa:	4ba3      	ldr	r3, [pc, #652]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4ba2      	ldr	r3, [pc, #648]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	02c9      	lsls	r1, r1, #11
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	4b9f      	ldr	r3, [pc, #636]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4b9e      	ldr	r3, [pc, #632]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	0249      	lsls	r1, r1, #9
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0xe0>
 8004f18:	4b9b      	ldr	r3, [pc, #620]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4b9a      	ldr	r3, [pc, #616]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f1e:	499b      	ldr	r1, [pc, #620]	; (800518c <HAL_RCC_OscConfig+0x33c>)
 8004f20:	400a      	ands	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	4b98      	ldr	r3, [pc, #608]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b97      	ldr	r3, [pc, #604]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f2a:	4999      	ldr	r1, [pc, #612]	; (8005190 <HAL_RCC_OscConfig+0x340>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d014      	beq.n	8004f62 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7ff fb4e 	bl	80045d8 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f42:	f7ff fb49 	bl	80045d8 <HAL_GetTick>
 8004f46:	0002      	movs	r2, r0
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b64      	cmp	r3, #100	; 0x64
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e2fd      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f54:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	029b      	lsls	r3, r3, #10
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0xf2>
 8004f60:	e015      	b.n	8004f8e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f62:	f7ff fb39 	bl	80045d8 <HAL_GetTick>
 8004f66:	0003      	movs	r3, r0
 8004f68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7ff fb34 	bl	80045d8 <HAL_GetTick>
 8004f70:	0002      	movs	r2, r0
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	; 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e2e8      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	4b82      	ldr	r3, [pc, #520]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	4013      	ands	r3, r2
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x11c>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2202      	movs	r2, #2
 8004f94:	4013      	ands	r3, r2
 8004f96:	d100      	bne.n	8004f9a <HAL_RCC_OscConfig+0x14a>
 8004f98:	e06c      	b.n	8005074 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f9a:	4b7b      	ldr	r3, [pc, #492]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	220c      	movs	r2, #12
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004fa4:	4b78      	ldr	r3, [pc, #480]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	220c      	movs	r2, #12
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d11f      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x1a0>
 8004fb0:	4b75      	ldr	r3, [pc, #468]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	23c0      	movs	r3, #192	; 0xc0
 8004fb6:	025b      	lsls	r3, r3, #9
 8004fb8:	401a      	ands	r2, r3
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d116      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	4b71      	ldr	r3, [pc, #452]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x188>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e2bb      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd8:	4b6b      	ldr	r3, [pc, #428]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	22f8      	movs	r2, #248	; 0xf8
 8004fde:	4393      	bics	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00da      	lsls	r2, r3, #3
 8004fe8:	4b67      	ldr	r3, [pc, #412]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004fea:	430a      	orrs	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fee:	e041      	b.n	8005074 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d024      	beq.n	8005042 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff8:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b62      	ldr	r3, [pc, #392]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8004ffe:	2101      	movs	r1, #1
 8005000:	430a      	orrs	r2, r1
 8005002:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7ff fae8 	bl	80045d8 <HAL_GetTick>
 8005008:	0003      	movs	r3, r0
 800500a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800500e:	f7ff fae3 	bl	80045d8 <HAL_GetTick>
 8005012:	0002      	movs	r2, r0
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e297      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	4b59      	ldr	r3, [pc, #356]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2202      	movs	r2, #2
 8005026:	4013      	ands	r3, r2
 8005028:	d0f1      	beq.n	800500e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502a:	4b57      	ldr	r3, [pc, #348]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	22f8      	movs	r2, #248	; 0xf8
 8005030:	4393      	bics	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	00da      	lsls	r2, r3, #3
 800503a:	4b53      	ldr	r3, [pc, #332]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e018      	b.n	8005074 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b51      	ldr	r3, [pc, #324]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b50      	ldr	r3, [pc, #320]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005048:	2101      	movs	r1, #1
 800504a:	438a      	bics	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504e:	f7ff fac3 	bl	80045d8 <HAL_GetTick>
 8005052:	0003      	movs	r3, r0
 8005054:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005058:	f7ff fabe 	bl	80045d8 <HAL_GetTick>
 800505c:	0002      	movs	r2, r0
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e272      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506a:	4b47      	ldr	r3, [pc, #284]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2202      	movs	r2, #2
 8005070:	4013      	ands	r3, r2
 8005072:	d1f1      	bne.n	8005058 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2208      	movs	r2, #8
 800507a:	4013      	ands	r3, r2
 800507c:	d036      	beq.n	80050ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d019      	beq.n	80050ba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005086:	4b40      	ldr	r3, [pc, #256]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508a:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800508c:	2101      	movs	r1, #1
 800508e:	430a      	orrs	r2, r1
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005092:	f7ff faa1 	bl	80045d8 <HAL_GetTick>
 8005096:	0003      	movs	r3, r0
 8005098:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800509c:	f7ff fa9c 	bl	80045d8 <HAL_GetTick>
 80050a0:	0002      	movs	r2, r0
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e250      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ae:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2202      	movs	r2, #2
 80050b4:	4013      	ands	r3, r2
 80050b6:	d0f1      	beq.n	800509c <HAL_RCC_OscConfig+0x24c>
 80050b8:	e018      	b.n	80050ec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ba:	4b33      	ldr	r3, [pc, #204]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 80050bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050be:	4b32      	ldr	r3, [pc, #200]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 80050c0:	2101      	movs	r1, #1
 80050c2:	438a      	bics	r2, r1
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c6:	f7ff fa87 	bl	80045d8 <HAL_GetTick>
 80050ca:	0003      	movs	r3, r0
 80050cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d0:	f7ff fa82 	bl	80045d8 <HAL_GetTick>
 80050d4:	0002      	movs	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e236      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e2:	4b29      	ldr	r3, [pc, #164]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	2202      	movs	r2, #2
 80050e8:	4013      	ands	r3, r2
 80050ea:	d1f1      	bne.n	80050d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2204      	movs	r2, #4
 80050f2:	4013      	ands	r3, r2
 80050f4:	d100      	bne.n	80050f8 <HAL_RCC_OscConfig+0x2a8>
 80050f6:	e0b5      	b.n	8005264 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f8:	201f      	movs	r0, #31
 80050fa:	183b      	adds	r3, r7, r0
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005100:	4b21      	ldr	r3, [pc, #132]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	055b      	lsls	r3, r3, #21
 8005108:	4013      	ands	r3, r2
 800510a:	d110      	bne.n	800512e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510c:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005112:	2180      	movs	r1, #128	; 0x80
 8005114:	0549      	lsls	r1, r1, #21
 8005116:	430a      	orrs	r2, r1
 8005118:	61da      	str	r2, [r3, #28]
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	055b      	lsls	r3, r3, #21
 8005122:	4013      	ands	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005128:	183b      	adds	r3, r7, r0
 800512a:	2201      	movs	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512e:	4b19      	ldr	r3, [pc, #100]	; (8005194 <HAL_RCC_OscConfig+0x344>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	4013      	ands	r3, r2
 8005138:	d11a      	bne.n	8005170 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513a:	4b16      	ldr	r3, [pc, #88]	; (8005194 <HAL_RCC_OscConfig+0x344>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b15      	ldr	r3, [pc, #84]	; (8005194 <HAL_RCC_OscConfig+0x344>)
 8005140:	2180      	movs	r1, #128	; 0x80
 8005142:	0049      	lsls	r1, r1, #1
 8005144:	430a      	orrs	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005148:	f7ff fa46 	bl	80045d8 <HAL_GetTick>
 800514c:	0003      	movs	r3, r0
 800514e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005152:	f7ff fa41 	bl	80045d8 <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b64      	cmp	r3, #100	; 0x64
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e1f5      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_RCC_OscConfig+0x344>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	4013      	ands	r3, r2
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10f      	bne.n	8005198 <HAL_RCC_OscConfig+0x348>
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800517a:	6a1a      	ldr	r2, [r3, #32]
 800517c:	4b02      	ldr	r3, [pc, #8]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800517e:	2101      	movs	r1, #1
 8005180:	430a      	orrs	r2, r1
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	e036      	b.n	80051f4 <HAL_RCC_OscConfig+0x3a4>
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	40021000 	.word	0x40021000
 800518c:	fffeffff 	.word	0xfffeffff
 8005190:	fffbffff 	.word	0xfffbffff
 8005194:	40007000 	.word	0x40007000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x36a>
 80051a0:	4bca      	ldr	r3, [pc, #808]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	4bc9      	ldr	r3, [pc, #804]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051a6:	2101      	movs	r1, #1
 80051a8:	438a      	bics	r2, r1
 80051aa:	621a      	str	r2, [r3, #32]
 80051ac:	4bc7      	ldr	r3, [pc, #796]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	4bc6      	ldr	r3, [pc, #792]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051b2:	2104      	movs	r1, #4
 80051b4:	438a      	bics	r2, r1
 80051b6:	621a      	str	r2, [r3, #32]
 80051b8:	e01c      	b.n	80051f4 <HAL_RCC_OscConfig+0x3a4>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d10c      	bne.n	80051dc <HAL_RCC_OscConfig+0x38c>
 80051c2:	4bc2      	ldr	r3, [pc, #776]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051c4:	6a1a      	ldr	r2, [r3, #32]
 80051c6:	4bc1      	ldr	r3, [pc, #772]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051c8:	2104      	movs	r1, #4
 80051ca:	430a      	orrs	r2, r1
 80051cc:	621a      	str	r2, [r3, #32]
 80051ce:	4bbf      	ldr	r3, [pc, #764]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	4bbe      	ldr	r3, [pc, #760]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051d4:	2101      	movs	r1, #1
 80051d6:	430a      	orrs	r2, r1
 80051d8:	621a      	str	r2, [r3, #32]
 80051da:	e00b      	b.n	80051f4 <HAL_RCC_OscConfig+0x3a4>
 80051dc:	4bbb      	ldr	r3, [pc, #748]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	4bba      	ldr	r3, [pc, #744]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051e2:	2101      	movs	r1, #1
 80051e4:	438a      	bics	r2, r1
 80051e6:	621a      	str	r2, [r3, #32]
 80051e8:	4bb8      	ldr	r3, [pc, #736]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051ea:	6a1a      	ldr	r2, [r3, #32]
 80051ec:	4bb7      	ldr	r3, [pc, #732]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80051ee:	2104      	movs	r1, #4
 80051f0:	438a      	bics	r2, r1
 80051f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d014      	beq.n	8005226 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fc:	f7ff f9ec 	bl	80045d8 <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005204:	e009      	b.n	800521a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7ff f9e7 	bl	80045d8 <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	4aaf      	ldr	r2, [pc, #700]	; (80054d0 <HAL_RCC_OscConfig+0x680>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e19a      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521a:	4bac      	ldr	r3, [pc, #688]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	2202      	movs	r2, #2
 8005220:	4013      	ands	r3, r2
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x3b6>
 8005224:	e013      	b.n	800524e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005226:	f7ff f9d7 	bl	80045d8 <HAL_GetTick>
 800522a:	0003      	movs	r3, r0
 800522c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522e:	e009      	b.n	8005244 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7ff f9d2 	bl	80045d8 <HAL_GetTick>
 8005234:	0002      	movs	r2, r0
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	4aa5      	ldr	r2, [pc, #660]	; (80054d0 <HAL_RCC_OscConfig+0x680>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e185      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005244:	4ba1      	ldr	r3, [pc, #644]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	2202      	movs	r2, #2
 800524a:	4013      	ands	r3, r2
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800524e:	231f      	movs	r3, #31
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d105      	bne.n	8005264 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005258:	4b9c      	ldr	r3, [pc, #624]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	4b9b      	ldr	r3, [pc, #620]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800525e:	499d      	ldr	r1, [pc, #628]	; (80054d4 <HAL_RCC_OscConfig+0x684>)
 8005260:	400a      	ands	r2, r1
 8005262:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2210      	movs	r2, #16
 800526a:	4013      	ands	r3, r2
 800526c:	d063      	beq.n	8005336 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d12a      	bne.n	80052cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005276:	4b95      	ldr	r3, [pc, #596]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527a:	4b94      	ldr	r3, [pc, #592]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800527c:	2104      	movs	r1, #4
 800527e:	430a      	orrs	r2, r1
 8005280:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005282:	4b92      	ldr	r3, [pc, #584]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005286:	4b91      	ldr	r3, [pc, #580]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005288:	2101      	movs	r1, #1
 800528a:	430a      	orrs	r2, r1
 800528c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528e:	f7ff f9a3 	bl	80045d8 <HAL_GetTick>
 8005292:	0003      	movs	r3, r0
 8005294:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005298:	f7ff f99e 	bl	80045d8 <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e152      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80052aa:	4b88      	ldr	r3, [pc, #544]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ae:	2202      	movs	r2, #2
 80052b0:	4013      	ands	r3, r2
 80052b2:	d0f1      	beq.n	8005298 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052b4:	4b85      	ldr	r3, [pc, #532]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	22f8      	movs	r2, #248	; 0xf8
 80052ba:	4393      	bics	r3, r2
 80052bc:	0019      	movs	r1, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	00da      	lsls	r2, r3, #3
 80052c4:	4b81      	ldr	r3, [pc, #516]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052c6:	430a      	orrs	r2, r1
 80052c8:	635a      	str	r2, [r3, #52]	; 0x34
 80052ca:	e034      	b.n	8005336 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	3305      	adds	r3, #5
 80052d2:	d111      	bne.n	80052f8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80052d4:	4b7d      	ldr	r3, [pc, #500]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d8:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052da:	2104      	movs	r1, #4
 80052dc:	438a      	bics	r2, r1
 80052de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052e0:	4b7a      	ldr	r3, [pc, #488]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e4:	22f8      	movs	r2, #248	; 0xf8
 80052e6:	4393      	bics	r3, r2
 80052e8:	0019      	movs	r1, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	00da      	lsls	r2, r3, #3
 80052f0:	4b76      	ldr	r3, [pc, #472]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052f2:	430a      	orrs	r2, r1
 80052f4:	635a      	str	r2, [r3, #52]	; 0x34
 80052f6:	e01e      	b.n	8005336 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80052f8:	4b74      	ldr	r3, [pc, #464]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fc:	4b73      	ldr	r3, [pc, #460]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80052fe:	2104      	movs	r1, #4
 8005300:	430a      	orrs	r2, r1
 8005302:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005304:	4b71      	ldr	r3, [pc, #452]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005308:	4b70      	ldr	r3, [pc, #448]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800530a:	2101      	movs	r1, #1
 800530c:	438a      	bics	r2, r1
 800530e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005310:	f7ff f962 	bl	80045d8 <HAL_GetTick>
 8005314:	0003      	movs	r3, r0
 8005316:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800531a:	f7ff f95d 	bl	80045d8 <HAL_GetTick>
 800531e:	0002      	movs	r2, r0
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e111      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800532c:	4b67      	ldr	r3, [pc, #412]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	2202      	movs	r2, #2
 8005332:	4013      	ands	r3, r2
 8005334:	d1f1      	bne.n	800531a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2220      	movs	r2, #32
 800533c:	4013      	ands	r3, r2
 800533e:	d05c      	beq.n	80053fa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005340:	4b62      	ldr	r3, [pc, #392]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	220c      	movs	r2, #12
 8005346:	4013      	ands	r3, r2
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d00e      	beq.n	800536a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800534c:	4b5f      	ldr	r3, [pc, #380]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	220c      	movs	r2, #12
 8005352:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005354:	2b08      	cmp	r3, #8
 8005356:	d114      	bne.n	8005382 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005358:	4b5c      	ldr	r3, [pc, #368]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	23c0      	movs	r3, #192	; 0xc0
 800535e:	025b      	lsls	r3, r3, #9
 8005360:	401a      	ands	r2, r3
 8005362:	23c0      	movs	r3, #192	; 0xc0
 8005364:	025b      	lsls	r3, r3, #9
 8005366:	429a      	cmp	r2, r3
 8005368:	d10b      	bne.n	8005382 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800536a:	4b58      	ldr	r3, [pc, #352]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800536c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	4013      	ands	r3, r2
 8005374:	d040      	beq.n	80053f8 <HAL_RCC_OscConfig+0x5a8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d03c      	beq.n	80053f8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e0e6      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01b      	beq.n	80053c2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800538a:	4b50      	ldr	r3, [pc, #320]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800538c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538e:	4b4f      	ldr	r3, [pc, #316]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	0249      	lsls	r1, r1, #9
 8005394:	430a      	orrs	r2, r1
 8005396:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005398:	f7ff f91e 	bl	80045d8 <HAL_GetTick>
 800539c:	0003      	movs	r3, r0
 800539e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a2:	f7ff f919 	bl	80045d8 <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0cd      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80053b4:	4b45      	ldr	r3, [pc, #276]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80053b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	4013      	ands	r3, r2
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x552>
 80053c0:	e01b      	b.n	80053fa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80053c2:	4b42      	ldr	r3, [pc, #264]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80053c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c6:	4b41      	ldr	r3, [pc, #260]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80053c8:	4943      	ldr	r1, [pc, #268]	; (80054d8 <HAL_RCC_OscConfig+0x688>)
 80053ca:	400a      	ands	r2, r1
 80053cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7ff f903 	bl	80045d8 <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d8:	f7ff f8fe 	bl	80045d8 <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e0b2      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80053ea:	4b38      	ldr	r3, [pc, #224]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80053ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	029b      	lsls	r3, r3, #10
 80053f2:	4013      	ands	r3, r2
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x588>
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80053f8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d100      	bne.n	8005404 <HAL_RCC_OscConfig+0x5b4>
 8005402:	e0a4      	b.n	800554e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005404:	4b31      	ldr	r3, [pc, #196]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	220c      	movs	r2, #12
 800540a:	4013      	ands	r3, r2
 800540c:	2b08      	cmp	r3, #8
 800540e:	d100      	bne.n	8005412 <HAL_RCC_OscConfig+0x5c2>
 8005410:	e078      	b.n	8005504 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b02      	cmp	r3, #2
 8005418:	d14c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541a:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005420:	492e      	ldr	r1, [pc, #184]	; (80054dc <HAL_RCC_OscConfig+0x68c>)
 8005422:	400a      	ands	r2, r1
 8005424:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7ff f8d7 	bl	80045d8 <HAL_GetTick>
 800542a:	0003      	movs	r3, r0
 800542c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005430:	f7ff f8d2 	bl	80045d8 <HAL_GetTick>
 8005434:	0002      	movs	r2, r0
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e086      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	049b      	lsls	r3, r3, #18
 800544a:	4013      	ands	r3, r2
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800544e:	4b1f      	ldr	r3, [pc, #124]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	220f      	movs	r2, #15
 8005454:	4393      	bics	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800545e:	430a      	orrs	r2, r1
 8005460:	62da      	str	r2, [r3, #44]	; 0x2c
 8005462:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <HAL_RCC_OscConfig+0x690>)
 8005468:	4013      	ands	r3, r2
 800546a:	0019      	movs	r1, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	431a      	orrs	r2, r3
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800547c:	4b13      	ldr	r3, [pc, #76]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 8005482:	2180      	movs	r1, #128	; 0x80
 8005484:	0449      	lsls	r1, r1, #17
 8005486:	430a      	orrs	r2, r1
 8005488:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548a:	f7ff f8a5 	bl	80045d8 <HAL_GetTick>
 800548e:	0003      	movs	r3, r0
 8005490:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005494:	f7ff f8a0 	bl	80045d8 <HAL_GetTick>
 8005498:	0002      	movs	r2, r0
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e054      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	049b      	lsls	r3, r3, #18
 80054ae:	4013      	ands	r3, r2
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x644>
 80054b2:	e04c      	b.n	800554e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b04      	ldr	r3, [pc, #16]	; (80054cc <HAL_RCC_OscConfig+0x67c>)
 80054ba:	4908      	ldr	r1, [pc, #32]	; (80054dc <HAL_RCC_OscConfig+0x68c>)
 80054bc:	400a      	ands	r2, r1
 80054be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7ff f88a 	bl	80045d8 <HAL_GetTick>
 80054c4:	0003      	movs	r3, r0
 80054c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054c8:	e015      	b.n	80054f6 <HAL_RCC_OscConfig+0x6a6>
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	40021000 	.word	0x40021000
 80054d0:	00001388 	.word	0x00001388
 80054d4:	efffffff 	.word	0xefffffff
 80054d8:	fffeffff 	.word	0xfffeffff
 80054dc:	feffffff 	.word	0xfeffffff
 80054e0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e4:	f7ff f878 	bl	80045d8 <HAL_GetTick>
 80054e8:	0002      	movs	r2, r0
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e02c      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_RCC_OscConfig+0x708>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	049b      	lsls	r3, r3, #18
 80054fe:	4013      	ands	r3, r2
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x694>
 8005502:	e024      	b.n	800554e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e01f      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <HAL_RCC_OscConfig+0x708>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <HAL_RCC_OscConfig+0x708>)
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	23c0      	movs	r3, #192	; 0xc0
 8005520:	025b      	lsls	r3, r3, #9
 8005522:	401a      	ands	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	429a      	cmp	r2, r3
 800552a:	d10e      	bne.n	800554a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	220f      	movs	r2, #15
 8005530:	401a      	ands	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d107      	bne.n	800554a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	23f0      	movs	r3, #240	; 0xf0
 800553e:	039b      	lsls	r3, r3, #14
 8005540:	401a      	ands	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d001      	beq.n	800554e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	0018      	movs	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	b008      	add	sp, #32
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40021000 	.word	0x40021000

0800555c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0bf      	b.n	80056f0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005570:	4b61      	ldr	r3, [pc, #388]	; (80056f8 <HAL_RCC_ClockConfig+0x19c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2201      	movs	r2, #1
 8005576:	4013      	ands	r3, r2
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d911      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b5e      	ldr	r3, [pc, #376]	; (80056f8 <HAL_RCC_ClockConfig+0x19c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	4393      	bics	r3, r2
 8005586:	0019      	movs	r1, r3
 8005588:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <HAL_RCC_ClockConfig+0x19c>)
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005590:	4b59      	ldr	r3, [pc, #356]	; (80056f8 <HAL_RCC_ClockConfig+0x19c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	4013      	ands	r3, r2
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d001      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e0a6      	b.n	80056f0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2202      	movs	r2, #2
 80055a8:	4013      	ands	r3, r2
 80055aa:	d015      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2204      	movs	r2, #4
 80055b2:	4013      	ands	r3, r2
 80055b4:	d006      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80055b6:	4b51      	ldr	r3, [pc, #324]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	4b50      	ldr	r3, [pc, #320]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 80055bc:	21e0      	movs	r1, #224	; 0xe0
 80055be:	00c9      	lsls	r1, r1, #3
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c4:	4b4d      	ldr	r3, [pc, #308]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	22f0      	movs	r2, #240	; 0xf0
 80055ca:	4393      	bics	r3, r2
 80055cc:	0019      	movs	r1, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	4b4a      	ldr	r3, [pc, #296]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2201      	movs	r2, #1
 80055de:	4013      	ands	r3, r2
 80055e0:	d04c      	beq.n	800567c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d107      	bne.n	80055fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	4b44      	ldr	r3, [pc, #272]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	4013      	ands	r3, r2
 80055f4:	d120      	bne.n	8005638 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e07a      	b.n	80056f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d107      	bne.n	8005612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005602:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	049b      	lsls	r3, r3, #18
 800560a:	4013      	ands	r3, r2
 800560c:	d114      	bne.n	8005638 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06e      	b.n	80056f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b03      	cmp	r3, #3
 8005618:	d107      	bne.n	800562a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800561a:	4b38      	ldr	r3, [pc, #224]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 800561c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	029b      	lsls	r3, r3, #10
 8005622:	4013      	ands	r3, r2
 8005624:	d108      	bne.n	8005638 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e062      	b.n	80056f0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562a:	4b34      	ldr	r3, [pc, #208]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2202      	movs	r2, #2
 8005630:	4013      	ands	r3, r2
 8005632:	d101      	bne.n	8005638 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e05b      	b.n	80056f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005638:	4b30      	ldr	r3, [pc, #192]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2203      	movs	r2, #3
 800563e:	4393      	bics	r3, r2
 8005640:	0019      	movs	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800564c:	f7fe ffc4 	bl	80045d8 <HAL_GetTick>
 8005650:	0003      	movs	r3, r0
 8005652:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005654:	e009      	b.n	800566a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005656:	f7fe ffbf 	bl	80045d8 <HAL_GetTick>
 800565a:	0002      	movs	r2, r0
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	4a27      	ldr	r2, [pc, #156]	; (8005700 <HAL_RCC_ClockConfig+0x1a4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e042      	b.n	80056f0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566a:	4b24      	ldr	r3, [pc, #144]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	220c      	movs	r2, #12
 8005670:	401a      	ands	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	429a      	cmp	r2, r3
 800567a:	d1ec      	bne.n	8005656 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800567c:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <HAL_RCC_ClockConfig+0x19c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	4013      	ands	r3, r2
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d211      	bcs.n	80056ae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <HAL_RCC_ClockConfig+0x19c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2201      	movs	r2, #1
 8005690:	4393      	bics	r3, r2
 8005692:	0019      	movs	r1, r3
 8005694:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <HAL_RCC_ClockConfig+0x19c>)
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569c:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <HAL_RCC_ClockConfig+0x19c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d001      	beq.n	80056ae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e020      	b.n	80056f0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2204      	movs	r2, #4
 80056b4:	4013      	ands	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056b8:	4b10      	ldr	r3, [pc, #64]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4a11      	ldr	r2, [pc, #68]	; (8005704 <HAL_RCC_ClockConfig+0x1a8>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056cc:	f000 f820 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056d0:	0001      	movs	r1, r0
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <HAL_RCC_ClockConfig+0x1a0>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	091b      	lsrs	r3, r3, #4
 80056d8:	220f      	movs	r2, #15
 80056da:	4013      	ands	r3, r2
 80056dc:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <HAL_RCC_ClockConfig+0x1ac>)
 80056de:	5cd3      	ldrb	r3, [r2, r3]
 80056e0:	000a      	movs	r2, r1
 80056e2:	40da      	lsrs	r2, r3
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCC_ClockConfig+0x1b0>)
 80056e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80056e8:	2000      	movs	r0, #0
 80056ea:	f7fe ff2f 	bl	800454c <HAL_InitTick>
  
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b004      	add	sp, #16
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40022000 	.word	0x40022000
 80056fc:	40021000 	.word	0x40021000
 8005700:	00001388 	.word	0x00001388
 8005704:	fffff8ff 	.word	0xfffff8ff
 8005708:	0800b864 	.word	0x0800b864
 800570c:	20000004 	.word	0x20000004

08005710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	2300      	movs	r3, #0
 8005724:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800572a:	4b2d      	ldr	r3, [pc, #180]	; (80057e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	220c      	movs	r2, #12
 8005734:	4013      	ands	r3, r2
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d046      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0xb8>
 800573a:	d848      	bhi.n	80057ce <HAL_RCC_GetSysClockFreq+0xbe>
 800573c:	2b04      	cmp	r3, #4
 800573e:	d002      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0x36>
 8005740:	2b08      	cmp	r3, #8
 8005742:	d003      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x3c>
 8005744:	e043      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005746:	4b27      	ldr	r3, [pc, #156]	; (80057e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005748:	613b      	str	r3, [r7, #16]
      break;
 800574a:	e043      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	0c9b      	lsrs	r3, r3, #18
 8005750:	220f      	movs	r2, #15
 8005752:	4013      	ands	r3, r2
 8005754:	4a24      	ldr	r2, [pc, #144]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800575a:	4b21      	ldr	r3, [pc, #132]	; (80057e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	220f      	movs	r2, #15
 8005760:	4013      	ands	r3, r2
 8005762:	4a22      	ldr	r2, [pc, #136]	; (80057ec <HAL_RCC_GetSysClockFreq+0xdc>)
 8005764:	5cd3      	ldrb	r3, [r2, r3]
 8005766:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	23c0      	movs	r3, #192	; 0xc0
 800576c:	025b      	lsls	r3, r3, #9
 800576e:	401a      	ands	r2, r3
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	025b      	lsls	r3, r3, #9
 8005774:	429a      	cmp	r2, r3
 8005776:	d109      	bne.n	800578c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	481a      	ldr	r0, [pc, #104]	; (80057e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800577c:	f7fa fcce 	bl	800011c <__udivsi3>
 8005780:	0003      	movs	r3, r0
 8005782:	001a      	movs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4353      	muls	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e01a      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	23c0      	movs	r3, #192	; 0xc0
 8005790:	025b      	lsls	r3, r3, #9
 8005792:	401a      	ands	r2, r3
 8005794:	23c0      	movs	r3, #192	; 0xc0
 8005796:	025b      	lsls	r3, r3, #9
 8005798:	429a      	cmp	r2, r3
 800579a:	d109      	bne.n	80057b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4814      	ldr	r0, [pc, #80]	; (80057f0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80057a0:	f7fa fcbc 	bl	800011c <__udivsi3>
 80057a4:	0003      	movs	r3, r0
 80057a6:	001a      	movs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4353      	muls	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	480c      	ldr	r0, [pc, #48]	; (80057e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80057b4:	f7fa fcb2 	bl	800011c <__udivsi3>
 80057b8:	0003      	movs	r3, r0
 80057ba:	001a      	movs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4353      	muls	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	613b      	str	r3, [r7, #16]
      break;
 80057c6:	e005      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80057c8:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80057ca:	613b      	str	r3, [r7, #16]
      break;
 80057cc:	e002      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80057d0:	613b      	str	r3, [r7, #16]
      break;
 80057d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80057d4:	693b      	ldr	r3, [r7, #16]
}
 80057d6:	0018      	movs	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	b006      	add	sp, #24
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	40021000 	.word	0x40021000
 80057e4:	007a1200 	.word	0x007a1200
 80057e8:	0800b890 	.word	0x0800b890
 80057ec:	0800b8a0 	.word	0x0800b8a0
 80057f0:	02dc6c00 	.word	0x02dc6c00

080057f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <HAL_RCC_GetHCLKFreq+0x10>)
 80057fa:	681b      	ldr	r3, [r3, #0]
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	20000004 	.word	0x20000004

08005808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800580c:	f7ff fff2 	bl	80057f4 <HAL_RCC_GetHCLKFreq>
 8005810:	0001      	movs	r1, r0
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	2207      	movs	r2, #7
 800581a:	4013      	ands	r3, r2
 800581c:	4a04      	ldr	r2, [pc, #16]	; (8005830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800581e:	5cd3      	ldrb	r3, [r2, r3]
 8005820:	40d9      	lsrs	r1, r3
 8005822:	000b      	movs	r3, r1
}    
 8005824:	0018      	movs	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	40021000 	.word	0x40021000
 8005830:	0800b874 	.word	0x0800b874

08005834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	025b      	lsls	r3, r3, #9
 800584c:	4013      	ands	r3, r2
 800584e:	d100      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005850:	e08e      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005852:	2017      	movs	r0, #23
 8005854:	183b      	adds	r3, r7, r0
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585a:	4b6e      	ldr	r3, [pc, #440]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	055b      	lsls	r3, r3, #21
 8005862:	4013      	ands	r3, r2
 8005864:	d110      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005866:	4b6b      	ldr	r3, [pc, #428]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005868:	69da      	ldr	r2, [r3, #28]
 800586a:	4b6a      	ldr	r3, [pc, #424]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	0549      	lsls	r1, r1, #21
 8005870:	430a      	orrs	r2, r1
 8005872:	61da      	str	r2, [r3, #28]
 8005874:	4b67      	ldr	r3, [pc, #412]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	055b      	lsls	r3, r3, #21
 800587c:	4013      	ands	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005882:	183b      	adds	r3, r7, r0
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005888:	4b63      	ldr	r3, [pc, #396]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	4013      	ands	r3, r2
 8005892:	d11a      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005894:	4b60      	ldr	r3, [pc, #384]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	4b5f      	ldr	r3, [pc, #380]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800589a:	2180      	movs	r1, #128	; 0x80
 800589c:	0049      	lsls	r1, r1, #1
 800589e:	430a      	orrs	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a2:	f7fe fe99 	bl	80045d8 <HAL_GetTick>
 80058a6:	0003      	movs	r3, r0
 80058a8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058aa:	e008      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ac:	f7fe fe94 	bl	80045d8 <HAL_GetTick>
 80058b0:	0002      	movs	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e0a6      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058be:	4b56      	ldr	r3, [pc, #344]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	4013      	ands	r3, r2
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ca:	4b52      	ldr	r3, [pc, #328]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	23c0      	movs	r3, #192	; 0xc0
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4013      	ands	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d034      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	23c0      	movs	r3, #192	; 0xc0
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4013      	ands	r3, r2
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d02c      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ec:	4b49      	ldr	r3, [pc, #292]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	4a4a      	ldr	r2, [pc, #296]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058f6:	4b47      	ldr	r3, [pc, #284]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	4b46      	ldr	r3, [pc, #280]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	0249      	lsls	r1, r1, #9
 8005900:	430a      	orrs	r2, r1
 8005902:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005904:	4b43      	ldr	r3, [pc, #268]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800590a:	4945      	ldr	r1, [pc, #276]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800590c:	400a      	ands	r2, r1
 800590e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005910:	4b40      	ldr	r3, [pc, #256]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	4013      	ands	r3, r2
 800591c:	d013      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591e:	f7fe fe5b 	bl	80045d8 <HAL_GetTick>
 8005922:	0003      	movs	r3, r0
 8005924:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005926:	e009      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005928:	f7fe fe56 	bl	80045d8 <HAL_GetTick>
 800592c:	0002      	movs	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	4a3c      	ldr	r2, [pc, #240]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e067      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593c:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	2202      	movs	r2, #2
 8005942:	4013      	ands	r3, r2
 8005944:	d0f0      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005946:	4b33      	ldr	r3, [pc, #204]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	4a34      	ldr	r2, [pc, #208]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800594c:	4013      	ands	r3, r2
 800594e:	0019      	movs	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005956:	430a      	orrs	r2, r1
 8005958:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800595a:	2317      	movs	r3, #23
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d105      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005964:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800596a:	492f      	ldr	r1, [pc, #188]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800596c:	400a      	ands	r2, r1
 800596e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2201      	movs	r2, #1
 8005976:	4013      	ands	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800597a:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	2203      	movs	r2, #3
 8005980:	4393      	bics	r3, r2
 8005982:	0019      	movs	r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800598a:	430a      	orrs	r2, r1
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2202      	movs	r2, #2
 8005994:	4013      	ands	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800599e:	4013      	ands	r3, r2
 80059a0:	0019      	movs	r1, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059a8:	430a      	orrs	r2, r1
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2220      	movs	r2, #32
 80059b2:	4013      	ands	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059b6:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	2210      	movs	r2, #16
 80059bc:	4393      	bics	r3, r2
 80059be:	0019      	movs	r1, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059c6:	430a      	orrs	r2, r1
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	4013      	ands	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	2280      	movs	r2, #128	; 0x80
 80059dc:	4393      	bics	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059e6:	430a      	orrs	r2, r1
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	4013      	ands	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	4393      	bics	r3, r2
 80059fe:	0019      	movs	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	695a      	ldr	r2, [r3, #20]
 8005a04:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a06:	430a      	orrs	r2, r1
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b006      	add	sp, #24
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	fffffcff 	.word	0xfffffcff
 8005a20:	fffeffff 	.word	0xfffeffff
 8005a24:	00001388 	.word	0x00001388
 8005a28:	efffffff 	.word	0xefffffff
 8005a2c:	fffcffff 	.word	0xfffcffff

08005a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e0a8      	b.n	8005b94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	2382      	movs	r3, #130	; 0x82
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d009      	beq.n	8005a6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	61da      	str	r2, [r3, #28]
 8005a5c:	e005      	b.n	8005a6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	225d      	movs	r2, #93	; 0x5d
 8005a74:	5c9b      	ldrb	r3, [r3, r2]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	225c      	movs	r2, #92	; 0x5c
 8005a80:	2100      	movs	r1, #0
 8005a82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 f88a 	bl	8005ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	225d      	movs	r2, #93	; 0x5d
 8005a90:	2102      	movs	r1, #2
 8005a92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2140      	movs	r1, #64	; 0x40
 8005aa0:	438a      	bics	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	23e0      	movs	r3, #224	; 0xe0
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d902      	bls.n	8005ab6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e002      	b.n	8005abc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	015b      	lsls	r3, r3, #5
 8005aba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	23f0      	movs	r3, #240	; 0xf0
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d008      	beq.n	8005ada <HAL_SPI_Init+0xaa>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	23e0      	movs	r3, #224	; 0xe0
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d002      	beq.n	8005ada <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	2382      	movs	r3, #130	; 0x82
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6899      	ldr	r1, [r3, #8]
 8005ae8:	2384      	movs	r3, #132	; 0x84
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	400b      	ands	r3, r1
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2102      	movs	r1, #2
 8005af6:	400b      	ands	r3, r1
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2101      	movs	r1, #1
 8005b00:	400b      	ands	r3, r1
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6999      	ldr	r1, [r3, #24]
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	400b      	ands	r3, r1
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	2138      	movs	r1, #56	; 0x38
 8005b16:	400b      	ands	r3, r1
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	400b      	ands	r3, r1
 8005b22:	431a      	orrs	r2, r3
 8005b24:	0011      	movs	r1, r2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	019b      	lsls	r3, r3, #6
 8005b2e:	401a      	ands	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	0c1b      	lsrs	r3, r3, #16
 8005b3e:	2204      	movs	r2, #4
 8005b40:	401a      	ands	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	2110      	movs	r1, #16
 8005b48:	400b      	ands	r3, r1
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	2108      	movs	r1, #8
 8005b52:	400b      	ands	r3, r1
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68d9      	ldr	r1, [r3, #12]
 8005b5a:	23f0      	movs	r3, #240	; 0xf0
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	400b      	ands	r3, r1
 8005b60:	431a      	orrs	r2, r3
 8005b62:	0011      	movs	r1, r2
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	015b      	lsls	r3, r3, #5
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4907      	ldr	r1, [pc, #28]	; (8005b9c <HAL_SPI_Init+0x16c>)
 8005b80:	400a      	ands	r2, r1
 8005b82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	225d      	movs	r2, #93	; 0x5d
 8005b8e:	2101      	movs	r1, #1
 8005b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b004      	add	sp, #16
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	fffff7ff 	.word	0xfffff7ff

08005ba0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	1cbb      	adds	r3, r7, #2
 8005bc0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bc6:	2323      	movs	r3, #35	; 0x23
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	225c      	movs	r2, #92	; 0x5c
 8005bd2:	5c9b      	ldrb	r3, [r3, r2]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x2c>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e1c4      	b.n	8005f66 <HAL_SPI_TransmitReceive+0x3b6>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	225c      	movs	r2, #92	; 0x5c
 8005be0:	2101      	movs	r1, #1
 8005be2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be4:	f7fe fcf8 	bl	80045d8 <HAL_GetTick>
 8005be8:	0003      	movs	r3, r0
 8005bea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bec:	201b      	movs	r0, #27
 8005bee:	183b      	adds	r3, r7, r0
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	215d      	movs	r1, #93	; 0x5d
 8005bf4:	5c52      	ldrb	r2, [r2, r1]
 8005bf6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005bfe:	2312      	movs	r3, #18
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	1cba      	adds	r2, r7, #2
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c08:	183b      	adds	r3, r7, r0
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d011      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x84>
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	2382      	movs	r3, #130	; 0x82
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d107      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x7a>
 8005c22:	183b      	adds	r3, r7, r0
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d004      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005c2a:	2323      	movs	r3, #35	; 0x23
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	2202      	movs	r2, #2
 8005c30:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c32:	e191      	b.n	8005f58 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d006      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0x98>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0x98>
 8005c40:	1cbb      	adds	r3, r7, #2
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005c48:	2323      	movs	r3, #35	; 0x23
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c50:	e182      	b.n	8005f58 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	225d      	movs	r2, #93	; 0x5d
 8005c56:	5c9b      	ldrb	r3, [r3, r2]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d003      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	225d      	movs	r2, #93	; 0x5d
 8005c62:	2105      	movs	r1, #5
 8005c64:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1cba      	adds	r2, r7, #2
 8005c76:	2146      	movs	r1, #70	; 0x46
 8005c78:	8812      	ldrh	r2, [r2, #0]
 8005c7a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1cba      	adds	r2, r7, #2
 8005c80:	2144      	movs	r1, #68	; 0x44
 8005c82:	8812      	ldrh	r2, [r2, #0]
 8005c84:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1cba      	adds	r2, r7, #2
 8005c90:	8812      	ldrh	r2, [r2, #0]
 8005c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1cba      	adds	r2, r7, #2
 8005c98:	8812      	ldrh	r2, [r2, #0]
 8005c9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	23e0      	movs	r3, #224	; 0xe0
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d908      	bls.n	8005cc6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	49ac      	ldr	r1, [pc, #688]	; (8005f70 <HAL_SPI_TransmitReceive+0x3c0>)
 8005cc0:	400a      	ands	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
 8005cc4:	e008      	b.n	8005cd8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	0149      	lsls	r1, r1, #5
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2240      	movs	r2, #64	; 0x40
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b40      	cmp	r3, #64	; 0x40
 8005ce4:	d007      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2140      	movs	r1, #64	; 0x40
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	23e0      	movs	r3, #224	; 0xe0
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d800      	bhi.n	8005d04 <HAL_SPI_TransmitReceive+0x154>
 8005d02:	e083      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0x168>
 8005d0c:	2312      	movs	r3, #18
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d000      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0x168>
 8005d16:	e06d      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	881a      	ldrh	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d3c:	e05a      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2202      	movs	r2, #2
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d11b      	bne.n	8005d84 <HAL_SPI_TransmitReceive+0x1d4>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d016      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x1d4>
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d113      	bne.n	8005d84 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	881a      	ldrh	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	1c9a      	adds	r2, r3, #2
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d11c      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x21c>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2246      	movs	r2, #70	; 0x46
 8005d96:	5a9b      	ldrh	r3, [r3, r2]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d016      	beq.n	8005dcc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	b292      	uxth	r2, r2
 8005daa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2246      	movs	r2, #70	; 0x46
 8005dba:	5a9b      	ldrh	r3, [r3, r2]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b299      	uxth	r1, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2246      	movs	r2, #70	; 0x46
 8005dc6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dcc:	f7fe fc04 	bl	80045d8 <HAL_GetTick>
 8005dd0:	0002      	movs	r2, r0
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d80b      	bhi.n	8005df4 <HAL_SPI_TransmitReceive+0x244>
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	3301      	adds	r3, #1
 8005de0:	d008      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005de2:	2323      	movs	r3, #35	; 0x23
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	2203      	movs	r2, #3
 8005de8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	225d      	movs	r2, #93	; 0x5d
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]
        goto error;
 8005df2:	e0b1      	b.n	8005f58 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d19f      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x18e>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2246      	movs	r2, #70	; 0x46
 8005e02:	5a9b      	ldrh	r3, [r3, r2]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d199      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x18e>
 8005e0a:	e089      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_SPI_TransmitReceive+0x270>
 8005e14:	2312      	movs	r3, #18
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d000      	beq.n	8005e20 <HAL_SPI_TransmitReceive+0x270>
 8005e1e:	e074      	b.n	8005f0a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e46:	e060      	b.n	8005f0a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d11c      	bne.n	8005e90 <HAL_SPI_TransmitReceive+0x2e0>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d017      	beq.n	8005e90 <HAL_SPI_TransmitReceive+0x2e0>
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d114      	bne.n	8005e90 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2201      	movs	r2, #1
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d11e      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x32c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2246      	movs	r2, #70	; 0x46
 8005ea2:	5a9b      	ldrh	r3, [r3, r2]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d018      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2246      	movs	r2, #70	; 0x46
 8005eca:	5a9b      	ldrh	r3, [r3, r2]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b299      	uxth	r1, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2246      	movs	r2, #70	; 0x46
 8005ed6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005edc:	f7fe fb7c 	bl	80045d8 <HAL_GetTick>
 8005ee0:	0002      	movs	r2, r0
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d802      	bhi.n	8005ef2 <HAL_SPI_TransmitReceive+0x342>
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	3301      	adds	r3, #1
 8005ef0:	d102      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x348>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d108      	bne.n	8005f0a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005ef8:	2323      	movs	r3, #35	; 0x23
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	2203      	movs	r2, #3
 8005efe:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	225d      	movs	r2, #93	; 0x5d
 8005f04:	2101      	movs	r1, #1
 8005f06:	5499      	strb	r1, [r3, r2]
        goto error;
 8005f08:	e026      	b.n	8005f58 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d199      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x298>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2246      	movs	r2, #70	; 0x46
 8005f18:	5a9b      	ldrh	r3, [r3, r2]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d193      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 f960 	bl	80061ec <SPI_EndRxTxTransaction>
 8005f2c:	1e03      	subs	r3, r0, #0
 8005f2e:	d006      	beq.n	8005f3e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005f30:	2323      	movs	r3, #35	; 0x23
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005f46:	2323      	movs	r3, #35	; 0x23
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e003      	b.n	8005f58 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	225d      	movs	r2, #93	; 0x5d
 8005f54:	2101      	movs	r1, #1
 8005f56:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	225c      	movs	r2, #92	; 0x5c
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f60:	2323      	movs	r3, #35	; 0x23
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b00a      	add	sp, #40	; 0x28
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	ffffefff 	.word	0xffffefff

08005f74 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	225d      	movs	r2, #93	; 0x5d
 8005f80:	5c9b      	ldrb	r3, [r3, r2]
 8005f82:	b2db      	uxtb	r3, r3
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	1dfb      	adds	r3, r7, #7
 8005f9a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f9c:	f7fe fb1c 	bl	80045d8 <HAL_GetTick>
 8005fa0:	0002      	movs	r2, r0
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	18d3      	adds	r3, r2, r3
 8005faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fac:	f7fe fb14 	bl	80045d8 <HAL_GetTick>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fb4:	4b3a      	ldr	r3, [pc, #232]	; (80060a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	015b      	lsls	r3, r3, #5
 8005fba:	0d1b      	lsrs	r3, r3, #20
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	4353      	muls	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc2:	e058      	b.n	8006076 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	d055      	beq.n	8006076 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fca:	f7fe fb05 	bl	80045d8 <HAL_GetTick>
 8005fce:	0002      	movs	r2, r0
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d902      	bls.n	8005fe0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d142      	bne.n	8006066 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	21e0      	movs	r1, #224	; 0xe0
 8005fec:	438a      	bics	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	2382      	movs	r3, #130	; 0x82
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d113      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	2380      	movs	r3, #128	; 0x80
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	429a      	cmp	r2, r3
 8006006:	d005      	beq.n	8006014 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	2380      	movs	r3, #128	; 0x80
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	429a      	cmp	r2, r3
 8006012:	d107      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2140      	movs	r1, #64	; 0x40
 8006020:	438a      	bics	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	019b      	lsls	r3, r3, #6
 800602c:	429a      	cmp	r2, r3
 800602e:	d110      	bne.n	8006052 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	491a      	ldr	r1, [pc, #104]	; (80060a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800603c:	400a      	ands	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	0189      	lsls	r1, r1, #6
 800604e:	430a      	orrs	r2, r1
 8006050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	225d      	movs	r2, #93	; 0x5d
 8006056:	2101      	movs	r1, #1
 8006058:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	225c      	movs	r2, #92	; 0x5c
 800605e:	2100      	movs	r1, #0
 8006060:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e017      	b.n	8006096 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	3b01      	subs	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	425a      	negs	r2, r3
 8006086:	4153      	adcs	r3, r2
 8006088:	b2db      	uxtb	r3, r3
 800608a:	001a      	movs	r2, r3
 800608c:	1dfb      	adds	r3, r7, #7
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d197      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b008      	add	sp, #32
 800609c:	bd80      	pop	{r7, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	20000004 	.word	0x20000004
 80060a4:	ffffdfff 	.word	0xffffdfff

080060a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060b6:	2317      	movs	r3, #23
 80060b8:	18fb      	adds	r3, r7, r3
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060be:	f7fe fa8b 	bl	80045d8 <HAL_GetTick>
 80060c2:	0002      	movs	r2, r0
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	18d3      	adds	r3, r2, r3
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80060ce:	f7fe fa83 	bl	80045d8 <HAL_GetTick>
 80060d2:	0003      	movs	r3, r0
 80060d4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	330c      	adds	r3, #12
 80060dc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060de:	4b41      	ldr	r3, [pc, #260]	; (80061e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	0013      	movs	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	189b      	adds	r3, r3, r2
 80060e8:	00da      	lsls	r2, r3, #3
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	0d1b      	lsrs	r3, r3, #20
 80060ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f0:	4353      	muls	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060f4:	e068      	b.n	80061c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	23c0      	movs	r3, #192	; 0xc0
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d10a      	bne.n	8006116 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d107      	bne.n	8006116 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	2117      	movs	r1, #23
 800610e:	187b      	adds	r3, r7, r1
 8006110:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006112:	187b      	adds	r3, r7, r1
 8006114:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	3301      	adds	r3, #1
 800611a:	d055      	beq.n	80061c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800611c:	f7fe fa5c 	bl	80045d8 <HAL_GetTick>
 8006120:	0002      	movs	r2, r0
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006128:	429a      	cmp	r2, r3
 800612a:	d902      	bls.n	8006132 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	2b00      	cmp	r3, #0
 8006130:	d142      	bne.n	80061b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	21e0      	movs	r1, #224	; 0xe0
 800613e:	438a      	bics	r2, r1
 8006140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	2382      	movs	r3, #130	; 0x82
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	429a      	cmp	r2, r3
 800614c:	d113      	bne.n	8006176 <SPI_WaitFifoStateUntilTimeout+0xce>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	429a      	cmp	r2, r3
 8006158:	d005      	beq.n	8006166 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	2380      	movs	r3, #128	; 0x80
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	429a      	cmp	r2, r3
 8006164:	d107      	bne.n	8006176 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2140      	movs	r1, #64	; 0x40
 8006172:	438a      	bics	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	019b      	lsls	r3, r3, #6
 800617e:	429a      	cmp	r2, r3
 8006180:	d110      	bne.n	80061a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4916      	ldr	r1, [pc, #88]	; (80061e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800618e:	400a      	ands	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2180      	movs	r1, #128	; 0x80
 800619e:	0189      	lsls	r1, r1, #6
 80061a0:	430a      	orrs	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	225d      	movs	r2, #93	; 0x5d
 80061a8:	2101      	movs	r1, #1
 80061aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	225c      	movs	r2, #92	; 0x5c
 80061b0:	2100      	movs	r1, #0
 80061b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e010      	b.n	80061da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d18e      	bne.n	80060f6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	0018      	movs	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	b00a      	add	sp, #40	; 0x28
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	20000004 	.word	0x20000004
 80061e8:	ffffdfff 	.word	0xffffdfff

080061ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	23c0      	movs	r3, #192	; 0xc0
 80061fc:	0159      	lsls	r1, r3, #5
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	0013      	movs	r3, r2
 8006206:	2200      	movs	r2, #0
 8006208:	f7ff ff4e 	bl	80060a8 <SPI_WaitFifoStateUntilTimeout>
 800620c:	1e03      	subs	r3, r0, #0
 800620e:	d007      	beq.n	8006220 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006214:	2220      	movs	r2, #32
 8006216:	431a      	orrs	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e027      	b.n	8006270 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	0013      	movs	r3, r2
 800622a:	2200      	movs	r2, #0
 800622c:	2180      	movs	r1, #128	; 0x80
 800622e:	f7ff fead 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006232:	1e03      	subs	r3, r0, #0
 8006234:	d007      	beq.n	8006246 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623a:	2220      	movs	r2, #32
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e014      	b.n	8006270 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	23c0      	movs	r3, #192	; 0xc0
 800624a:	00d9      	lsls	r1, r3, #3
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	0013      	movs	r3, r2
 8006254:	2200      	movs	r2, #0
 8006256:	f7ff ff27 	bl	80060a8 <SPI_WaitFifoStateUntilTimeout>
 800625a:	1e03      	subs	r3, r0, #0
 800625c:	d007      	beq.n	800626e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006262:	2220      	movs	r2, #32
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e000      	b.n	8006270 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b004      	add	sp, #16
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e044      	b.n	8006314 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d107      	bne.n	80062a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2278      	movs	r2, #120	; 0x78
 8006296:	2100      	movs	r1, #0
 8006298:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	0018      	movs	r0, r3
 800629e:	f000 f83f 	bl	8006320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2224      	movs	r2, #36	; 0x24
 80062a6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2101      	movs	r1, #1
 80062b4:	438a      	bics	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	0018      	movs	r0, r3
 80062bc:	f000 f8d8 	bl	8006470 <UART_SetConfig>
 80062c0:	0003      	movs	r3, r0
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e024      	b.n	8006314 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	0018      	movs	r0, r3
 80062d6:	f000 fa53 	bl	8006780 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	490d      	ldr	r1, [pc, #52]	; (800631c <HAL_UART_Init+0xa4>)
 80062e6:	400a      	ands	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	212a      	movs	r1, #42	; 0x2a
 80062f6:	438a      	bics	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2101      	movs	r1, #1
 8006306:	430a      	orrs	r2, r1
 8006308:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	0018      	movs	r0, r3
 800630e:	f000 faeb 	bl	80068e8 <UART_CheckIdleState>
 8006312:	0003      	movs	r3, r0
}
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}
 800631c:	ffffb7ff 	.word	0xffffb7ff

08006320 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	b002      	add	sp, #8
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	1dbb      	adds	r3, r7, #6
 800633e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006344:	2b20      	cmp	r3, #32
 8006346:	d000      	beq.n	800634a <HAL_UART_Transmit+0x1a>
 8006348:	e08d      	b.n	8006466 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_UART_Transmit+0x28>
 8006350:	1dbb      	adds	r3, r7, #6
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e085      	b.n	8006468 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	2380      	movs	r3, #128	; 0x80
 8006362:	015b      	lsls	r3, r3, #5
 8006364:	429a      	cmp	r2, r3
 8006366:	d109      	bne.n	800637c <HAL_UART_Transmit+0x4c>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2201      	movs	r2, #1
 8006374:	4013      	ands	r3, r2
 8006376:	d001      	beq.n	800637c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e075      	b.n	8006468 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2284      	movs	r2, #132	; 0x84
 8006380:	2100      	movs	r1, #0
 8006382:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2221      	movs	r2, #33	; 0x21
 8006388:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800638a:	f7fe f925 	bl	80045d8 <HAL_GetTick>
 800638e:	0003      	movs	r3, r0
 8006390:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1dba      	adds	r2, r7, #6
 8006396:	2150      	movs	r1, #80	; 0x50
 8006398:	8812      	ldrh	r2, [r2, #0]
 800639a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	1dba      	adds	r2, r7, #6
 80063a0:	2152      	movs	r1, #82	; 0x52
 80063a2:	8812      	ldrh	r2, [r2, #0]
 80063a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	015b      	lsls	r3, r3, #5
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d108      	bne.n	80063c4 <HAL_UART_Transmit+0x94>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e003      	b.n	80063cc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063cc:	e030      	b.n	8006430 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	0013      	movs	r3, r2
 80063d8:	2200      	movs	r2, #0
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	f000 fb2c 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 80063e0:	1e03      	subs	r3, r0, #0
 80063e2:	d004      	beq.n	80063ee <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e03c      	b.n	8006468 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	05d2      	lsls	r2, r2, #23
 80063fe:	0dd2      	lsrs	r2, r2, #23
 8006400:	b292      	uxth	r2, r2
 8006402:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	3302      	adds	r3, #2
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e008      	b.n	800641e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b292      	uxth	r2, r2
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2252      	movs	r2, #82	; 0x52
 8006422:	5a9b      	ldrh	r3, [r3, r2]
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b299      	uxth	r1, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2252      	movs	r2, #82	; 0x52
 800642e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2252      	movs	r2, #82	; 0x52
 8006434:	5a9b      	ldrh	r3, [r3, r2]
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1c8      	bne.n	80063ce <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	0013      	movs	r3, r2
 8006446:	2200      	movs	r2, #0
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	f000 faf5 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 800644e:	1e03      	subs	r3, r0, #0
 8006450:	d004      	beq.n	800645c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e005      	b.n	8006468 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	0018      	movs	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	b008      	add	sp, #32
 800646e:	bd80      	pop	{r7, pc}

08006470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006478:	231e      	movs	r3, #30
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4aaf      	ldr	r2, [pc, #700]	; (800675c <UART_SetConfig+0x2ec>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	0019      	movs	r1, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4aaa      	ldr	r2, [pc, #680]	; (8006760 <UART_SetConfig+0x2f0>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	0019      	movs	r1, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4aa1      	ldr	r2, [pc, #644]	; (8006764 <UART_SetConfig+0x2f4>)
 80064de:	4013      	ands	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a9d      	ldr	r2, [pc, #628]	; (8006768 <UART_SetConfig+0x2f8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d127      	bne.n	8006546 <UART_SetConfig+0xd6>
 80064f6:	4b9d      	ldr	r3, [pc, #628]	; (800676c <UART_SetConfig+0x2fc>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	2203      	movs	r2, #3
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d00d      	beq.n	800651e <UART_SetConfig+0xae>
 8006502:	d81b      	bhi.n	800653c <UART_SetConfig+0xcc>
 8006504:	2b02      	cmp	r3, #2
 8006506:	d014      	beq.n	8006532 <UART_SetConfig+0xc2>
 8006508:	d818      	bhi.n	800653c <UART_SetConfig+0xcc>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <UART_SetConfig+0xa4>
 800650e:	2b01      	cmp	r3, #1
 8006510:	d00a      	beq.n	8006528 <UART_SetConfig+0xb8>
 8006512:	e013      	b.n	800653c <UART_SetConfig+0xcc>
 8006514:	231f      	movs	r3, #31
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e065      	b.n	80065ea <UART_SetConfig+0x17a>
 800651e:	231f      	movs	r3, #31
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	2202      	movs	r2, #2
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e060      	b.n	80065ea <UART_SetConfig+0x17a>
 8006528:	231f      	movs	r3, #31
 800652a:	18fb      	adds	r3, r7, r3
 800652c:	2204      	movs	r2, #4
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	e05b      	b.n	80065ea <UART_SetConfig+0x17a>
 8006532:	231f      	movs	r3, #31
 8006534:	18fb      	adds	r3, r7, r3
 8006536:	2208      	movs	r2, #8
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e056      	b.n	80065ea <UART_SetConfig+0x17a>
 800653c:	231f      	movs	r3, #31
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	2210      	movs	r2, #16
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	e051      	b.n	80065ea <UART_SetConfig+0x17a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a89      	ldr	r2, [pc, #548]	; (8006770 <UART_SetConfig+0x300>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d134      	bne.n	80065ba <UART_SetConfig+0x14a>
 8006550:	4b86      	ldr	r3, [pc, #536]	; (800676c <UART_SetConfig+0x2fc>)
 8006552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006554:	23c0      	movs	r3, #192	; 0xc0
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	4013      	ands	r3, r2
 800655a:	22c0      	movs	r2, #192	; 0xc0
 800655c:	0292      	lsls	r2, r2, #10
 800655e:	4293      	cmp	r3, r2
 8006560:	d017      	beq.n	8006592 <UART_SetConfig+0x122>
 8006562:	22c0      	movs	r2, #192	; 0xc0
 8006564:	0292      	lsls	r2, r2, #10
 8006566:	4293      	cmp	r3, r2
 8006568:	d822      	bhi.n	80065b0 <UART_SetConfig+0x140>
 800656a:	2280      	movs	r2, #128	; 0x80
 800656c:	0292      	lsls	r2, r2, #10
 800656e:	4293      	cmp	r3, r2
 8006570:	d019      	beq.n	80065a6 <UART_SetConfig+0x136>
 8006572:	2280      	movs	r2, #128	; 0x80
 8006574:	0292      	lsls	r2, r2, #10
 8006576:	4293      	cmp	r3, r2
 8006578:	d81a      	bhi.n	80065b0 <UART_SetConfig+0x140>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <UART_SetConfig+0x118>
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	0252      	lsls	r2, r2, #9
 8006582:	4293      	cmp	r3, r2
 8006584:	d00a      	beq.n	800659c <UART_SetConfig+0x12c>
 8006586:	e013      	b.n	80065b0 <UART_SetConfig+0x140>
 8006588:	231f      	movs	r3, #31
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	e02b      	b.n	80065ea <UART_SetConfig+0x17a>
 8006592:	231f      	movs	r3, #31
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	2202      	movs	r2, #2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e026      	b.n	80065ea <UART_SetConfig+0x17a>
 800659c:	231f      	movs	r3, #31
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	2204      	movs	r2, #4
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	e021      	b.n	80065ea <UART_SetConfig+0x17a>
 80065a6:	231f      	movs	r3, #31
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	2208      	movs	r2, #8
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e01c      	b.n	80065ea <UART_SetConfig+0x17a>
 80065b0:	231f      	movs	r3, #31
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	2210      	movs	r2, #16
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e017      	b.n	80065ea <UART_SetConfig+0x17a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a6d      	ldr	r2, [pc, #436]	; (8006774 <UART_SetConfig+0x304>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d104      	bne.n	80065ce <UART_SetConfig+0x15e>
 80065c4:	231f      	movs	r3, #31
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e00d      	b.n	80065ea <UART_SetConfig+0x17a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a69      	ldr	r2, [pc, #420]	; (8006778 <UART_SetConfig+0x308>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d104      	bne.n	80065e2 <UART_SetConfig+0x172>
 80065d8:	231f      	movs	r3, #31
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e003      	b.n	80065ea <UART_SetConfig+0x17a>
 80065e2:	231f      	movs	r3, #31
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	2210      	movs	r2, #16
 80065e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69da      	ldr	r2, [r3, #28]
 80065ee:	2380      	movs	r3, #128	; 0x80
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d15c      	bne.n	80066b0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80065f6:	231f      	movs	r3, #31
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d015      	beq.n	800662c <UART_SetConfig+0x1bc>
 8006600:	dc18      	bgt.n	8006634 <UART_SetConfig+0x1c4>
 8006602:	2b04      	cmp	r3, #4
 8006604:	d00d      	beq.n	8006622 <UART_SetConfig+0x1b2>
 8006606:	dc15      	bgt.n	8006634 <UART_SetConfig+0x1c4>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <UART_SetConfig+0x1a2>
 800660c:	2b02      	cmp	r3, #2
 800660e:	d005      	beq.n	800661c <UART_SetConfig+0x1ac>
 8006610:	e010      	b.n	8006634 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006612:	f7ff f8f9 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8006616:	0003      	movs	r3, r0
 8006618:	61bb      	str	r3, [r7, #24]
        break;
 800661a:	e012      	b.n	8006642 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800661c:	4b57      	ldr	r3, [pc, #348]	; (800677c <UART_SetConfig+0x30c>)
 800661e:	61bb      	str	r3, [r7, #24]
        break;
 8006620:	e00f      	b.n	8006642 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006622:	f7ff f875 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8006626:	0003      	movs	r3, r0
 8006628:	61bb      	str	r3, [r7, #24]
        break;
 800662a:	e00a      	b.n	8006642 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	61bb      	str	r3, [r7, #24]
        break;
 8006632:	e006      	b.n	8006642 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006638:	231e      	movs	r3, #30
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
        break;
 8006640:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d100      	bne.n	800664a <UART_SetConfig+0x1da>
 8006648:	e07a      	b.n	8006740 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	005a      	lsls	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	18d2      	adds	r2, r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	0019      	movs	r1, r3
 800665c:	0010      	movs	r0, r2
 800665e:	f7f9 fd5d 	bl	800011c <__udivsi3>
 8006662:	0003      	movs	r3, r0
 8006664:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b0f      	cmp	r3, #15
 800666a:	d91c      	bls.n	80066a6 <UART_SetConfig+0x236>
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	2380      	movs	r3, #128	; 0x80
 8006670:	025b      	lsls	r3, r3, #9
 8006672:	429a      	cmp	r2, r3
 8006674:	d217      	bcs.n	80066a6 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	b29a      	uxth	r2, r3
 800667a:	200e      	movs	r0, #14
 800667c:	183b      	adds	r3, r7, r0
 800667e:	210f      	movs	r1, #15
 8006680:	438a      	bics	r2, r1
 8006682:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	2207      	movs	r2, #7
 800668c:	4013      	ands	r3, r2
 800668e:	b299      	uxth	r1, r3
 8006690:	183b      	adds	r3, r7, r0
 8006692:	183a      	adds	r2, r7, r0
 8006694:	8812      	ldrh	r2, [r2, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	183a      	adds	r2, r7, r0
 80066a0:	8812      	ldrh	r2, [r2, #0]
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	e04c      	b.n	8006740 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80066a6:	231e      	movs	r3, #30
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e047      	b.n	8006740 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066b0:	231f      	movs	r3, #31
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d015      	beq.n	80066e6 <UART_SetConfig+0x276>
 80066ba:	dc18      	bgt.n	80066ee <UART_SetConfig+0x27e>
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d00d      	beq.n	80066dc <UART_SetConfig+0x26c>
 80066c0:	dc15      	bgt.n	80066ee <UART_SetConfig+0x27e>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <UART_SetConfig+0x25c>
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d005      	beq.n	80066d6 <UART_SetConfig+0x266>
 80066ca:	e010      	b.n	80066ee <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066cc:	f7ff f89c 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 80066d0:	0003      	movs	r3, r0
 80066d2:	61bb      	str	r3, [r7, #24]
        break;
 80066d4:	e012      	b.n	80066fc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d6:	4b29      	ldr	r3, [pc, #164]	; (800677c <UART_SetConfig+0x30c>)
 80066d8:	61bb      	str	r3, [r7, #24]
        break;
 80066da:	e00f      	b.n	80066fc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066dc:	f7ff f818 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80066e0:	0003      	movs	r3, r0
 80066e2:	61bb      	str	r3, [r7, #24]
        break;
 80066e4:	e00a      	b.n	80066fc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	61bb      	str	r3, [r7, #24]
        break;
 80066ec:	e006      	b.n	80066fc <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066f2:	231e      	movs	r3, #30
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	2201      	movs	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
        break;
 80066fa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01e      	beq.n	8006740 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085a      	lsrs	r2, r3, #1
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	18d2      	adds	r2, r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	0019      	movs	r1, r3
 8006712:	0010      	movs	r0, r2
 8006714:	f7f9 fd02 	bl	800011c <__udivsi3>
 8006718:	0003      	movs	r3, r0
 800671a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d90a      	bls.n	8006738 <UART_SetConfig+0x2c8>
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	2380      	movs	r3, #128	; 0x80
 8006726:	025b      	lsls	r3, r3, #9
 8006728:	429a      	cmp	r2, r3
 800672a:	d205      	bcs.n	8006738 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	e003      	b.n	8006740 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006738:	231e      	movs	r3, #30
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800674c:	231e      	movs	r3, #30
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	781b      	ldrb	r3, [r3, #0]
}
 8006752:	0018      	movs	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	b008      	add	sp, #32
 8006758:	bd80      	pop	{r7, pc}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	efff69f3 	.word	0xefff69f3
 8006760:	ffffcfff 	.word	0xffffcfff
 8006764:	fffff4ff 	.word	0xfffff4ff
 8006768:	40013800 	.word	0x40013800
 800676c:	40021000 	.word	0x40021000
 8006770:	40004400 	.word	0x40004400
 8006774:	40004800 	.word	0x40004800
 8006778:	40004c00 	.word	0x40004c00
 800677c:	007a1200 	.word	0x007a1200

08006780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	2201      	movs	r2, #1
 800678e:	4013      	ands	r3, r2
 8006790:	d00b      	beq.n	80067aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	4a4a      	ldr	r2, [pc, #296]	; (80068c4 <UART_AdvFeatureConfig+0x144>)
 800679a:	4013      	ands	r3, r2
 800679c:	0019      	movs	r1, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	2202      	movs	r2, #2
 80067b0:	4013      	ands	r3, r2
 80067b2:	d00b      	beq.n	80067cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	4a43      	ldr	r2, [pc, #268]	; (80068c8 <UART_AdvFeatureConfig+0x148>)
 80067bc:	4013      	ands	r3, r2
 80067be:	0019      	movs	r1, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	2204      	movs	r2, #4
 80067d2:	4013      	ands	r3, r2
 80067d4:	d00b      	beq.n	80067ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4a3b      	ldr	r2, [pc, #236]	; (80068cc <UART_AdvFeatureConfig+0x14c>)
 80067de:	4013      	ands	r3, r2
 80067e0:	0019      	movs	r1, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	2208      	movs	r2, #8
 80067f4:	4013      	ands	r3, r2
 80067f6:	d00b      	beq.n	8006810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4a34      	ldr	r2, [pc, #208]	; (80068d0 <UART_AdvFeatureConfig+0x150>)
 8006800:	4013      	ands	r3, r2
 8006802:	0019      	movs	r1, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	2210      	movs	r2, #16
 8006816:	4013      	ands	r3, r2
 8006818:	d00b      	beq.n	8006832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <UART_AdvFeatureConfig+0x154>)
 8006822:	4013      	ands	r3, r2
 8006824:	0019      	movs	r1, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2220      	movs	r2, #32
 8006838:	4013      	ands	r3, r2
 800683a:	d00b      	beq.n	8006854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	4a25      	ldr	r2, [pc, #148]	; (80068d8 <UART_AdvFeatureConfig+0x158>)
 8006844:	4013      	ands	r3, r2
 8006846:	0019      	movs	r1, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2240      	movs	r2, #64	; 0x40
 800685a:	4013      	ands	r3, r2
 800685c:	d01d      	beq.n	800689a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4a1d      	ldr	r2, [pc, #116]	; (80068dc <UART_AdvFeatureConfig+0x15c>)
 8006866:	4013      	ands	r3, r2
 8006868:	0019      	movs	r1, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800687a:	2380      	movs	r3, #128	; 0x80
 800687c:	035b      	lsls	r3, r3, #13
 800687e:	429a      	cmp	r2, r3
 8006880:	d10b      	bne.n	800689a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <UART_AdvFeatureConfig+0x160>)
 800688a:	4013      	ands	r3, r2
 800688c:	0019      	movs	r1, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	2280      	movs	r2, #128	; 0x80
 80068a0:	4013      	ands	r3, r2
 80068a2:	d00b      	beq.n	80068bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	4a0e      	ldr	r2, [pc, #56]	; (80068e4 <UART_AdvFeatureConfig+0x164>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	0019      	movs	r1, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }
}
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b002      	add	sp, #8
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	fffdffff 	.word	0xfffdffff
 80068c8:	fffeffff 	.word	0xfffeffff
 80068cc:	fffbffff 	.word	0xfffbffff
 80068d0:	ffff7fff 	.word	0xffff7fff
 80068d4:	ffffefff 	.word	0xffffefff
 80068d8:	ffffdfff 	.word	0xffffdfff
 80068dc:	ffefffff 	.word	0xffefffff
 80068e0:	ff9fffff 	.word	0xff9fffff
 80068e4:	fff7ffff 	.word	0xfff7ffff

080068e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b092      	sub	sp, #72	; 0x48
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2284      	movs	r2, #132	; 0x84
 80068f4:	2100      	movs	r1, #0
 80068f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068f8:	f7fd fe6e 	bl	80045d8 <HAL_GetTick>
 80068fc:	0003      	movs	r3, r0
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2208      	movs	r2, #8
 8006908:	4013      	ands	r3, r2
 800690a:	2b08      	cmp	r3, #8
 800690c:	d12c      	bne.n	8006968 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800690e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006910:	2280      	movs	r2, #128	; 0x80
 8006912:	0391      	lsls	r1, r2, #14
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4a46      	ldr	r2, [pc, #280]	; (8006a30 <UART_CheckIdleState+0x148>)
 8006918:	9200      	str	r2, [sp, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	f000 f88c 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 8006920:	1e03      	subs	r3, r0, #0
 8006922:	d021      	beq.n	8006968 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006924:	f3ef 8310 	mrs	r3, PRIMASK
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38
 800692e:	2301      	movs	r3, #1
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	f383 8810 	msr	PRIMASK, r3
}
 8006938:	46c0      	nop			; (mov r8, r8)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2180      	movs	r1, #128	; 0x80
 8006946:	438a      	bics	r2, r1
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	f383 8810 	msr	PRIMASK, r3
}
 8006954:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2278      	movs	r2, #120	; 0x78
 8006960:	2100      	movs	r1, #0
 8006962:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e05f      	b.n	8006a28 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2204      	movs	r2, #4
 8006970:	4013      	ands	r3, r2
 8006972:	2b04      	cmp	r3, #4
 8006974:	d146      	bne.n	8006a04 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006978:	2280      	movs	r2, #128	; 0x80
 800697a:	03d1      	lsls	r1, r2, #15
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4a2c      	ldr	r2, [pc, #176]	; (8006a30 <UART_CheckIdleState+0x148>)
 8006980:	9200      	str	r2, [sp, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	f000 f858 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 8006988:	1e03      	subs	r3, r0, #0
 800698a:	d03b      	beq.n	8006a04 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800698c:	f3ef 8310 	mrs	r3, PRIMASK
 8006990:	60fb      	str	r3, [r7, #12]
  return(result);
 8006992:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006994:	637b      	str	r3, [r7, #52]	; 0x34
 8006996:	2301      	movs	r3, #1
 8006998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f383 8810 	msr	PRIMASK, r3
}
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4921      	ldr	r1, [pc, #132]	; (8006a34 <UART_CheckIdleState+0x14c>)
 80069ae:	400a      	ands	r2, r1
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f383 8810 	msr	PRIMASK, r3
}
 80069bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069be:	f3ef 8310 	mrs	r3, PRIMASK
 80069c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80069c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30
 80069c8:	2301      	movs	r3, #1
 80069ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f383 8810 	msr	PRIMASK, r3
}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2101      	movs	r1, #1
 80069e0:	438a      	bics	r2, r1
 80069e2:	609a      	str	r2, [r3, #8]
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	f383 8810 	msr	PRIMASK, r3
}
 80069ee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2280      	movs	r2, #128	; 0x80
 80069f4:	2120      	movs	r1, #32
 80069f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2278      	movs	r2, #120	; 0x78
 80069fc:	2100      	movs	r1, #0
 80069fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e011      	b.n	8006a28 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	2120      	movs	r1, #32
 8006a10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2278      	movs	r2, #120	; 0x78
 8006a22:	2100      	movs	r1, #0
 8006a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b010      	add	sp, #64	; 0x40
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	01ffffff 	.word	0x01ffffff
 8006a34:	fffffedf 	.word	0xfffffedf

08006a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	1dfb      	adds	r3, r7, #7
 8006a46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a48:	e04b      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	d048      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a50:	f7fd fdc2 	bl	80045d8 <HAL_GetTick>
 8006a54:	0002      	movs	r2, r0
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d302      	bcc.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e04b      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2204      	movs	r2, #4
 8006a72:	4013      	ands	r3, r2
 8006a74:	d035      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d111      	bne.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f000 f83c 	bl	8006b0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2284      	movs	r2, #132	; 0x84
 8006a98:	2108      	movs	r1, #8
 8006a9a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2278      	movs	r2, #120	; 0x78
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e02c      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d112      	bne.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2280      	movs	r2, #128	; 0x80
 8006ac2:	0112      	lsls	r2, r2, #4
 8006ac4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 f81f 	bl	8006b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2284      	movs	r2, #132	; 0x84
 8006ad2:	2120      	movs	r1, #32
 8006ad4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2278      	movs	r2, #120	; 0x78
 8006ada:	2100      	movs	r1, #0
 8006adc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e00f      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	4013      	ands	r3, r2
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	425a      	negs	r2, r3
 8006af2:	4153      	adcs	r3, r2
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	001a      	movs	r2, r3
 8006af8:	1dfb      	adds	r3, r7, #7
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d0a4      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b004      	add	sp, #16
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08e      	sub	sp, #56	; 0x38
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b14:	f3ef 8310 	mrs	r3, PRIMASK
 8006b18:	617b      	str	r3, [r7, #20]
  return(result);
 8006b1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1e:	2301      	movs	r3, #1
 8006b20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f383 8810 	msr	PRIMASK, r3
}
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4926      	ldr	r1, [pc, #152]	; (8006bd0 <UART_EndRxTransfer+0xc4>)
 8006b36:	400a      	ands	r2, r1
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	f383 8810 	msr	PRIMASK, r3
}
 8006b44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b46:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4a:	623b      	str	r3, [r7, #32]
  return(result);
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b50:	2301      	movs	r3, #1
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	f383 8810 	msr	PRIMASK, r3
}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2101      	movs	r1, #1
 8006b68:	438a      	bics	r2, r1
 8006b6a:	609a      	str	r2, [r3, #8]
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d118      	bne.n	8006bb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b80:	f3ef 8310 	mrs	r3, PRIMASK
 8006b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f383 8810 	msr	PRIMASK, r3
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2110      	movs	r1, #16
 8006ba2:	438a      	bics	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f383 8810 	msr	PRIMASK, r3
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2280      	movs	r2, #128	; 0x80
 8006bb6:	2120      	movs	r1, #32
 8006bb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b00e      	add	sp, #56	; 0x38
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	fffffedf 	.word	0xfffffedf

08006bd4 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006bdc:	240f      	movs	r4, #15
 8006bde:	193b      	adds	r3, r7, r4
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	7818      	ldrb	r0, [r3, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	785a      	ldrb	r2, [r3, #1]
 8006bf0:	789b      	ldrb	r3, [r3, #2]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b299      	uxth	r1, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	78db      	ldrb	r3, [r3, #3]
 8006bfc:	001a      	movs	r2, r3
 8006bfe:	f7fb fed1 	bl	80029a4 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8006c02:	193b      	adds	r3, r7, r4
 8006c04:	781b      	ldrb	r3, [r3, #0]
}
 8006c06:	0018      	movs	r0, r3
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b005      	add	sp, #20
 8006c0c:	bd90      	pop	{r4, r7, pc}

08006c0e <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006c0e:	b590      	push	{r4, r7, lr}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c16:	240f      	movs	r4, #15
 8006c18:	193b      	adds	r3, r7, r4
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	7818      	ldrb	r0, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	785a      	ldrb	r2, [r3, #1]
 8006c2a:	789b      	ldrb	r3, [r3, #2]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b299      	uxth	r1, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	78db      	ldrb	r3, [r3, #3]
 8006c36:	001a      	movs	r2, r3
 8006c38:	f001 fa0a 	bl	8008050 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8006c3c:	193b      	adds	r3, r7, r4
 8006c3e:	781b      	ldrb	r3, [r3, #0]
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b005      	add	sp, #20
 8006c46:	bd90      	pop	{r4, r7, pc}

08006c48 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006c50:	260f      	movs	r6, #15
 8006c52:	19bb      	adds	r3, r7, r6
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	7818      	ldrb	r0, [r3, #0]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	785a      	ldrb	r2, [r3, #1]
 8006c64:	789b      	ldrb	r3, [r3, #2]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	b299      	uxth	r1, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	78dc      	ldrb	r4, [r3, #3]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	791a      	ldrb	r2, [r3, #4]
 8006c74:	795b      	ldrb	r3, [r3, #5]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	b29d      	uxth	r5, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	799a      	ldrb	r2, [r3, #6]
 8006c80:	79db      	ldrb	r3, [r3, #7]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	002b      	movs	r3, r5
 8006c8c:	0022      	movs	r2, r4
 8006c8e:	f001 f9f2 	bl	8008076 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8006c92:	19bb      	adds	r3, r7, r6
 8006c94:	781b      	ldrb	r3, [r3, #0]
}
 8006c96:	0018      	movs	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	b005      	add	sp, #20
 8006c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c9e <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8006c9e:	b590      	push	{r4, r7, lr}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006ca6:	240f      	movs	r4, #15
 8006ca8:	193b      	adds	r3, r7, r4
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f001 f9f4 	bl	80080a4 <hci_hardware_error_event>

  return status;
 8006cbc:	193b      	adds	r3, r7, r4
 8006cbe:	781b      	ldrb	r3, [r3, #0]
}
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b005      	add	sp, #20
 8006cc6:	bd90      	pop	{r4, r7, pc}

08006cc8 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8006cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cca:	b0a7      	sub	sp, #156	; 0x9c
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006cd0:	238f      	movs	r3, #143	; 0x8f
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2288      	movs	r2, #136	; 0x88
 8006cdc:	18ba      	adds	r2, r7, r2
 8006cde:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 8006ce0:	2397      	movs	r3, #151	; 0x97
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2290      	movs	r2, #144	; 0x90
 8006cec:	18ba      	adds	r2, r7, r2
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	e037      	b.n	8006d62 <hci_number_of_completed_packets_event_process+0x9a>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006cf2:	2588      	movs	r5, #136	; 0x88
 8006cf4:	197b      	adds	r3, r7, r5
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	2090      	movs	r0, #144	; 0x90
 8006cfa:	183b      	adds	r3, r7, r0
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	18d1      	adds	r1, r2, r3
 8006d02:	7849      	ldrb	r1, [r1, #1]
 8006d04:	18d3      	adds	r3, r2, r3
 8006d06:	789b      	ldrb	r3, [r3, #2]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	b299      	uxth	r1, r3
 8006d0e:	2608      	movs	r6, #8
 8006d10:	19bb      	adds	r3, r7, r6
 8006d12:	183a      	adds	r2, r7, r0
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	0092      	lsls	r2, r2, #2
 8006d18:	52d1      	strh	r1, [r2, r3]
    size += 2;
 8006d1a:	2497      	movs	r4, #151	; 0x97
 8006d1c:	193b      	adds	r3, r7, r4
 8006d1e:	193a      	adds	r2, r7, r4
 8006d20:	7812      	ldrb	r2, [r2, #0]
 8006d22:	3202      	adds	r2, #2
 8006d24:	701a      	strb	r2, [r3, #0]
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8006d26:	197b      	adds	r3, r7, r5
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	183b      	adds	r3, r7, r0
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	18d1      	adds	r1, r2, r3
 8006d32:	78c9      	ldrb	r1, [r1, #3]
 8006d34:	18d3      	adds	r3, r2, r3
 8006d36:	791b      	ldrb	r3, [r3, #4]
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	b299      	uxth	r1, r3
 8006d3e:	19ba      	adds	r2, r7, r6
 8006d40:	183b      	adds	r3, r7, r0
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	18d3      	adds	r3, r2, r3
 8006d48:	3302      	adds	r3, #2
 8006d4a:	1c0a      	adds	r2, r1, #0
 8006d4c:	801a      	strh	r2, [r3, #0]
    size += 2;
 8006d4e:	193b      	adds	r3, r7, r4
 8006d50:	193a      	adds	r2, r7, r4
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	3202      	adds	r2, #2
 8006d56:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006d58:	183b      	adds	r3, r7, r0
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	183a      	adds	r2, r7, r0
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	2188      	movs	r1, #136	; 0x88
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	001a      	movs	r2, r3
 8006d6c:	2390      	movs	r3, #144	; 0x90
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4293      	cmp	r3, r2
 8006d74:	dbbd      	blt.n	8006cf2 <hci_number_of_completed_packets_event_process+0x2a>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8006d76:	187b      	adds	r3, r7, r1
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	18ba      	adds	r2, r7, r2
 8006d80:	0011      	movs	r1, r2
 8006d82:	0018      	movs	r0, r3
 8006d84:	f001 f998 	bl	80080b8 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8006d88:	238f      	movs	r3, #143	; 0x8f
 8006d8a:	18fb      	adds	r3, r7, r3
 8006d8c:	781b      	ldrb	r3, [r3, #0]
}
 8006d8e:	0018      	movs	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	b027      	add	sp, #156	; 0x9c
 8006d94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d96 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8006d96:	b590      	push	{r4, r7, lr}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006d9e:	240f      	movs	r4, #15
 8006da0:	193b      	adds	r3, r7, r4
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	0018      	movs	r0, r3
 8006db0:	f001 f98d 	bl	80080ce <hci_data_buffer_overflow_event>

  return status;
 8006db4:	193b      	adds	r3, r7, r4
 8006db6:	781b      	ldrb	r3, [r3, #0]
}
 8006db8:	0018      	movs	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b005      	add	sp, #20
 8006dbe:	bd90      	pop	{r4, r7, pc}

08006dc0 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8006dc0:	b590      	push	{r4, r7, lr}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dc8:	240f      	movs	r4, #15
 8006dca:	193b      	adds	r3, r7, r4
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	7818      	ldrb	r0, [r3, #0]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	785a      	ldrb	r2, [r3, #1]
 8006ddc:	789b      	ldrb	r3, [r3, #2]
 8006dde:	021b      	lsls	r3, r3, #8
 8006de0:	4313      	orrs	r3, r2
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	0019      	movs	r1, r3
 8006de6:	f001 f97c 	bl	80080e2 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8006dea:	193b      	adds	r3, r7, r4
 8006dec:	781b      	ldrb	r3, [r3, #0]
}
 8006dee:	0018      	movs	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b005      	add	sp, #20
 8006df4:	bd90      	pop	{r4, r7, pc}

08006df6 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8006df6:	b590      	push	{r4, r7, lr}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006dfe:	240f      	movs	r4, #15
 8006e00:	193b      	adds	r3, r7, r4
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f001 fc02 	bl	8008618 <aci_blue_initialized_event>

  return status;
 8006e14:	193b      	adds	r3, r7, r4
 8006e16:	781b      	ldrb	r3, [r3, #0]
}
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b005      	add	sp, #20
 8006e1e:	bd90      	pop	{r4, r7, pc}

08006e20 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e28:	240f      	movs	r4, #15
 8006e2a:	193b      	adds	r3, r7, r4
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	0018      	movs	r0, r3
 8006e38:	f001 fbf8 	bl	800862c <aci_blue_events_lost_event>

  return status;
 8006e3c:	193b      	adds	r3, r7, r4
 8006e3e:	781b      	ldrb	r3, [r3, #0]
}
 8006e40:	0018      	movs	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b005      	add	sp, #20
 8006e46:	bd90      	pop	{r4, r7, pc}

08006e48 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	46de      	mov	lr, fp
 8006e4c:	4657      	mov	r7, sl
 8006e4e:	464e      	mov	r6, r9
 8006e50:	4645      	mov	r5, r8
 8006e52:	b5e0      	push	{r5, r6, r7, lr}
 8006e54:	b08d      	sub	sp, #52	; 0x34
 8006e56:	af08      	add	r7, sp, #32
 8006e58:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006e5a:	230f      	movs	r3, #15
 8006e5c:	18fb      	adds	r3, r7, r3
 8006e5e:	2200      	movs	r2, #0
 8006e60:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	7818      	ldrb	r0, [r3, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	785a      	ldrb	r2, [r3, #1]
 8006e6e:	7899      	ldrb	r1, [r3, #2]
 8006e70:	0209      	lsls	r1, r1, #8
 8006e72:	430a      	orrs	r2, r1
 8006e74:	78d9      	ldrb	r1, [r3, #3]
 8006e76:	0409      	lsls	r1, r1, #16
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	791b      	ldrb	r3, [r3, #4]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	4699      	mov	r9, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	795a      	ldrb	r2, [r3, #5]
 8006e86:	7999      	ldrb	r1, [r3, #6]
 8006e88:	0209      	lsls	r1, r1, #8
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	79d9      	ldrb	r1, [r3, #7]
 8006e8e:	0409      	lsls	r1, r1, #16
 8006e90:	430a      	orrs	r2, r1
 8006e92:	7a1b      	ldrb	r3, [r3, #8]
 8006e94:	061b      	lsls	r3, r3, #24
 8006e96:	4313      	orrs	r3, r2
 8006e98:	469a      	mov	sl, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	7a5a      	ldrb	r2, [r3, #9]
 8006e9e:	7a99      	ldrb	r1, [r3, #10]
 8006ea0:	0209      	lsls	r1, r1, #8
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	7ad9      	ldrb	r1, [r3, #11]
 8006ea6:	0409      	lsls	r1, r1, #16
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	7b1b      	ldrb	r3, [r3, #12]
 8006eac:	061b      	lsls	r3, r3, #24
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	469b      	mov	fp, r3
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	7b5a      	ldrb	r2, [r3, #13]
 8006eb6:	7b99      	ldrb	r1, [r3, #14]
 8006eb8:	0209      	lsls	r1, r1, #8
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	7bd9      	ldrb	r1, [r3, #15]
 8006ebe:	0409      	lsls	r1, r1, #16
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	7c1b      	ldrb	r3, [r3, #16]
 8006ec4:	061b      	lsls	r3, r3, #24
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	001c      	movs	r4, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	7c5a      	ldrb	r2, [r3, #17]
 8006ece:	7c99      	ldrb	r1, [r3, #18]
 8006ed0:	0209      	lsls	r1, r1, #8
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	7cd9      	ldrb	r1, [r3, #19]
 8006ed6:	0409      	lsls	r1, r1, #16
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	7d1b      	ldrb	r3, [r3, #20]
 8006edc:	061b      	lsls	r3, r3, #24
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	001d      	movs	r5, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	7d5a      	ldrb	r2, [r3, #21]
 8006ee6:	7d99      	ldrb	r1, [r3, #22]
 8006ee8:	0209      	lsls	r1, r1, #8
 8006eea:	430a      	orrs	r2, r1
 8006eec:	7dd9      	ldrb	r1, [r3, #23]
 8006eee:	0409      	lsls	r1, r1, #16
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	7e1b      	ldrb	r3, [r3, #24]
 8006ef4:	061b      	lsls	r3, r3, #24
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	001e      	movs	r6, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	7e5a      	ldrb	r2, [r3, #25]
 8006efe:	7e99      	ldrb	r1, [r3, #26]
 8006f00:	0209      	lsls	r1, r1, #8
 8006f02:	430a      	orrs	r2, r1
 8006f04:	7ed9      	ldrb	r1, [r3, #27]
 8006f06:	0409      	lsls	r1, r1, #16
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	7f1b      	ldrb	r3, [r3, #28]
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	469c      	mov	ip, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	7f5a      	ldrb	r2, [r3, #29]
 8006f16:	7f99      	ldrb	r1, [r3, #30]
 8006f18:	0209      	lsls	r1, r1, #8
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	7fd9      	ldrb	r1, [r3, #31]
 8006f1e:	0409      	lsls	r1, r1, #16
 8006f20:	430a      	orrs	r2, r1
 8006f22:	2120      	movs	r1, #32
 8006f24:	5c5b      	ldrb	r3, [r3, r1]
 8006f26:	061b      	lsls	r3, r3, #24
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	4698      	mov	r8, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2221      	movs	r2, #33	; 0x21
 8006f30:	5c9a      	ldrb	r2, [r3, r2]
 8006f32:	2122      	movs	r1, #34	; 0x22
 8006f34:	5c59      	ldrb	r1, [r3, r1]
 8006f36:	0209      	lsls	r1, r1, #8
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	2123      	movs	r1, #35	; 0x23
 8006f3c:	5c59      	ldrb	r1, [r3, r1]
 8006f3e:	0409      	lsls	r1, r1, #16
 8006f40:	430a      	orrs	r2, r1
 8006f42:	2124      	movs	r1, #36	; 0x24
 8006f44:	5c5b      	ldrb	r3, [r3, r1]
 8006f46:	061b      	lsls	r3, r3, #24
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2225      	movs	r2, #37	; 0x25
 8006f50:	5c9b      	ldrb	r3, [r3, r2]
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	3226      	adds	r2, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8006f56:	9207      	str	r2, [sp, #28]
 8006f58:	9306      	str	r3, [sp, #24]
 8006f5a:	9105      	str	r1, [sp, #20]
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	9204      	str	r2, [sp, #16]
 8006f60:	4662      	mov	r2, ip
 8006f62:	9203      	str	r2, [sp, #12]
 8006f64:	9602      	str	r6, [sp, #8]
 8006f66:	9501      	str	r5, [sp, #4]
 8006f68:	9400      	str	r4, [sp, #0]
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	4652      	mov	r2, sl
 8006f6e:	4649      	mov	r1, r9
 8006f70:	f001 fb64 	bl	800863c <aci_blue_crash_info_event>

  return status;
 8006f74:	230f      	movs	r3, #15
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	781b      	ldrb	r3, [r3, #0]
}
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	b005      	add	sp, #20
 8006f80:	bcf0      	pop	{r4, r5, r6, r7}
 8006f82:	46bb      	mov	fp, r7
 8006f84:	46b2      	mov	sl, r6
 8006f86:	46a9      	mov	r9, r5
 8006f88:	46a0      	mov	r8, r4
 8006f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f8c <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006f8c:	b5b0      	push	{r4, r5, r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006f94:	250f      	movs	r5, #15
 8006f96:	197b      	adds	r3, r7, r5
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	7818      	ldrb	r0, [r3, #0]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	785c      	ldrb	r4, [r3, #1]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	789a      	ldrb	r2, [r3, #2]
 8006fac:	78d9      	ldrb	r1, [r3, #3]
 8006fae:	0209      	lsls	r1, r1, #8
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	7919      	ldrb	r1, [r3, #4]
 8006fb4:	0409      	lsls	r1, r1, #16
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	795b      	ldrb	r3, [r3, #5]
 8006fba:	061b      	lsls	r3, r3, #24
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	001a      	movs	r2, r3
 8006fc0:	0021      	movs	r1, r4
 8006fc2:	f001 fb49 	bl	8008658 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8006fc6:	197b      	adds	r3, r7, r5
 8006fc8:	781b      	ldrb	r3, [r3, #0]
}
 8006fca:	0018      	movs	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b004      	add	sp, #16
 8006fd0:	bdb0      	pop	{r4, r5, r7, pc}

08006fd2 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006fd2:	b590      	push	{r4, r7, lr}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006fda:	240f      	movs	r4, #15
 8006fdc:	193b      	adds	r3, r7, r4
 8006fde:	2200      	movs	r2, #0
 8006fe0:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2000      	movs	r0, #0
 8006fea:	5618      	ldrsb	r0, [r3, r0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	f001 fb3d 	bl	8008674 <aci_hal_scan_req_report_event>

  return status;
 8006ffa:	193b      	adds	r3, r7, r4
 8006ffc:	781b      	ldrb	r3, [r3, #0]
}
 8006ffe:	0018      	movs	r0, r3
 8007000:	46bd      	mov	sp, r7
 8007002:	b005      	add	sp, #20
 8007004:	bd90      	pop	{r4, r7, pc}

08007006 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8007006:	b590      	push	{r4, r7, lr}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800700e:	240f      	movs	r4, #15
 8007010:	193b      	adds	r3, r7, r4
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	7818      	ldrb	r0, [r3, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8007026:	001a      	movs	r2, r3
 8007028:	f001 fb32 	bl	8008690 <aci_hal_fw_error_event>

  return status;
 800702c:	193b      	adds	r3, r7, r4
 800702e:	781b      	ldrb	r3, [r3, #0]
}
 8007030:	0018      	movs	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	b005      	add	sp, #20
 8007036:	bd90      	pop	{r4, r7, pc}

08007038 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007040:	240f      	movs	r4, #15
 8007042:	193b      	adds	r3, r7, r4
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
  aci_gap_limited_discoverable_event();
 8007048:	f001 f8e6 	bl	8008218 <aci_gap_limited_discoverable_event>

  return status;
 800704c:	193b      	adds	r3, r7, r4
 800704e:	781b      	ldrb	r3, [r3, #0]
}
 8007050:	0018      	movs	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	b005      	add	sp, #20
 8007056:	bd90      	pop	{r4, r7, pc}

08007058 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007060:	240f      	movs	r4, #15
 8007062:	193b      	adds	r3, r7, r4
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	4313      	orrs	r3, r2
 8007076:	b298      	uxth	r0, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	7899      	ldrb	r1, [r3, #2]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	78db      	ldrb	r3, [r3, #3]
 8007080:	001a      	movs	r2, r3
 8007082:	f7fb fd17 	bl	8002ab4 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8007086:	193b      	adds	r3, r7, r4
 8007088:	781b      	ldrb	r3, [r3, #0]
}
 800708a:	0018      	movs	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	b005      	add	sp, #20
 8007090:	bd90      	pop	{r4, r7, pc}

08007092 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8007092:	b590      	push	{r4, r7, lr}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800709a:	240f      	movs	r4, #15
 800709c:	193b      	adds	r3, r7, r4
 800709e:	2200      	movs	r2, #0
 80070a0:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	781a      	ldrb	r2, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	4313      	orrs	r3, r2
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	0018      	movs	r0, r3
 80070b4:	f7fb fce4 	bl	8002a80 <aci_gap_pass_key_req_event>

  return status;
 80070b8:	193b      	adds	r3, r7, r4
 80070ba:	781b      	ldrb	r3, [r3, #0]
}
 80070bc:	0018      	movs	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	b005      	add	sp, #20
 80070c2:	bd90      	pop	{r4, r7, pc}

080070c4 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070cc:	240f      	movs	r4, #15
 80070ce:	193b      	adds	r3, r7, r4
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	781a      	ldrb	r2, [r3, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	4313      	orrs	r3, r2
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	0018      	movs	r0, r3
 80070e6:	f001 f89c 	bl	8008222 <aci_gap_authorization_req_event>

  return status;
 80070ea:	193b      	adds	r3, r7, r4
 80070ec:	781b      	ldrb	r3, [r3, #0]
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b005      	add	sp, #20
 80070f4:	bd90      	pop	{r4, r7, pc}

080070f6 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80070f6:	b590      	push	{r4, r7, lr}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070fe:	240f      	movs	r4, #15
 8007100:	193b      	adds	r3, r7, r4
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
  aci_gap_slave_security_initiated_event();
 8007106:	f001 f896 	bl	8008236 <aci_gap_slave_security_initiated_event>

  return status;
 800710a:	193b      	adds	r3, r7, r4
 800710c:	781b      	ldrb	r3, [r3, #0]
}
 800710e:	0018      	movs	r0, r3
 8007110:	46bd      	mov	sp, r7
 8007112:	b005      	add	sp, #20
 8007114:	bd90      	pop	{r4, r7, pc}

08007116 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8007116:	b590      	push	{r4, r7, lr}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800711e:	240f      	movs	r4, #15
 8007120:	193b      	adds	r3, r7, r4
 8007122:	2200      	movs	r2, #0
 8007124:	701a      	strb	r2, [r3, #0]
  aci_gap_bond_lost_event();
 8007126:	f001 f88b 	bl	8008240 <aci_gap_bond_lost_event>

  return status;
 800712a:	193b      	adds	r3, r7, r4
 800712c:	781b      	ldrb	r3, [r3, #0]
}
 800712e:	0018      	movs	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	b005      	add	sp, #20
 8007134:	bd90      	pop	{r4, r7, pc}

08007136 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8007136:	b590      	push	{r4, r7, lr}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800713e:	240f      	movs	r4, #15
 8007140:	193b      	adds	r3, r7, r4
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	7818      	ldrb	r0, [r3, #0]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	7859      	ldrb	r1, [r3, #1]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800715a:	f001 f876 	bl	800824a <aci_gap_proc_complete_event>

  return status;
 800715e:	193b      	adds	r3, r7, r4
 8007160:	781b      	ldrb	r3, [r3, #0]
}
 8007162:	0018      	movs	r0, r3
 8007164:	46bd      	mov	sp, r7
 8007166:	b005      	add	sp, #20
 8007168:	bd90      	pop	{r4, r7, pc}

0800716a <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800716a:	b590      	push	{r4, r7, lr}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007172:	240f      	movs	r4, #15
 8007174:	193b      	adds	r3, r7, r4
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	4313      	orrs	r3, r2
 8007188:	b29b      	uxth	r3, r3
 800718a:	0018      	movs	r0, r3
 800718c:	f001 f871 	bl	8008272 <aci_gap_addr_not_resolved_event>

  return status;
 8007190:	193b      	adds	r3, r7, r4
 8007192:	781b      	ldrb	r3, [r3, #0]
}
 8007194:	0018      	movs	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	b005      	add	sp, #20
 800719a:	bd90      	pop	{r4, r7, pc}

0800719c <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071a4:	240f      	movs	r4, #15
 80071a6:	193b      	adds	r3, r7, r4
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	4313      	orrs	r3, r2
 80071ba:	b298      	uxth	r0, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	789a      	ldrb	r2, [r3, #2]
 80071c0:	78d9      	ldrb	r1, [r3, #3]
 80071c2:	0209      	lsls	r1, r1, #8
 80071c4:	430a      	orrs	r2, r1
 80071c6:	7919      	ldrb	r1, [r3, #4]
 80071c8:	0409      	lsls	r1, r1, #16
 80071ca:	430a      	orrs	r2, r1
 80071cc:	795b      	ldrb	r3, [r3, #5]
 80071ce:	061b      	lsls	r3, r3, #24
 80071d0:	4313      	orrs	r3, r2
 80071d2:	0019      	movs	r1, r3
 80071d4:	f001 f857 	bl	8008286 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 80071d8:	193b      	adds	r3, r7, r4
 80071da:	781b      	ldrb	r3, [r3, #0]
}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b005      	add	sp, #20
 80071e2:	bd90      	pop	{r4, r7, pc}

080071e4 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071ec:	240f      	movs	r4, #15
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	4313      	orrs	r3, r2
 8007202:	b29a      	uxth	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	789b      	ldrb	r3, [r3, #2]
 8007208:	0019      	movs	r1, r3
 800720a:	0010      	movs	r0, r2
 800720c:	f001 f846 	bl	800829c <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8007210:	193b      	adds	r3, r7, r4
 8007212:	781b      	ldrb	r3, [r3, #0]
}
 8007214:	0018      	movs	r0, r3
 8007216:	46bd      	mov	sp, r7
 8007218:	b005      	add	sp, #20
 800721a:	bd90      	pop	{r4, r7, pc}

0800721c <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007224:	240f      	movs	r4, #15
 8007226:	193b      	adds	r3, r7, r4
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	4313      	orrs	r3, r2
 800723a:	b298      	uxth	r0, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	789a      	ldrb	r2, [r3, #2]
 8007240:	78db      	ldrb	r3, [r3, #3]
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	4313      	orrs	r3, r2
 8007246:	b29b      	uxth	r3, r3
 8007248:	0019      	movs	r1, r3
 800724a:	f001 f99c 	bl	8008586 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800724e:	193b      	adds	r3, r7, r4
 8007250:	781b      	ldrb	r3, [r3, #0]
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b005      	add	sp, #20
 8007258:	bd90      	pop	{r4, r7, pc}

0800725a <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800725a:	b590      	push	{r4, r7, lr}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007262:	240f      	movs	r4, #15
 8007264:	193b      	adds	r3, r7, r4
 8007266:	2200      	movs	r2, #0
 8007268:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	4313      	orrs	r3, r2
 8007278:	b298      	uxth	r0, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8007282:	001a      	movs	r2, r3
 8007284:	f001 f98c 	bl	80085a0 <aci_l2cap_proc_timeout_event>

  return status;
 8007288:	193b      	adds	r3, r7, r4
 800728a:	781b      	ldrb	r3, [r3, #0]
}
 800728c:	0018      	movs	r0, r3
 800728e:	46bd      	mov	sp, r7
 8007290:	b005      	add	sp, #20
 8007292:	bd90      	pop	{r4, r7, pc}

08007294 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8007294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007296:	b089      	sub	sp, #36	; 0x24
 8007298:	af04      	add	r7, sp, #16
 800729a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800729c:	230f      	movs	r3, #15
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	4313      	orrs	r3, r2
 80072b2:	b29c      	uxth	r4, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	789d      	ldrb	r5, [r3, #2]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	78da      	ldrb	r2, [r3, #3]
 80072bc:	791b      	ldrb	r3, [r3, #4]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	4313      	orrs	r3, r2
 80072c2:	b29e      	uxth	r6, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	795a      	ldrb	r2, [r3, #5]
 80072c8:	799b      	ldrb	r3, [r3, #6]
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	4313      	orrs	r3, r2
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	4694      	mov	ip, r2
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	79da      	ldrb	r2, [r3, #7]
 80072d6:	7a1b      	ldrb	r3, [r3, #8]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	4313      	orrs	r3, r2
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	7a59      	ldrb	r1, [r3, #9]
 80072e2:	7a9b      	ldrb	r3, [r3, #10]
 80072e4:	021b      	lsls	r3, r3, #8
 80072e6:	430b      	orrs	r3, r1
 80072e8:	b299      	uxth	r1, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	7ad8      	ldrb	r0, [r3, #11]
 80072ee:	7b1b      	ldrb	r3, [r3, #12]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	4303      	orrs	r3, r0
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	9101      	str	r1, [sp, #4]
 80072fa:	9200      	str	r2, [sp, #0]
 80072fc:	4663      	mov	r3, ip
 80072fe:	0032      	movs	r2, r6
 8007300:	0029      	movs	r1, r5
 8007302:	0020      	movs	r0, r4
 8007304:	f001 f95a 	bl	80085bc <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8007308:	230f      	movs	r3, #15
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	781b      	ldrb	r3, [r3, #0]
}
 800730e:	0018      	movs	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	b005      	add	sp, #20
 8007314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007316 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8007316:	b5b0      	push	{r4, r5, r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af02      	add	r7, sp, #8
 800731c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800731e:	250f      	movs	r5, #15
 8007320:	197b      	adds	r3, r7, r5
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	4313      	orrs	r3, r2
 8007334:	b298      	uxth	r0, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	7899      	ldrb	r1, [r3, #2]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	78da      	ldrb	r2, [r3, #3]
 800733e:	791b      	ldrb	r3, [r3, #4]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	4313      	orrs	r3, r2
 8007344:	b29a      	uxth	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	0023      	movs	r3, r4
 8007352:	f001 f94a 	bl	80085ea <aci_l2cap_command_reject_event>

  return status;
 8007356:	197b      	adds	r3, r7, r5
 8007358:	781b      	ldrb	r3, [r3, #0]
}
 800735a:	0018      	movs	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	b004      	add	sp, #16
 8007360:	bdb0      	pop	{r4, r5, r7, pc}

08007362 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8007362:	b5b0      	push	{r4, r5, r7, lr}
 8007364:	b086      	sub	sp, #24
 8007366:	af02      	add	r7, sp, #8
 8007368:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800736a:	250f      	movs	r5, #15
 800736c:	197b      	adds	r3, r7, r5
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	4313      	orrs	r3, r2
 8007380:	b298      	uxth	r0, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	789a      	ldrb	r2, [r3, #2]
 8007386:	78db      	ldrb	r3, [r3, #3]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	4313      	orrs	r3, r2
 800738c:	b299      	uxth	r1, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	791a      	ldrb	r2, [r3, #4]
 8007392:	795b      	ldrb	r3, [r3, #5]
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	4313      	orrs	r3, r2
 8007398:	b29c      	uxth	r4, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	799a      	ldrb	r2, [r3, #6]
 800739e:	79db      	ldrb	r3, [r3, #7]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b29a      	uxth	r2, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	0013      	movs	r3, r2
 80073ae:	0022      	movs	r2, r4
 80073b0:	f7fb fb40 	bl	8002a34 <aci_gatt_attribute_modified_event>

  return status;
 80073b4:	197b      	adds	r3, r7, r5
 80073b6:	781b      	ldrb	r3, [r3, #0]
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b004      	add	sp, #16
 80073be:	bdb0      	pop	{r4, r5, r7, pc}

080073c0 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073c8:	240f      	movs	r4, #15
 80073ca:	193b      	adds	r3, r7, r4
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	781a      	ldrb	r2, [r3, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	4313      	orrs	r3, r2
 80073de:	b29b      	uxth	r3, r3
 80073e0:	0018      	movs	r0, r3
 80073e2:	f000 ff68 	bl	80082b6 <aci_gatt_proc_timeout_event>

  return status;
 80073e6:	193b      	adds	r3, r7, r4
 80073e8:	781b      	ldrb	r3, [r3, #0]
}
 80073ea:	0018      	movs	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b005      	add	sp, #20
 80073f0:	bd90      	pop	{r4, r7, pc}

080073f2 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 80073f2:	b590      	push	{r4, r7, lr}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073fa:	240f      	movs	r4, #15
 80073fc:	193b      	adds	r3, r7, r4
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	4313      	orrs	r3, r2
 8007410:	b298      	uxth	r0, r3
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	789a      	ldrb	r2, [r3, #2]
 8007416:	78db      	ldrb	r3, [r3, #3]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	4313      	orrs	r3, r2
 800741c:	b29b      	uxth	r3, r3
 800741e:	0019      	movs	r1, r3
 8007420:	f000 ff53 	bl	80082ca <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8007424:	193b      	adds	r3, r7, r4
 8007426:	781b      	ldrb	r3, [r3, #0]
}
 8007428:	0018      	movs	r0, r3
 800742a:	46bd      	mov	sp, r7
 800742c:	b005      	add	sp, #20
 800742e:	bd90      	pop	{r4, r7, pc}

08007430 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8007430:	b590      	push	{r4, r7, lr}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007438:	240f      	movs	r4, #15
 800743a:	193b      	adds	r3, r7, r4
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	781a      	ldrb	r2, [r3, #0]
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	4313      	orrs	r3, r2
 800744e:	b298      	uxth	r0, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	7899      	ldrb	r1, [r3, #2]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800745c:	f000 ff42 	bl	80082e4 <aci_att_find_info_resp_event>

  return status;
 8007460:	193b      	adds	r3, r7, r4
 8007462:	781b      	ldrb	r3, [r3, #0]
}
 8007464:	0018      	movs	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	b005      	add	sp, #20
 800746a:	bd90      	pop	{r4, r7, pc}

0800746c <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746e:	b0a7      	sub	sp, #156	; 0x9c
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007474:	238f      	movs	r3, #143	; 0x8f
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2288      	movs	r2, #136	; 0x88
 8007480:	18ba      	adds	r2, r7, r2
 8007482:	6013      	str	r3, [r2, #0]
  uint8_t size = 3;
 8007484:	2397      	movs	r3, #151	; 0x97
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	2203      	movs	r2, #3
 800748a:	701a      	strb	r2, [r3, #0]
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800748c:	2300      	movs	r3, #0
 800748e:	2290      	movs	r2, #144	; 0x90
 8007490:	18ba      	adds	r2, r7, r2
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	e037      	b.n	8007506 <aci_att_find_by_type_value_resp_event_process+0x9a>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8007496:	2588      	movs	r5, #136	; 0x88
 8007498:	197b      	adds	r3, r7, r5
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	2090      	movs	r0, #144	; 0x90
 800749e:	183b      	adds	r3, r7, r0
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	18d1      	adds	r1, r2, r3
 80074a6:	78c9      	ldrb	r1, [r1, #3]
 80074a8:	18d3      	adds	r3, r2, r3
 80074aa:	791b      	ldrb	r3, [r3, #4]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	430b      	orrs	r3, r1
 80074b0:	b299      	uxth	r1, r3
 80074b2:	2608      	movs	r6, #8
 80074b4:	19bb      	adds	r3, r7, r6
 80074b6:	183a      	adds	r2, r7, r0
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	0092      	lsls	r2, r2, #2
 80074bc:	52d1      	strh	r1, [r2, r3]
    size += 2;
 80074be:	2497      	movs	r4, #151	; 0x97
 80074c0:	193b      	adds	r3, r7, r4
 80074c2:	193a      	adds	r2, r7, r4
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	3202      	adds	r2, #2
 80074c8:	701a      	strb	r2, [r3, #0]
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 80074ca:	197b      	adds	r3, r7, r5
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	183b      	adds	r3, r7, r0
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	18d1      	adds	r1, r2, r3
 80074d6:	7949      	ldrb	r1, [r1, #5]
 80074d8:	18d3      	adds	r3, r2, r3
 80074da:	799b      	ldrb	r3, [r3, #6]
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	430b      	orrs	r3, r1
 80074e0:	b299      	uxth	r1, r3
 80074e2:	19ba      	adds	r2, r7, r6
 80074e4:	183b      	adds	r3, r7, r0
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	18d3      	adds	r3, r2, r3
 80074ec:	3302      	adds	r3, #2
 80074ee:	1c0a      	adds	r2, r1, #0
 80074f0:	801a      	strh	r2, [r3, #0]
    size += 2;
 80074f2:	193b      	adds	r3, r7, r4
 80074f4:	193a      	adds	r2, r7, r4
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	3202      	adds	r2, #2
 80074fa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80074fc:	183b      	adds	r3, r7, r0
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	183a      	adds	r2, r7, r0
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	2188      	movs	r1, #136	; 0x88
 8007508:	187b      	adds	r3, r7, r1
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	789b      	ldrb	r3, [r3, #2]
 800750e:	001a      	movs	r2, r3
 8007510:	2390      	movs	r3, #144	; 0x90
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4293      	cmp	r3, r2
 8007518:	dbbd      	blt.n	8007496 <aci_att_find_by_type_value_resp_event_process+0x2a>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800751a:	187b      	adds	r3, r7, r1
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	781a      	ldrb	r2, [r3, #0]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	4313      	orrs	r3, r2
 8007526:	b298      	uxth	r0, r3
 8007528:	187b      	adds	r3, r7, r1
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	789b      	ldrb	r3, [r3, #2]
 800752e:	2208      	movs	r2, #8
 8007530:	18ba      	adds	r2, r7, r2
 8007532:	0019      	movs	r1, r3
 8007534:	f000 feea 	bl	800830c <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8007538:	238f      	movs	r3, #143	; 0x8f
 800753a:	18fb      	adds	r3, r7, r3
 800753c:	781b      	ldrb	r3, [r3, #0]
}
 800753e:	0018      	movs	r0, r3
 8007540:	46bd      	mov	sp, r7
 8007542:	b027      	add	sp, #156	; 0x9c
 8007544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007546 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8007546:	b590      	push	{r4, r7, lr}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800754e:	240f      	movs	r4, #15
 8007550:	193b      	adds	r3, r7, r4
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	4313      	orrs	r3, r2
 8007564:	b298      	uxth	r0, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	7899      	ldrb	r1, [r3, #2]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007572:	f000 fed9 	bl	8008328 <aci_att_read_by_type_resp_event>

  return status;
 8007576:	193b      	adds	r3, r7, r4
 8007578:	781b      	ldrb	r3, [r3, #0]
}
 800757a:	0018      	movs	r0, r3
 800757c:	46bd      	mov	sp, r7
 800757e:	b005      	add	sp, #20
 8007580:	bd90      	pop	{r4, r7, pc}

08007582 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007582:	b590      	push	{r4, r7, lr}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800758a:	240f      	movs	r4, #15
 800758c:	193b      	adds	r3, r7, r4
 800758e:	2200      	movs	r2, #0
 8007590:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	4313      	orrs	r3, r2
 80075a0:	b298      	uxth	r0, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 80075aa:	001a      	movs	r2, r3
 80075ac:	f000 fed0 	bl	8008350 <aci_att_read_resp_event>

  return status;
 80075b0:	193b      	adds	r3, r7, r4
 80075b2:	781b      	ldrb	r3, [r3, #0]
}
 80075b4:	0018      	movs	r0, r3
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b005      	add	sp, #20
 80075ba:	bd90      	pop	{r4, r7, pc}

080075bc <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80075c4:	240f      	movs	r4, #15
 80075c6:	193b      	adds	r3, r7, r4
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	781a      	ldrb	r2, [r3, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	4313      	orrs	r3, r2
 80075da:	b298      	uxth	r0, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80075e4:	001a      	movs	r2, r3
 80075e6:	f000 fec1 	bl	800836c <aci_att_read_blob_resp_event>

  return status;
 80075ea:	193b      	adds	r3, r7, r4
 80075ec:	781b      	ldrb	r3, [r3, #0]
}
 80075ee:	0018      	movs	r0, r3
 80075f0:	46bd      	mov	sp, r7
 80075f2:	b005      	add	sp, #20
 80075f4:	bd90      	pop	{r4, r7, pc}

080075f6 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 80075f6:	b590      	push	{r4, r7, lr}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80075fe:	240f      	movs	r4, #15
 8007600:	193b      	adds	r3, r7, r4
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	4313      	orrs	r3, r2
 8007614:	b298      	uxth	r0, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800761e:	001a      	movs	r2, r3
 8007620:	f000 feb2 	bl	8008388 <aci_att_read_multiple_resp_event>

  return status;
 8007624:	193b      	adds	r3, r7, r4
 8007626:	781b      	ldrb	r3, [r3, #0]
}
 8007628:	0018      	movs	r0, r3
 800762a:	46bd      	mov	sp, r7
 800762c:	b005      	add	sp, #20
 800762e:	bd90      	pop	{r4, r7, pc}

08007630 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8007630:	b590      	push	{r4, r7, lr}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007638:	240f      	movs	r4, #15
 800763a:	193b      	adds	r3, r7, r4
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	4313      	orrs	r3, r2
 800764e:	b298      	uxth	r0, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	7899      	ldrb	r1, [r3, #2]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800765c:	f000 fea2 	bl	80083a4 <aci_att_read_by_group_type_resp_event>

  return status;
 8007660:	193b      	adds	r3, r7, r4
 8007662:	781b      	ldrb	r3, [r3, #0]
}
 8007664:	0018      	movs	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	b005      	add	sp, #20
 800766a:	bd90      	pop	{r4, r7, pc}

0800766c <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800766c:	b5b0      	push	{r4, r5, r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
 8007672:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007674:	250f      	movs	r5, #15
 8007676:	197b      	adds	r3, r7, r5
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	781a      	ldrb	r2, [r3, #0]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	4313      	orrs	r3, r2
 800768a:	b298      	uxth	r0, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	789a      	ldrb	r2, [r3, #2]
 8007690:	78db      	ldrb	r3, [r3, #3]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	4313      	orrs	r3, r2
 8007696:	b299      	uxth	r1, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	791a      	ldrb	r2, [r3, #4]
 800769c:	795b      	ldrb	r3, [r3, #5]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	4313      	orrs	r3, r2
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	0023      	movs	r3, r4
 80076b0:	f000 fe8c 	bl	80083cc <aci_att_prepare_write_resp_event>

  return status;
 80076b4:	197b      	adds	r3, r7, r5
 80076b6:	781b      	ldrb	r3, [r3, #0]
}
 80076b8:	0018      	movs	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	b004      	add	sp, #16
 80076be:	bdb0      	pop	{r4, r5, r7, pc}

080076c0 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 80076c0:	b590      	push	{r4, r7, lr}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076c8:	240f      	movs	r4, #15
 80076ca:	193b      	adds	r3, r7, r4
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	781a      	ldrb	r2, [r3, #0]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	4313      	orrs	r3, r2
 80076de:	b29b      	uxth	r3, r3
 80076e0:	0018      	movs	r0, r3
 80076e2:	f000 fe8a 	bl	80083fa <aci_att_exec_write_resp_event>

  return status;
 80076e6:	193b      	adds	r3, r7, r4
 80076e8:	781b      	ldrb	r3, [r3, #0]
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b005      	add	sp, #20
 80076f0:	bd90      	pop	{r4, r7, pc}

080076f2 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 80076f2:	b590      	push	{r4, r7, lr}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80076fa:	240f      	movs	r4, #15
 80076fc:	193b      	adds	r3, r7, r4
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	781a      	ldrb	r2, [r3, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	4313      	orrs	r3, r2
 8007710:	b298      	uxth	r0, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	789a      	ldrb	r2, [r3, #2]
 8007716:	78db      	ldrb	r3, [r3, #3]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	4313      	orrs	r3, r2
 800771c:	b299      	uxth	r1, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007726:	f000 fe72 	bl	800840e <aci_gatt_indication_event>

  return status;
 800772a:	193b      	adds	r3, r7, r4
 800772c:	781b      	ldrb	r3, [r3, #0]
}
 800772e:	0018      	movs	r0, r3
 8007730:	46bd      	mov	sp, r7
 8007732:	b005      	add	sp, #20
 8007734:	bd90      	pop	{r4, r7, pc}

08007736 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8007736:	b590      	push	{r4, r7, lr}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800773e:	240f      	movs	r4, #15
 8007740:	193b      	adds	r3, r7, r4
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	781a      	ldrb	r2, [r3, #0]
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	4313      	orrs	r3, r2
 8007754:	b298      	uxth	r0, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	789a      	ldrb	r2, [r3, #2]
 800775a:	78db      	ldrb	r3, [r3, #3]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	4313      	orrs	r3, r2
 8007760:	b299      	uxth	r1, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800776a:	f000 fe67 	bl	800843c <aci_gatt_notification_event>

  return status;
 800776e:	193b      	adds	r3, r7, r4
 8007770:	781b      	ldrb	r3, [r3, #0]
}
 8007772:	0018      	movs	r0, r3
 8007774:	46bd      	mov	sp, r7
 8007776:	b005      	add	sp, #20
 8007778:	bd90      	pop	{r4, r7, pc}

0800777a <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800777a:	b590      	push	{r4, r7, lr}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007782:	240f      	movs	r4, #15
 8007784:	193b      	adds	r3, r7, r4
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	4313      	orrs	r3, r2
 8007798:	b29a      	uxth	r2, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	789b      	ldrb	r3, [r3, #2]
 800779e:	0019      	movs	r1, r3
 80077a0:	0010      	movs	r0, r2
 80077a2:	f000 fe62 	bl	800846a <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 80077a6:	193b      	adds	r3, r7, r4
 80077a8:	781b      	ldrb	r3, [r3, #0]
}
 80077aa:	0018      	movs	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b005      	add	sp, #20
 80077b0:	bd90      	pop	{r4, r7, pc}

080077b2 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 80077b2:	b590      	push	{r4, r7, lr}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077ba:	240f      	movs	r4, #15
 80077bc:	193b      	adds	r3, r7, r4
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	4313      	orrs	r3, r2
 80077d0:	b298      	uxth	r0, r3
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	7899      	ldrb	r1, [r3, #2]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	78da      	ldrb	r2, [r3, #3]
 80077da:	791b      	ldrb	r3, [r3, #4]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	4313      	orrs	r3, r2
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	795b      	ldrb	r3, [r3, #5]
 80077e6:	f000 fe4d 	bl	8008484 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 80077ea:	193b      	adds	r3, r7, r4
 80077ec:	781b      	ldrb	r3, [r3, #0]
}
 80077ee:	0018      	movs	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b005      	add	sp, #20
 80077f4:	bd90      	pop	{r4, r7, pc}

080077f6 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 80077f6:	b590      	push	{r4, r7, lr}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077fe:	240f      	movs	r4, #15
 8007800:	193b      	adds	r3, r7, r4
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	4313      	orrs	r3, r2
 8007814:	b298      	uxth	r0, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	789a      	ldrb	r2, [r3, #2]
 800781a:	78db      	ldrb	r3, [r3, #3]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	4313      	orrs	r3, r2
 8007820:	b299      	uxth	r1, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800782a:	f000 fe42 	bl	80084b2 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800782e:	193b      	adds	r3, r7, r4
 8007830:	781b      	ldrb	r3, [r3, #0]
}
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	b005      	add	sp, #20
 8007838:	bd90      	pop	{r4, r7, pc}

0800783a <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800783a:	b590      	push	{r4, r7, lr}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007842:	240f      	movs	r4, #15
 8007844:	193b      	adds	r3, r7, r4
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	781a      	ldrb	r2, [r3, #0]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	4313      	orrs	r3, r2
 8007858:	b298      	uxth	r0, r3
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	789a      	ldrb	r2, [r3, #2]
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	4313      	orrs	r3, r2
 8007864:	b299      	uxth	r1, r3
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800786e:	f000 fe37 	bl	80084e0 <aci_gatt_write_permit_req_event>

  return status;
 8007872:	193b      	adds	r3, r7, r4
 8007874:	781b      	ldrb	r3, [r3, #0]
}
 8007876:	0018      	movs	r0, r3
 8007878:	46bd      	mov	sp, r7
 800787a:	b005      	add	sp, #20
 800787c:	bd90      	pop	{r4, r7, pc}

0800787e <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800787e:	b590      	push	{r4, r7, lr}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007886:	240f      	movs	r4, #15
 8007888:	193b      	adds	r3, r7, r4
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	785b      	ldrb	r3, [r3, #1]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	4313      	orrs	r3, r2
 800789c:	b298      	uxth	r0, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	789a      	ldrb	r2, [r3, #2]
 80078a2:	78db      	ldrb	r3, [r3, #3]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b299      	uxth	r1, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	791a      	ldrb	r2, [r3, #4]
 80078ae:	795b      	ldrb	r3, [r3, #5]
 80078b0:	021b      	lsls	r3, r3, #8
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	001a      	movs	r2, r3
 80078b8:	f7fb f8a4 	bl	8002a04 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 80078bc:	193b      	adds	r3, r7, r4
 80078be:	781b      	ldrb	r3, [r3, #0]
}
 80078c0:	0018      	movs	r0, r3
 80078c2:	46bd      	mov	sp, r7
 80078c4:	b005      	add	sp, #20
 80078c6:	bd90      	pop	{r4, r7, pc}

080078c8 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b0a6      	sub	sp, #152	; 0x98
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80078d0:	238f      	movs	r3, #143	; 0x8f
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	2200      	movs	r2, #0
 80078d6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2288      	movs	r2, #136	; 0x88
 80078dc:	18ba      	adds	r2, r7, r2
 80078de:	6013      	str	r3, [r2, #0]
  uint8_t size = 3;
 80078e0:	2397      	movs	r3, #151	; 0x97
 80078e2:	18fb      	adds	r3, r7, r3
 80078e4:	2203      	movs	r2, #3
 80078e6:	701a      	strb	r2, [r3, #0]
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80078e8:	2300      	movs	r3, #0
 80078ea:	2290      	movs	r2, #144	; 0x90
 80078ec:	18ba      	adds	r2, r7, r2
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	e01e      	b.n	8007930 <aci_gatt_read_multi_permit_req_event_process+0x68>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 80078f2:	2388      	movs	r3, #136	; 0x88
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	2090      	movs	r0, #144	; 0x90
 80078fa:	183b      	adds	r3, r7, r0
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	18d1      	adds	r1, r2, r3
 8007902:	78c9      	ldrb	r1, [r1, #3]
 8007904:	18d3      	adds	r3, r2, r3
 8007906:	791b      	ldrb	r3, [r3, #4]
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	430b      	orrs	r3, r1
 800790c:	b299      	uxth	r1, r3
 800790e:	2308      	movs	r3, #8
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	183a      	adds	r2, r7, r0
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	0052      	lsls	r2, r2, #1
 8007918:	52d1      	strh	r1, [r2, r3]
    size += 2;
 800791a:	2297      	movs	r2, #151	; 0x97
 800791c:	18bb      	adds	r3, r7, r2
 800791e:	18ba      	adds	r2, r7, r2
 8007920:	7812      	ldrb	r2, [r2, #0]
 8007922:	3202      	adds	r2, #2
 8007924:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007926:	183b      	adds	r3, r7, r0
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	183a      	adds	r2, r7, r0
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	2188      	movs	r1, #136	; 0x88
 8007932:	187b      	adds	r3, r7, r1
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	789b      	ldrb	r3, [r3, #2]
 8007938:	001a      	movs	r2, r3
 800793a:	2390      	movs	r3, #144	; 0x90
 800793c:	18fb      	adds	r3, r7, r3
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4293      	cmp	r3, r2
 8007942:	dbd6      	blt.n	80078f2 <aci_gatt_read_multi_permit_req_event_process+0x2a>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8007944:	187b      	adds	r3, r7, r1
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	4313      	orrs	r3, r2
 8007950:	b298      	uxth	r0, r3
 8007952:	187b      	adds	r3, r7, r1
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	789b      	ldrb	r3, [r3, #2]
 8007958:	2208      	movs	r2, #8
 800795a:	18ba      	adds	r2, r7, r2
 800795c:	0019      	movs	r1, r3
 800795e:	f000 fdd6 	bl	800850e <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8007962:	238f      	movs	r3, #143	; 0x8f
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	781b      	ldrb	r3, [r3, #0]
}
 8007968:	0018      	movs	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	b026      	add	sp, #152	; 0x98
 800796e:	bd80      	pop	{r7, pc}

08007970 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8007970:	b590      	push	{r4, r7, lr}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007978:	240f      	movs	r4, #15
 800797a:	193b      	adds	r3, r7, r4
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	781a      	ldrb	r2, [r3, #0]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	4313      	orrs	r3, r2
 800798e:	b298      	uxth	r0, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	789a      	ldrb	r2, [r3, #2]
 8007994:	78db      	ldrb	r3, [r3, #3]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	4313      	orrs	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	0019      	movs	r1, r3
 800799e:	f000 fdc4 	bl	800852a <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 80079a2:	193b      	adds	r3, r7, r4
 80079a4:	781b      	ldrb	r3, [r3, #0]
}
 80079a6:	0018      	movs	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b005      	add	sp, #20
 80079ac:	bd90      	pop	{r4, r7, pc}

080079ae <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 80079ae:	b590      	push	{r4, r7, lr}
 80079b0:	b085      	sub	sp, #20
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80079b6:	240f      	movs	r4, #15
 80079b8:	193b      	adds	r3, r7, r4
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	781a      	ldrb	r2, [r3, #0]
 80079c6:	785b      	ldrb	r3, [r3, #1]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	4313      	orrs	r3, r2
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	0018      	movs	r0, r3
 80079d0:	f000 fdb8 	bl	8008544 <aci_gatt_server_confirmation_event>

  return status;
 80079d4:	193b      	adds	r3, r7, r4
 80079d6:	781b      	ldrb	r3, [r3, #0]
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b005      	add	sp, #20
 80079de:	bd90      	pop	{r4, r7, pc}

080079e0 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 80079e0:	b5b0      	push	{r4, r5, r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80079e8:	250f      	movs	r5, #15
 80079ea:	197b      	adds	r3, r7, r5
 80079ec:	2200      	movs	r2, #0
 80079ee:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	4313      	orrs	r3, r2
 80079fe:	b298      	uxth	r0, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	789a      	ldrb	r2, [r3, #2]
 8007a04:	78db      	ldrb	r3, [r3, #3]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	b299      	uxth	r1, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	791a      	ldrb	r2, [r3, #4]
 8007a10:	795b      	ldrb	r3, [r3, #5]
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	0023      	movs	r3, r4
 8007a24:	f000 fd98 	bl	8008558 <aci_gatt_prepare_write_permit_req_event>

  return status;
 8007a28:	197b      	adds	r3, r7, r5
 8007a2a:	781b      	ldrb	r3, [r3, #0]
}
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b004      	add	sp, #16
 8007a32:	bdb0      	pop	{r4, r5, r7, pc}

08007a34 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8007a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a36:	46c6      	mov	lr, r8
 8007a38:	b500      	push	{lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af06      	add	r7, sp, #24
 8007a3e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007a40:	230f      	movs	r3, #15
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	2200      	movs	r2, #0
 8007a46:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	781d      	ldrb	r5, [r3, #0]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	785a      	ldrb	r2, [r3, #1]
 8007a54:	789b      	ldrb	r3, [r3, #2]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b29e      	uxth	r6, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	78da      	ldrb	r2, [r3, #3]
 8007a60:	4694      	mov	ip, r2
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	791a      	ldrb	r2, [r3, #4]
 8007a66:	4690      	mov	r8, r2
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	1d5a      	adds	r2, r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	7ad9      	ldrb	r1, [r3, #11]
 8007a70:	7b1b      	ldrb	r3, [r3, #12]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	430b      	orrs	r3, r1
 8007a76:	b299      	uxth	r1, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	7b58      	ldrb	r0, [r3, #13]
 8007a7c:	7b9b      	ldrb	r3, [r3, #14]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	4303      	orrs	r3, r0
 8007a82:	b298      	uxth	r0, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	7bdc      	ldrb	r4, [r3, #15]
 8007a88:	7c1b      	ldrb	r3, [r3, #16]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	4323      	orrs	r3, r4
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	68bc      	ldr	r4, [r7, #8]
 8007a92:	7c64      	ldrb	r4, [r4, #17]
 8007a94:	9404      	str	r4, [sp, #16]
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	9002      	str	r0, [sp, #8]
 8007a9a:	9101      	str	r1, [sp, #4]
 8007a9c:	9200      	str	r2, [sp, #0]
 8007a9e:	4643      	mov	r3, r8
 8007aa0:	4662      	mov	r2, ip
 8007aa2:	0031      	movs	r1, r6
 8007aa4:	0028      	movs	r0, r5
 8007aa6:	f7fa ff4d 	bl	8002944 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8007aaa:	230f      	movs	r3, #15
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	781b      	ldrb	r3, [r3, #0]
}
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	b004      	add	sp, #16
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	46b8      	mov	r8, r7
 8007aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007abc <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8007abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007abe:	b0a5      	sub	sp, #148	; 0x94
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007ac4:	2387      	movs	r3, #135	; 0x87
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2280      	movs	r2, #128	; 0x80
 8007ad0:	18ba      	adds	r2, r7, r2
 8007ad2:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 8007ad4:	238f      	movs	r3, #143	; 0x8f
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	2201      	movs	r2, #1
 8007ada:	701a      	strb	r2, [r3, #0]
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007adc:	2300      	movs	r3, #0
 8007ade:	2288      	movs	r2, #136	; 0x88
 8007ae0:	18ba      	adds	r2, r7, r2
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	e0b9      	b.n	8007c5a <hci_le_advertising_report_event_process+0x19e>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8007ae6:	2680      	movs	r6, #128	; 0x80
 8007ae8:	19bb      	adds	r3, r7, r6
 8007aea:	6819      	ldr	r1, [r3, #0]
 8007aec:	2488      	movs	r4, #136	; 0x88
 8007aee:	193b      	adds	r3, r7, r4
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	0013      	movs	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	189b      	adds	r3, r3, r2
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	189b      	adds	r3, r3, r2
 8007afc:	18cb      	adds	r3, r1, r3
 8007afe:	3301      	adds	r3, #1
 8007b00:	7818      	ldrb	r0, [r3, #0]
 8007b02:	2308      	movs	r3, #8
 8007b04:	18f9      	adds	r1, r7, r3
 8007b06:	193a      	adds	r2, r7, r4
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	0013      	movs	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	189b      	adds	r3, r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	1c02      	adds	r2, r0, #0
 8007b14:	545a      	strb	r2, [r3, r1]
    size += 1;
 8007b16:	258f      	movs	r5, #143	; 0x8f
 8007b18:	197b      	adds	r3, r7, r5
 8007b1a:	197a      	adds	r2, r7, r5
 8007b1c:	7812      	ldrb	r2, [r2, #0]
 8007b1e:	3201      	adds	r2, #1
 8007b20:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8007b22:	19ba      	adds	r2, r7, r6
 8007b24:	6811      	ldr	r1, [r2, #0]
 8007b26:	193a      	adds	r2, r7, r4
 8007b28:	6812      	ldr	r2, [r2, #0]
 8007b2a:	0013      	movs	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	189b      	adds	r3, r3, r2
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	189b      	adds	r3, r3, r2
 8007b34:	18cb      	adds	r3, r1, r3
 8007b36:	3302      	adds	r3, #2
 8007b38:	7818      	ldrb	r0, [r3, #0]
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	18f9      	adds	r1, r7, r3
 8007b3e:	193a      	adds	r2, r7, r4
 8007b40:	6812      	ldr	r2, [r2, #0]
 8007b42:	0013      	movs	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	189b      	adds	r3, r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	18cb      	adds	r3, r1, r3
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	1c02      	adds	r2, r0, #0
 8007b50:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007b52:	197b      	adds	r3, r7, r5
 8007b54:	197a      	adds	r2, r7, r5
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	3201      	adds	r2, #1
 8007b5a:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8007b5c:	2308      	movs	r3, #8
 8007b5e:	18f9      	adds	r1, r7, r3
 8007b60:	193a      	adds	r2, r7, r4
 8007b62:	6812      	ldr	r2, [r2, #0]
 8007b64:	0013      	movs	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	189b      	adds	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	18cb      	adds	r3, r1, r3
 8007b6e:	1c98      	adds	r0, r3, #2
 8007b70:	193a      	adds	r2, r7, r4
 8007b72:	6812      	ldr	r2, [r2, #0]
 8007b74:	0013      	movs	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	189b      	adds	r3, r3, r2
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	189b      	adds	r3, r3, r2
 8007b7e:	19ba      	adds	r2, r7, r6
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	18d3      	adds	r3, r2, r3
 8007b84:	3303      	adds	r3, #3
 8007b86:	2206      	movs	r2, #6
 8007b88:	0019      	movs	r1, r3
 8007b8a:	f002 fd47 	bl	800a61c <memcpy>
    size += 6;
 8007b8e:	197b      	adds	r3, r7, r5
 8007b90:	197a      	adds	r2, r7, r5
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	3206      	adds	r2, #6
 8007b96:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8007b98:	19ba      	adds	r2, r7, r6
 8007b9a:	6811      	ldr	r1, [r2, #0]
 8007b9c:	193a      	adds	r2, r7, r4
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	0013      	movs	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	189b      	adds	r3, r3, r2
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	189b      	adds	r3, r3, r2
 8007baa:	18cb      	adds	r3, r1, r3
 8007bac:	3309      	adds	r3, #9
 8007bae:	7818      	ldrb	r0, [r3, #0]
 8007bb0:	2308      	movs	r3, #8
 8007bb2:	18f9      	adds	r1, r7, r3
 8007bb4:	193a      	adds	r2, r7, r4
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	0013      	movs	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	18cb      	adds	r3, r1, r3
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	1c02      	adds	r2, r0, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007bc8:	197b      	adds	r3, r7, r5
 8007bca:	197a      	adds	r2, r7, r5
 8007bcc:	7812      	ldrb	r2, [r2, #0]
 8007bce:	3201      	adds	r2, #1
 8007bd0:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007bd2:	193a      	adds	r2, r7, r4
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	0013      	movs	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	189b      	adds	r3, r3, r2
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	189b      	adds	r3, r3, r2
 8007be0:	3308      	adds	r3, #8
 8007be2:	19ba      	adds	r2, r7, r6
 8007be4:	6812      	ldr	r2, [r2, #0]
 8007be6:	18d3      	adds	r3, r2, r3
 8007be8:	1c99      	adds	r1, r3, #2
 8007bea:	2308      	movs	r3, #8
 8007bec:	18f8      	adds	r0, r7, r3
 8007bee:	193a      	adds	r2, r7, r4
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	0013      	movs	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	189b      	adds	r3, r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	18c3      	adds	r3, r0, r3
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8007c00:	19ba      	adds	r2, r7, r6
 8007c02:	6811      	ldr	r1, [r2, #0]
 8007c04:	193a      	adds	r2, r7, r4
 8007c06:	6812      	ldr	r2, [r2, #0]
 8007c08:	0013      	movs	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	189b      	adds	r3, r3, r2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	189b      	adds	r3, r3, r2
 8007c12:	18cb      	adds	r3, r1, r3
 8007c14:	3309      	adds	r3, #9
 8007c16:	7819      	ldrb	r1, [r3, #0]
 8007c18:	197b      	adds	r3, r7, r5
 8007c1a:	197a      	adds	r2, r7, r5
 8007c1c:	7812      	ldrb	r2, [r2, #0]
 8007c1e:	188a      	adds	r2, r1, r2
 8007c20:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8007c22:	197b      	adds	r3, r7, r5
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	18d3      	adds	r3, r2, r3
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b258      	sxtb	r0, r3
 8007c2e:	2308      	movs	r3, #8
 8007c30:	18f9      	adds	r1, r7, r3
 8007c32:	193b      	adds	r3, r7, r4
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	0013      	movs	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	189b      	adds	r3, r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	18cb      	adds	r3, r1, r3
 8007c40:	3310      	adds	r3, #16
 8007c42:	1c02      	adds	r2, r0, #0
 8007c44:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007c46:	197b      	adds	r3, r7, r5
 8007c48:	197a      	adds	r2, r7, r5
 8007c4a:	7812      	ldrb	r2, [r2, #0]
 8007c4c:	3201      	adds	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007c50:	193b      	adds	r3, r7, r4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	193a      	adds	r2, r7, r4
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	2180      	movs	r1, #128	; 0x80
 8007c5c:	187b      	adds	r3, r7, r1
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	001a      	movs	r2, r3
 8007c64:	2388      	movs	r3, #136	; 0x88
 8007c66:	18fb      	adds	r3, r7, r3
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	da00      	bge.n	8007c70 <hci_le_advertising_report_event_process+0x1b4>
 8007c6e:	e73a      	b.n	8007ae6 <hci_le_advertising_report_event_process+0x2a>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8007c70:	187b      	adds	r3, r7, r1
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2208      	movs	r2, #8
 8007c78:	18ba      	adds	r2, r7, r2
 8007c7a:	0011      	movs	r1, r2
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f000 fa3d 	bl	80080fc <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 8007c82:	2387      	movs	r3, #135	; 0x87
 8007c84:	18fb      	adds	r3, r7, r3
 8007c86:	781b      	ldrb	r3, [r3, #0]
}
 8007c88:	0018      	movs	r0, r3
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b025      	add	sp, #148	; 0x94
 8007c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c90 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8007c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007c98:	260f      	movs	r6, #15
 8007c9a:	19bb      	adds	r3, r7, r6
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	7818      	ldrb	r0, [r3, #0]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	785a      	ldrb	r2, [r3, #1]
 8007cac:	789b      	ldrb	r3, [r3, #2]
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b299      	uxth	r1, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	78da      	ldrb	r2, [r3, #3]
 8007cb8:	791b      	ldrb	r3, [r3, #4]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	b29c      	uxth	r4, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	795a      	ldrb	r2, [r3, #5]
 8007cc4:	799b      	ldrb	r3, [r3, #6]
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	b29d      	uxth	r5, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	79da      	ldrb	r2, [r3, #7]
 8007cd0:	7a1b      	ldrb	r3, [r3, #8]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	002b      	movs	r3, r5
 8007cdc:	0022      	movs	r2, r4
 8007cde:	f000 fa18 	bl	8008112 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007ce2:	19bb      	adds	r3, r7, r6
 8007ce4:	781b      	ldrb	r3, [r3, #0]
}
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b005      	add	sp, #20
 8007cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cee <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8007cee:	b590      	push	{r4, r7, lr}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007cf6:	240f      	movs	r4, #15
 8007cf8:	193b      	adds	r3, r7, r4
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	7818      	ldrb	r0, [r3, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	785a      	ldrb	r2, [r3, #1]
 8007d0a:	789b      	ldrb	r3, [r3, #2]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007d16:	001a      	movs	r2, r3
 8007d18:	f000 fa12 	bl	8008140 <hci_le_read_remote_used_features_complete_event>

  return status;
 8007d1c:	193b      	adds	r3, r7, r4
 8007d1e:	781b      	ldrb	r3, [r3, #0]
}
 8007d20:	0018      	movs	r0, r3
 8007d22:	46bd      	mov	sp, r7
 8007d24:	b005      	add	sp, #20
 8007d26:	bd90      	pop	{r4, r7, pc}

08007d28 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8007d28:	b590      	push	{r4, r7, lr}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d30:	240f      	movs	r4, #15
 8007d32:	193b      	adds	r3, r7, r4
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	781a      	ldrb	r2, [r3, #0]
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	4313      	orrs	r3, r2
 8007d46:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	7a9a      	ldrb	r2, [r3, #10]
 8007d50:	7adb      	ldrb	r3, [r3, #11]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	4313      	orrs	r3, r2
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	001a      	movs	r2, r3
 8007d5a:	f000 f9ff 	bl	800815c <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8007d5e:	193b      	adds	r3, r7, r4
 8007d60:	781b      	ldrb	r3, [r3, #0]
}
 8007d62:	0018      	movs	r0, r3
 8007d64:	46bd      	mov	sp, r7
 8007d66:	b005      	add	sp, #20
 8007d68:	bd90      	pop	{r4, r7, pc}

08007d6a <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8007d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af02      	add	r7, sp, #8
 8007d70:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d72:	260f      	movs	r6, #15
 8007d74:	19bb      	adds	r3, r7, r6
 8007d76:	2200      	movs	r2, #0
 8007d78:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	781a      	ldrb	r2, [r3, #0]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	4313      	orrs	r3, r2
 8007d88:	b298      	uxth	r0, r3
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	789a      	ldrb	r2, [r3, #2]
 8007d8e:	78db      	ldrb	r3, [r3, #3]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b299      	uxth	r1, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	791a      	ldrb	r2, [r3, #4]
 8007d9a:	795b      	ldrb	r3, [r3, #5]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	b29c      	uxth	r4, r3
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	799a      	ldrb	r2, [r3, #6]
 8007da6:	79db      	ldrb	r3, [r3, #7]
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	4313      	orrs	r3, r2
 8007dac:	b29d      	uxth	r5, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	7a1a      	ldrb	r2, [r3, #8]
 8007db2:	7a5b      	ldrb	r3, [r3, #9]
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	4313      	orrs	r3, r2
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	002b      	movs	r3, r5
 8007dbe:	0022      	movs	r2, r4
 8007dc0:	f000 f9db 	bl	800817a <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8007dc4:	19bb      	adds	r3, r7, r6
 8007dc6:	781b      	ldrb	r3, [r3, #0]
}
 8007dc8:	0018      	movs	r0, r3
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b005      	add	sp, #20
 8007dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dd0 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007dd8:	240f      	movs	r4, #15
 8007dda:	193b      	adds	r3, r7, r4
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007dec:	0019      	movs	r1, r3
 8007dee:	0010      	movs	r0, r2
 8007df0:	f000 f9da 	bl	80081a8 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8007df4:	193b      	adds	r3, r7, r4
 8007df6:	781b      	ldrb	r3, [r3, #0]
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b005      	add	sp, #20
 8007dfe:	bd90      	pop	{r4, r7, pc}

08007e00 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8007e00:	b590      	push	{r4, r7, lr}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e08:	240f      	movs	r4, #15
 8007e0a:	193b      	adds	r3, r7, r4
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007e1c:	0019      	movs	r1, r3
 8007e1e:	0010      	movs	r0, r2
 8007e20:	f000 f9cd 	bl	80081be <hci_le_generate_dhkey_complete_event>

  return status;
 8007e24:	193b      	adds	r3, r7, r4
 8007e26:	781b      	ldrb	r3, [r3, #0]
}
 8007e28:	0018      	movs	r0, r3
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	b005      	add	sp, #20
 8007e2e:	bd90      	pop	{r4, r7, pc}

08007e30 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e32:	46d6      	mov	lr, sl
 8007e34:	464f      	mov	r7, r9
 8007e36:	4646      	mov	r6, r8
 8007e38:	b5c0      	push	{r6, r7, lr}
 8007e3a:	b08c      	sub	sp, #48	; 0x30
 8007e3c:	af08      	add	r7, sp, #32
 8007e3e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e40:	230f      	movs	r3, #15
 8007e42:	18fb      	adds	r3, r7, r3
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	4694      	mov	ip, r2
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	785a      	ldrb	r2, [r3, #1]
 8007e56:	789b      	ldrb	r3, [r3, #2]
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	4690      	mov	r8, r2
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	78da      	ldrb	r2, [r3, #3]
 8007e64:	4691      	mov	r9, r2
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	791a      	ldrb	r2, [r3, #4]
 8007e6a:	4692      	mov	sl, r2
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	1d5a      	adds	r2, r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	0019      	movs	r1, r3
 8007e74:	310b      	adds	r1, #11
                                            rp0->Peer_Resolvable_Private_Address,
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	0018      	movs	r0, r3
 8007e7a:	3011      	adds	r0, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	7ddc      	ldrb	r4, [r3, #23]
 8007e80:	7e1b      	ldrb	r3, [r3, #24]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	4323      	orrs	r3, r4
 8007e86:	b29c      	uxth	r4, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	7e5d      	ldrb	r5, [r3, #25]
 8007e8c:	7e9b      	ldrb	r3, [r3, #26]
 8007e8e:	021b      	lsls	r3, r3, #8
 8007e90:	432b      	orrs	r3, r5
 8007e92:	b29d      	uxth	r5, r3
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	7ede      	ldrb	r6, [r3, #27]
 8007e98:	7f1b      	ldrb	r3, [r3, #28]
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	4333      	orrs	r3, r6
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	68be      	ldr	r6, [r7, #8]
 8007ea2:	7f76      	ldrb	r6, [r6, #29]
 8007ea4:	9606      	str	r6, [sp, #24]
 8007ea6:	9305      	str	r3, [sp, #20]
 8007ea8:	9504      	str	r5, [sp, #16]
 8007eaa:	9403      	str	r4, [sp, #12]
 8007eac:	9002      	str	r0, [sp, #8]
 8007eae:	9101      	str	r1, [sp, #4]
 8007eb0:	9200      	str	r2, [sp, #0]
 8007eb2:	4653      	mov	r3, sl
 8007eb4:	464a      	mov	r2, r9
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	4660      	mov	r0, ip
 8007eba:	f000 f98b 	bl	80081d4 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8007ebe:	230f      	movs	r3, #15
 8007ec0:	18fb      	adds	r3, r7, r3
 8007ec2:	781b      	ldrb	r3, [r3, #0]
}
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	b004      	add	sp, #16
 8007eca:	bce0      	pop	{r5, r6, r7}
 8007ecc:	46ba      	mov	sl, r7
 8007ece:	46b1      	mov	r9, r6
 8007ed0:	46a8      	mov	r8, r5
 8007ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ed4 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8007ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed6:	b0a7      	sub	sp, #156	; 0x9c
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007edc:	238f      	movs	r3, #143	; 0x8f
 8007ede:	18fb      	adds	r3, r7, r3
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2288      	movs	r2, #136	; 0x88
 8007ee8:	18ba      	adds	r2, r7, r2
 8007eea:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 8007eec:	2397      	movs	r3, #151	; 0x97
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	701a      	strb	r2, [r3, #0]
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2290      	movs	r2, #144	; 0x90
 8007ef8:	18ba      	adds	r2, r7, r2
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	e08d      	b.n	800801a <hci_le_direct_advertising_report_event_process+0x146>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8007efe:	2688      	movs	r6, #136	; 0x88
 8007f00:	19bb      	adds	r3, r7, r6
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	2490      	movs	r4, #144	; 0x90
 8007f06:	193b      	adds	r3, r7, r4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	18d3      	adds	r3, r2, r3
 8007f0e:	3301      	adds	r3, #1
 8007f10:	7819      	ldrb	r1, [r3, #0]
 8007f12:	2508      	movs	r5, #8
 8007f14:	197b      	adds	r3, r7, r5
 8007f16:	193a      	adds	r2, r7, r4
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	0112      	lsls	r2, r2, #4
 8007f1c:	54d1      	strb	r1, [r2, r3]
    size += 1;
 8007f1e:	2097      	movs	r0, #151	; 0x97
 8007f20:	183b      	adds	r3, r7, r0
 8007f22:	183a      	adds	r2, r7, r0
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	3201      	adds	r2, #1
 8007f28:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8007f2a:	19bb      	adds	r3, r7, r6
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	193b      	adds	r3, r7, r4
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	18d3      	adds	r3, r2, r3
 8007f36:	3302      	adds	r3, #2
 8007f38:	7819      	ldrb	r1, [r3, #0]
 8007f3a:	197a      	adds	r2, r7, r5
 8007f3c:	193b      	adds	r3, r7, r4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	18d3      	adds	r3, r2, r3
 8007f44:	3301      	adds	r3, #1
 8007f46:	1c0a      	adds	r2, r1, #0
 8007f48:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007f4a:	0005      	movs	r5, r0
 8007f4c:	197b      	adds	r3, r7, r5
 8007f4e:	197a      	adds	r2, r7, r5
 8007f50:	7812      	ldrb	r2, [r2, #0]
 8007f52:	3201      	adds	r2, #1
 8007f54:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007f56:	2008      	movs	r0, #8
 8007f58:	183a      	adds	r2, r7, r0
 8007f5a:	193b      	adds	r3, r7, r4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	011b      	lsls	r3, r3, #4
 8007f60:	18d3      	adds	r3, r2, r3
 8007f62:	1c98      	adds	r0, r3, #2
 8007f64:	193b      	adds	r3, r7, r4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	19ba      	adds	r2, r7, r6
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	18d3      	adds	r3, r2, r3
 8007f70:	3303      	adds	r3, #3
 8007f72:	2206      	movs	r2, #6
 8007f74:	0019      	movs	r1, r3
 8007f76:	f002 fb51 	bl	800a61c <memcpy>
    size += 6;
 8007f7a:	197b      	adds	r3, r7, r5
 8007f7c:	197a      	adds	r2, r7, r5
 8007f7e:	7812      	ldrb	r2, [r2, #0]
 8007f80:	3206      	adds	r2, #6
 8007f82:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007f84:	19bb      	adds	r3, r7, r6
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	193b      	adds	r3, r7, r4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	18d3      	adds	r3, r2, r3
 8007f90:	3309      	adds	r3, #9
 8007f92:	7819      	ldrb	r1, [r3, #0]
 8007f94:	2008      	movs	r0, #8
 8007f96:	183a      	adds	r2, r7, r0
 8007f98:	193b      	adds	r3, r7, r4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	18d3      	adds	r3, r2, r3
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	1c0a      	adds	r2, r1, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007fa6:	197b      	adds	r3, r7, r5
 8007fa8:	197a      	adds	r2, r7, r5
 8007faa:	7812      	ldrb	r2, [r2, #0]
 8007fac:	3201      	adds	r2, #1
 8007fae:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8007fb0:	183a      	adds	r2, r7, r0
 8007fb2:	1939      	adds	r1, r7, r4
 8007fb4:	680b      	ldr	r3, [r1, #0]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	3308      	adds	r3, #8
 8007fba:	18d3      	adds	r3, r2, r3
 8007fbc:	1c58      	adds	r0, r3, #1
 8007fbe:	193a      	adds	r2, r7, r4
 8007fc0:	6813      	ldr	r3, [r2, #0]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	19ba      	adds	r2, r7, r6
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	18d3      	adds	r3, r2, r3
 8007fcc:	3302      	adds	r3, #2
 8007fce:	2206      	movs	r2, #6
 8007fd0:	0019      	movs	r1, r3
 8007fd2:	f002 fb23 	bl	800a61c <memcpy>
    size += 6;
 8007fd6:	0028      	movs	r0, r5
 8007fd8:	183b      	adds	r3, r7, r0
 8007fda:	183a      	adds	r2, r7, r0
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	3206      	adds	r2, #6
 8007fe0:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8007fe2:	19ba      	adds	r2, r7, r6
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	1939      	adds	r1, r7, r4
 8007fe8:	680b      	ldr	r3, [r1, #0]
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	18d3      	adds	r3, r2, r3
 8007fee:	3310      	adds	r3, #16
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	5659      	ldrsb	r1, [r3, r1]
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	18fa      	adds	r2, r7, r3
 8007ff8:	193b      	adds	r3, r7, r4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	18d3      	adds	r3, r2, r3
 8008000:	330f      	adds	r3, #15
 8008002:	1c0a      	adds	r2, r1, #0
 8008004:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008006:	183b      	adds	r3, r7, r0
 8008008:	183a      	adds	r2, r7, r0
 800800a:	7812      	ldrb	r2, [r2, #0]
 800800c:	3201      	adds	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008010:	193b      	adds	r3, r7, r4
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	193a      	adds	r2, r7, r4
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	2188      	movs	r1, #136	; 0x88
 800801c:	187b      	adds	r3, r7, r1
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	001a      	movs	r2, r3
 8008024:	2390      	movs	r3, #144	; 0x90
 8008026:	18fb      	adds	r3, r7, r3
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4293      	cmp	r3, r2
 800802c:	da00      	bge.n	8008030 <hci_le_direct_advertising_report_event_process+0x15c>
 800802e:	e766      	b.n	8007efe <hci_le_direct_advertising_report_event_process+0x2a>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8008030:	187b      	adds	r3, r7, r1
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2208      	movs	r2, #8
 8008038:	18ba      	adds	r2, r7, r2
 800803a:	0011      	movs	r1, r2
 800803c:	0018      	movs	r0, r3
 800803e:	f000 f8e0 	bl	8008202 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8008042:	238f      	movs	r3, #143	; 0x8f
 8008044:	18fb      	adds	r3, r7, r3
 8008046:	781b      	ldrb	r3, [r3, #0]
}
 8008048:	0018      	movs	r0, r3
 800804a:	46bd      	mov	sp, r7
 800804c:	b027      	add	sp, #156	; 0x9c
 800804e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008050 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8008050:	b590      	push	{r4, r7, lr}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	0004      	movs	r4, r0
 8008058:	0008      	movs	r0, r1
 800805a:	0011      	movs	r1, r2
 800805c:	1dfb      	adds	r3, r7, #7
 800805e:	1c22      	adds	r2, r4, #0
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	1d3b      	adds	r3, r7, #4
 8008064:	1c02      	adds	r2, r0, #0
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	1dbb      	adds	r3, r7, #6
 800806a:	1c0a      	adds	r2, r1, #0
 800806c:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	46bd      	mov	sp, r7
 8008072:	b003      	add	sp, #12
 8008074:	bd90      	pop	{r4, r7, pc}

08008076 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8008076:	b5b0      	push	{r4, r5, r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	0005      	movs	r5, r0
 800807e:	000c      	movs	r4, r1
 8008080:	0010      	movs	r0, r2
 8008082:	0019      	movs	r1, r3
 8008084:	1dfb      	adds	r3, r7, #7
 8008086:	1c2a      	adds	r2, r5, #0
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	1c22      	adds	r2, r4, #0
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	1dbb      	adds	r3, r7, #6
 8008092:	1c02      	adds	r2, r0, #0
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	1cbb      	adds	r3, r7, #2
 8008098:	1c0a      	adds	r2, r1, #0
 800809a:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800809c:	46c0      	nop			; (mov r8, r8)
 800809e:	46bd      	mov	sp, r7
 80080a0:	b002      	add	sp, #8
 80080a2:	bdb0      	pop	{r4, r5, r7, pc}

080080a4 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	0002      	movs	r2, r0
 80080ac:	1dfb      	adds	r3, r7, #7
 80080ae:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 80080b0:	46c0      	nop			; (mov r8, r8)
 80080b2:	46bd      	mov	sp, r7
 80080b4:	b002      	add	sp, #8
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	0002      	movs	r2, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	1dfb      	adds	r3, r7, #7
 80080c4:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b002      	add	sp, #8
 80080cc:	bd80      	pop	{r7, pc}

080080ce <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	0002      	movs	r2, r0
 80080d6:	1dfb      	adds	r3, r7, #7
 80080d8:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	46bd      	mov	sp, r7
 80080de:	b002      	add	sp, #8
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	0002      	movs	r2, r0
 80080ea:	1dfb      	adds	r3, r7, #7
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	1d3b      	adds	r3, r7, #4
 80080f0:	1c0a      	adds	r2, r1, #0
 80080f2:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 80080f4:	46c0      	nop			; (mov r8, r8)
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b002      	add	sp, #8
 80080fa:	bd80      	pop	{r7, pc}

080080fc <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	0002      	movs	r2, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	1dfb      	adds	r3, r7, #7
 8008108:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	46bd      	mov	sp, r7
 800810e:	b002      	add	sp, #8
 8008110:	bd80      	pop	{r7, pc}

08008112 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8008112:	b5b0      	push	{r4, r5, r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	0005      	movs	r5, r0
 800811a:	000c      	movs	r4, r1
 800811c:	0010      	movs	r0, r2
 800811e:	0019      	movs	r1, r3
 8008120:	1dfb      	adds	r3, r7, #7
 8008122:	1c2a      	adds	r2, r5, #0
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	1d3b      	adds	r3, r7, #4
 8008128:	1c22      	adds	r2, r4, #0
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	1cbb      	adds	r3, r7, #2
 800812e:	1c02      	adds	r2, r0, #0
 8008130:	801a      	strh	r2, [r3, #0]
 8008132:	003b      	movs	r3, r7
 8008134:	1c0a      	adds	r2, r1, #0
 8008136:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8008138:	46c0      	nop			; (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b002      	add	sp, #8
 800813e:	bdb0      	pop	{r4, r5, r7, pc}

08008140 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	603a      	str	r2, [r7, #0]
 8008148:	1dfb      	adds	r3, r7, #7
 800814a:	1c02      	adds	r2, r0, #0
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	1c0a      	adds	r2, r1, #0
 8008152:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8008154:	46c0      	nop			; (mov r8, r8)
 8008156:	46bd      	mov	sp, r7
 8008158:	b002      	add	sp, #8
 800815a:	bd80      	pop	{r7, pc}

0800815c <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6039      	str	r1, [r7, #0]
 8008164:	0011      	movs	r1, r2
 8008166:	1dbb      	adds	r3, r7, #6
 8008168:	1c02      	adds	r2, r0, #0
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	1d3b      	adds	r3, r7, #4
 800816e:	1c0a      	adds	r2, r1, #0
 8008170:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	46bd      	mov	sp, r7
 8008176:	b002      	add	sp, #8
 8008178:	bd80      	pop	{r7, pc}

0800817a <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800817a:	b5b0      	push	{r4, r5, r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	0005      	movs	r5, r0
 8008182:	000c      	movs	r4, r1
 8008184:	0010      	movs	r0, r2
 8008186:	0019      	movs	r1, r3
 8008188:	1dbb      	adds	r3, r7, #6
 800818a:	1c2a      	adds	r2, r5, #0
 800818c:	801a      	strh	r2, [r3, #0]
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	1c22      	adds	r2, r4, #0
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	1cbb      	adds	r3, r7, #2
 8008196:	1c02      	adds	r2, r0, #0
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	003b      	movs	r3, r7
 800819c:	1c0a      	adds	r2, r1, #0
 800819e:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 80081a0:	46c0      	nop			; (mov r8, r8)
 80081a2:	46bd      	mov	sp, r7
 80081a4:	b002      	add	sp, #8
 80081a6:	bdb0      	pop	{r4, r5, r7, pc}

080081a8 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	0002      	movs	r2, r0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	1dfb      	adds	r3, r7, #7
 80081b4:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b002      	add	sp, #8
 80081bc:	bd80      	pop	{r7, pc}

080081be <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	0002      	movs	r2, r0
 80081c6:	6039      	str	r1, [r7, #0]
 80081c8:	1dfb      	adds	r3, r7, #7
 80081ca:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 80081cc:	46c0      	nop			; (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b002      	add	sp, #8
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 80081d4:	b5b0      	push	{r4, r5, r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	0005      	movs	r5, r0
 80081dc:	000c      	movs	r4, r1
 80081de:	0010      	movs	r0, r2
 80081e0:	0019      	movs	r1, r3
 80081e2:	1dfb      	adds	r3, r7, #7
 80081e4:	1c2a      	adds	r2, r5, #0
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	1d3b      	adds	r3, r7, #4
 80081ea:	1c22      	adds	r2, r4, #0
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	1dbb      	adds	r3, r7, #6
 80081f0:	1c02      	adds	r2, r0, #0
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	1cfb      	adds	r3, r7, #3
 80081f6:	1c0a      	adds	r2, r1, #0
 80081f8:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	46bd      	mov	sp, r7
 80081fe:	b002      	add	sp, #8
 8008200:	bdb0      	pop	{r4, r5, r7, pc}

08008202 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	0002      	movs	r2, r0
 800820a:	6039      	str	r1, [r7, #0]
 800820c:	1dfb      	adds	r3, r7, #7
 800820e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8008210:	46c0      	nop			; (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	b002      	add	sp, #8
 8008216:	bd80      	pop	{r7, pc}

08008218 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800821c:	46c0      	nop			; (mov r8, r8)
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	0002      	movs	r2, r0
 800822a:	1dbb      	adds	r3, r7, #6
 800822c:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b002      	add	sp, #8
 8008234:	bd80      	pop	{r7, pc}

08008236 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8008236:	b580      	push	{r7, lr}
 8008238:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8008244:	46c0      	nop			; (mov r8, r8)
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800824a:	b590      	push	{r4, r7, lr}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	0004      	movs	r4, r0
 8008252:	0008      	movs	r0, r1
 8008254:	0011      	movs	r1, r2
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	1dfb      	adds	r3, r7, #7
 800825a:	1c22      	adds	r2, r4, #0
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	1dbb      	adds	r3, r7, #6
 8008260:	1c02      	adds	r2, r0, #0
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	1d7b      	adds	r3, r7, #5
 8008266:	1c0a      	adds	r2, r1, #0
 8008268:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	46bd      	mov	sp, r7
 800826e:	b003      	add	sp, #12
 8008270:	bd90      	pop	{r4, r7, pc}

08008272 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	0002      	movs	r2, r0
 800827a:	1dbb      	adds	r3, r7, #6
 800827c:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	46bd      	mov	sp, r7
 8008282:	b002      	add	sp, #8
 8008284:	bd80      	pop	{r7, pc}

08008286 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	0002      	movs	r2, r0
 800828e:	6039      	str	r1, [r7, #0]
 8008290:	1dbb      	adds	r3, r7, #6
 8008292:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8008294:	46c0      	nop			; (mov r8, r8)
 8008296:	46bd      	mov	sp, r7
 8008298:	b002      	add	sp, #8
 800829a:	bd80      	pop	{r7, pc}

0800829c <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	0002      	movs	r2, r0
 80082a4:	1dbb      	adds	r3, r7, #6
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	1d7b      	adds	r3, r7, #5
 80082aa:	1c0a      	adds	r2, r1, #0
 80082ac:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	46bd      	mov	sp, r7
 80082b2:	b002      	add	sp, #8
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	0002      	movs	r2, r0
 80082be:	1dbb      	adds	r3, r7, #6
 80082c0:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b002      	add	sp, #8
 80082c8:	bd80      	pop	{r7, pc}

080082ca <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	0002      	movs	r2, r0
 80082d2:	1dbb      	adds	r3, r7, #6
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	1d3b      	adds	r3, r7, #4
 80082d8:	1c0a      	adds	r2, r1, #0
 80082da:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 80082dc:	46c0      	nop			; (mov r8, r8)
 80082de:	46bd      	mov	sp, r7
 80082e0:	b002      	add	sp, #8
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 80082e4:	b590      	push	{r4, r7, lr}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	0004      	movs	r4, r0
 80082ec:	0008      	movs	r0, r1
 80082ee:	0011      	movs	r1, r2
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	1dbb      	adds	r3, r7, #6
 80082f4:	1c22      	adds	r2, r4, #0
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	1d7b      	adds	r3, r7, #5
 80082fa:	1c02      	adds	r2, r0, #0
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	1d3b      	adds	r3, r7, #4
 8008300:	1c0a      	adds	r2, r1, #0
 8008302:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8008304:	46c0      	nop			; (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	b003      	add	sp, #12
 800830a:	bd90      	pop	{r4, r7, pc}

0800830c <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	603a      	str	r2, [r7, #0]
 8008314:	1dbb      	adds	r3, r7, #6
 8008316:	1c02      	adds	r2, r0, #0
 8008318:	801a      	strh	r2, [r3, #0]
 800831a:	1d7b      	adds	r3, r7, #5
 800831c:	1c0a      	adds	r2, r1, #0
 800831e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8008320:	46c0      	nop			; (mov r8, r8)
 8008322:	46bd      	mov	sp, r7
 8008324:	b002      	add	sp, #8
 8008326:	bd80      	pop	{r7, pc}

08008328 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8008328:	b590      	push	{r4, r7, lr}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	0004      	movs	r4, r0
 8008330:	0008      	movs	r0, r1
 8008332:	0011      	movs	r1, r2
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	1dbb      	adds	r3, r7, #6
 8008338:	1c22      	adds	r2, r4, #0
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	1d7b      	adds	r3, r7, #5
 800833e:	1c02      	adds	r2, r0, #0
 8008340:	701a      	strb	r2, [r3, #0]
 8008342:	1d3b      	adds	r3, r7, #4
 8008344:	1c0a      	adds	r2, r1, #0
 8008346:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8008348:	46c0      	nop			; (mov r8, r8)
 800834a:	46bd      	mov	sp, r7
 800834c:	b003      	add	sp, #12
 800834e:	bd90      	pop	{r4, r7, pc}

08008350 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	603a      	str	r2, [r7, #0]
 8008358:	1dbb      	adds	r3, r7, #6
 800835a:	1c02      	adds	r2, r0, #0
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	1d7b      	adds	r3, r7, #5
 8008360:	1c0a      	adds	r2, r1, #0
 8008362:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8008364:	46c0      	nop			; (mov r8, r8)
 8008366:	46bd      	mov	sp, r7
 8008368:	b002      	add	sp, #8
 800836a:	bd80      	pop	{r7, pc}

0800836c <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	603a      	str	r2, [r7, #0]
 8008374:	1dbb      	adds	r3, r7, #6
 8008376:	1c02      	adds	r2, r0, #0
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	1d7b      	adds	r3, r7, #5
 800837c:	1c0a      	adds	r2, r1, #0
 800837e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8008380:	46c0      	nop			; (mov r8, r8)
 8008382:	46bd      	mov	sp, r7
 8008384:	b002      	add	sp, #8
 8008386:	bd80      	pop	{r7, pc}

08008388 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	603a      	str	r2, [r7, #0]
 8008390:	1dbb      	adds	r3, r7, #6
 8008392:	1c02      	adds	r2, r0, #0
 8008394:	801a      	strh	r2, [r3, #0]
 8008396:	1d7b      	adds	r3, r7, #5
 8008398:	1c0a      	adds	r2, r1, #0
 800839a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800839c:	46c0      	nop			; (mov r8, r8)
 800839e:	46bd      	mov	sp, r7
 80083a0:	b002      	add	sp, #8
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	0004      	movs	r4, r0
 80083ac:	0008      	movs	r0, r1
 80083ae:	0011      	movs	r1, r2
 80083b0:	603b      	str	r3, [r7, #0]
 80083b2:	1dbb      	adds	r3, r7, #6
 80083b4:	1c22      	adds	r2, r4, #0
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	1d7b      	adds	r3, r7, #5
 80083ba:	1c02      	adds	r2, r0, #0
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	1c0a      	adds	r2, r1, #0
 80083c2:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 80083c4:	46c0      	nop			; (mov r8, r8)
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b003      	add	sp, #12
 80083ca:	bd90      	pop	{r4, r7, pc}

080083cc <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 80083cc:	b5b0      	push	{r4, r5, r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	0005      	movs	r5, r0
 80083d4:	000c      	movs	r4, r1
 80083d6:	0010      	movs	r0, r2
 80083d8:	0019      	movs	r1, r3
 80083da:	1dbb      	adds	r3, r7, #6
 80083dc:	1c2a      	adds	r2, r5, #0
 80083de:	801a      	strh	r2, [r3, #0]
 80083e0:	1d3b      	adds	r3, r7, #4
 80083e2:	1c22      	adds	r2, r4, #0
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	1cbb      	adds	r3, r7, #2
 80083e8:	1c02      	adds	r2, r0, #0
 80083ea:	801a      	strh	r2, [r3, #0]
 80083ec:	1c7b      	adds	r3, r7, #1
 80083ee:	1c0a      	adds	r2, r1, #0
 80083f0:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	46bd      	mov	sp, r7
 80083f6:	b002      	add	sp, #8
 80083f8:	bdb0      	pop	{r4, r5, r7, pc}

080083fa <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	0002      	movs	r2, r0
 8008402:	1dbb      	adds	r3, r7, #6
 8008404:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	46bd      	mov	sp, r7
 800840a:	b002      	add	sp, #8
 800840c:	bd80      	pop	{r7, pc}

0800840e <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800840e:	b590      	push	{r4, r7, lr}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	0004      	movs	r4, r0
 8008416:	0008      	movs	r0, r1
 8008418:	0011      	movs	r1, r2
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	230e      	movs	r3, #14
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	1c22      	adds	r2, r4, #0
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	230c      	movs	r3, #12
 8008426:	18fb      	adds	r3, r7, r3
 8008428:	1c02      	adds	r2, r0, #0
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	230b      	movs	r3, #11
 800842e:	18fb      	adds	r3, r7, r3
 8008430:	1c0a      	adds	r2, r1, #0
 8008432:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8008434:	46c0      	nop			; (mov r8, r8)
 8008436:	46bd      	mov	sp, r7
 8008438:	b005      	add	sp, #20
 800843a:	bd90      	pop	{r4, r7, pc}

0800843c <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	0004      	movs	r4, r0
 8008444:	0008      	movs	r0, r1
 8008446:	0011      	movs	r1, r2
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	230e      	movs	r3, #14
 800844c:	18fb      	adds	r3, r7, r3
 800844e:	1c22      	adds	r2, r4, #0
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	230c      	movs	r3, #12
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	1c02      	adds	r2, r0, #0
 8008458:	801a      	strh	r2, [r3, #0]
 800845a:	230b      	movs	r3, #11
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	1c0a      	adds	r2, r1, #0
 8008460:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	46bd      	mov	sp, r7
 8008466:	b005      	add	sp, #20
 8008468:	bd90      	pop	{r4, r7, pc}

0800846a <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	0002      	movs	r2, r0
 8008472:	1dbb      	adds	r3, r7, #6
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	1d7b      	adds	r3, r7, #5
 8008478:	1c0a      	adds	r2, r1, #0
 800847a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800847c:	46c0      	nop			; (mov r8, r8)
 800847e:	46bd      	mov	sp, r7
 8008480:	b002      	add	sp, #8
 8008482:	bd80      	pop	{r7, pc}

08008484 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8008484:	b5b0      	push	{r4, r5, r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	0005      	movs	r5, r0
 800848c:	000c      	movs	r4, r1
 800848e:	0010      	movs	r0, r2
 8008490:	0019      	movs	r1, r3
 8008492:	1dbb      	adds	r3, r7, #6
 8008494:	1c2a      	adds	r2, r5, #0
 8008496:	801a      	strh	r2, [r3, #0]
 8008498:	1d7b      	adds	r3, r7, #5
 800849a:	1c22      	adds	r2, r4, #0
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	1cbb      	adds	r3, r7, #2
 80084a0:	1c02      	adds	r2, r0, #0
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	1d3b      	adds	r3, r7, #4
 80084a6:	1c0a      	adds	r2, r1, #0
 80084a8:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	46bd      	mov	sp, r7
 80084ae:	b002      	add	sp, #8
 80084b0:	bdb0      	pop	{r4, r5, r7, pc}

080084b2 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 80084b2:	b590      	push	{r4, r7, lr}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	0004      	movs	r4, r0
 80084ba:	0008      	movs	r0, r1
 80084bc:	0011      	movs	r1, r2
 80084be:	607b      	str	r3, [r7, #4]
 80084c0:	230e      	movs	r3, #14
 80084c2:	18fb      	adds	r3, r7, r3
 80084c4:	1c22      	adds	r2, r4, #0
 80084c6:	801a      	strh	r2, [r3, #0]
 80084c8:	230c      	movs	r3, #12
 80084ca:	18fb      	adds	r3, r7, r3
 80084cc:	1c02      	adds	r2, r0, #0
 80084ce:	801a      	strh	r2, [r3, #0]
 80084d0:	230b      	movs	r3, #11
 80084d2:	18fb      	adds	r3, r7, r3
 80084d4:	1c0a      	adds	r2, r1, #0
 80084d6:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 80084d8:	46c0      	nop			; (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	b005      	add	sp, #20
 80084de:	bd90      	pop	{r4, r7, pc}

080084e0 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 80084e0:	b590      	push	{r4, r7, lr}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	0004      	movs	r4, r0
 80084e8:	0008      	movs	r0, r1
 80084ea:	0011      	movs	r1, r2
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	230e      	movs	r3, #14
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	1c22      	adds	r2, r4, #0
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	230c      	movs	r3, #12
 80084f8:	18fb      	adds	r3, r7, r3
 80084fa:	1c02      	adds	r2, r0, #0
 80084fc:	801a      	strh	r2, [r3, #0]
 80084fe:	230b      	movs	r3, #11
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	1c0a      	adds	r2, r1, #0
 8008504:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	46bd      	mov	sp, r7
 800850a:	b005      	add	sp, #20
 800850c:	bd90      	pop	{r4, r7, pc}

0800850e <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	603a      	str	r2, [r7, #0]
 8008516:	1dbb      	adds	r3, r7, #6
 8008518:	1c02      	adds	r2, r0, #0
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	1d7b      	adds	r3, r7, #5
 800851e:	1c0a      	adds	r2, r1, #0
 8008520:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	46bd      	mov	sp, r7
 8008526:	b002      	add	sp, #8
 8008528:	bd80      	pop	{r7, pc}

0800852a <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	0002      	movs	r2, r0
 8008532:	1dbb      	adds	r3, r7, #6
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	1d3b      	adds	r3, r7, #4
 8008538:	1c0a      	adds	r2, r1, #0
 800853a:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800853c:	46c0      	nop			; (mov r8, r8)
 800853e:	46bd      	mov	sp, r7
 8008540:	b002      	add	sp, #8
 8008542:	bd80      	pop	{r7, pc}

08008544 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	0002      	movs	r2, r0
 800854c:	1dbb      	adds	r3, r7, #6
 800854e:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8008550:	46c0      	nop			; (mov r8, r8)
 8008552:	46bd      	mov	sp, r7
 8008554:	b002      	add	sp, #8
 8008556:	bd80      	pop	{r7, pc}

08008558 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8008558:	b5b0      	push	{r4, r5, r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	0005      	movs	r5, r0
 8008560:	000c      	movs	r4, r1
 8008562:	0010      	movs	r0, r2
 8008564:	0019      	movs	r1, r3
 8008566:	1dbb      	adds	r3, r7, #6
 8008568:	1c2a      	adds	r2, r5, #0
 800856a:	801a      	strh	r2, [r3, #0]
 800856c:	1d3b      	adds	r3, r7, #4
 800856e:	1c22      	adds	r2, r4, #0
 8008570:	801a      	strh	r2, [r3, #0]
 8008572:	1cbb      	adds	r3, r7, #2
 8008574:	1c02      	adds	r2, r0, #0
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	1c7b      	adds	r3, r7, #1
 800857a:	1c0a      	adds	r2, r1, #0
 800857c:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800857e:	46c0      	nop			; (mov r8, r8)
 8008580:	46bd      	mov	sp, r7
 8008582:	b002      	add	sp, #8
 8008584:	bdb0      	pop	{r4, r5, r7, pc}

08008586 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	0002      	movs	r2, r0
 800858e:	1dbb      	adds	r3, r7, #6
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	1d3b      	adds	r3, r7, #4
 8008594:	1c0a      	adds	r2, r1, #0
 8008596:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8008598:	46c0      	nop			; (mov r8, r8)
 800859a:	46bd      	mov	sp, r7
 800859c:	b002      	add	sp, #8
 800859e:	bd80      	pop	{r7, pc}

080085a0 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	603a      	str	r2, [r7, #0]
 80085a8:	1dbb      	adds	r3, r7, #6
 80085aa:	1c02      	adds	r2, r0, #0
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	1d7b      	adds	r3, r7, #5
 80085b0:	1c0a      	adds	r2, r1, #0
 80085b2:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 80085b4:	46c0      	nop			; (mov r8, r8)
 80085b6:	46bd      	mov	sp, r7
 80085b8:	b002      	add	sp, #8
 80085ba:	bd80      	pop	{r7, pc}

080085bc <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 80085bc:	b5b0      	push	{r4, r5, r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	0005      	movs	r5, r0
 80085c4:	000c      	movs	r4, r1
 80085c6:	0010      	movs	r0, r2
 80085c8:	0019      	movs	r1, r3
 80085ca:	1dbb      	adds	r3, r7, #6
 80085cc:	1c2a      	adds	r2, r5, #0
 80085ce:	801a      	strh	r2, [r3, #0]
 80085d0:	1d7b      	adds	r3, r7, #5
 80085d2:	1c22      	adds	r2, r4, #0
 80085d4:	701a      	strb	r2, [r3, #0]
 80085d6:	1cbb      	adds	r3, r7, #2
 80085d8:	1c02      	adds	r2, r0, #0
 80085da:	801a      	strh	r2, [r3, #0]
 80085dc:	003b      	movs	r3, r7
 80085de:	1c0a      	adds	r2, r1, #0
 80085e0:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	46bd      	mov	sp, r7
 80085e6:	b002      	add	sp, #8
 80085e8:	bdb0      	pop	{r4, r5, r7, pc}

080085ea <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 80085ea:	b5b0      	push	{r4, r5, r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	0005      	movs	r5, r0
 80085f2:	000c      	movs	r4, r1
 80085f4:	0010      	movs	r0, r2
 80085f6:	0019      	movs	r1, r3
 80085f8:	1dbb      	adds	r3, r7, #6
 80085fa:	1c2a      	adds	r2, r5, #0
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	1d7b      	adds	r3, r7, #5
 8008600:	1c22      	adds	r2, r4, #0
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	1cbb      	adds	r3, r7, #2
 8008606:	1c02      	adds	r2, r0, #0
 8008608:	801a      	strh	r2, [r3, #0]
 800860a:	1d3b      	adds	r3, r7, #4
 800860c:	1c0a      	adds	r2, r1, #0
 800860e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8008610:	46c0      	nop			; (mov r8, r8)
 8008612:	46bd      	mov	sp, r7
 8008614:	b002      	add	sp, #8
 8008616:	bdb0      	pop	{r4, r5, r7, pc}

08008618 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	0002      	movs	r2, r0
 8008620:	1dfb      	adds	r3, r7, #7
 8008622:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8008624:	46c0      	nop			; (mov r8, r8)
 8008626:	46bd      	mov	sp, r7
 8008628:	b002      	add	sp, #8
 800862a:	bd80      	pop	{r7, pc}

0800862c <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8008634:	46c0      	nop			; (mov r8, r8)
 8008636:	46bd      	mov	sp, r7
 8008638:	b002      	add	sp, #8
 800863a:	bd80      	pop	{r7, pc}

0800863c <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	230f      	movs	r3, #15
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	1c02      	adds	r2, r0, #0
 800864e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8008650:	46c0      	nop			; (mov r8, r8)
 8008652:	46bd      	mov	sp, r7
 8008654:	b004      	add	sp, #16
 8008656:	bd80      	pop	{r7, pc}

08008658 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	603a      	str	r2, [r7, #0]
 8008660:	1dfb      	adds	r3, r7, #7
 8008662:	1c02      	adds	r2, r0, #0
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	1dbb      	adds	r3, r7, #6
 8008668:	1c0a      	adds	r2, r1, #0
 800866a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800866c:	46c0      	nop			; (mov r8, r8)
 800866e:	46bd      	mov	sp, r7
 8008670:	b002      	add	sp, #8
 8008672:	bd80      	pop	{r7, pc}

08008674 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	603a      	str	r2, [r7, #0]
 800867c:	1dfb      	adds	r3, r7, #7
 800867e:	1c02      	adds	r2, r0, #0
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	1dbb      	adds	r3, r7, #6
 8008684:	1c0a      	adds	r2, r1, #0
 8008686:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8008688:	46c0      	nop			; (mov r8, r8)
 800868a:	46bd      	mov	sp, r7
 800868c:	b002      	add	sp, #8
 800868e:	bd80      	pop	{r7, pc}

08008690 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	603a      	str	r2, [r7, #0]
 8008698:	1dfb      	adds	r3, r7, #7
 800869a:	1c02      	adds	r2, r0, #0
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	1dbb      	adds	r3, r7, #6
 80086a0:	1c0a      	adds	r2, r1, #0
 80086a2:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 80086a4:	46c0      	nop			; (mov r8, r8)
 80086a6:	46bd      	mov	sp, r7
 80086a8:	b002      	add	sp, #8
 80086aa:	bd80      	pop	{r7, pc}

080086ac <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80086ac:	b590      	push	{r4, r7, lr}
 80086ae:	b089      	sub	sp, #36	; 0x24
 80086b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80086b2:	1dfb      	adds	r3, r7, #7
 80086b4:	2200      	movs	r2, #0
 80086b6:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80086b8:	2408      	movs	r4, #8
 80086ba:	193b      	adds	r3, r7, r4
 80086bc:	2218      	movs	r2, #24
 80086be:	2100      	movs	r1, #0
 80086c0:	0018      	movs	r0, r3
 80086c2:	f001 ffb4 	bl	800a62e <memset>
  rq.ogf = 0x03;
 80086c6:	0021      	movs	r1, r4
 80086c8:	187b      	adds	r3, r7, r1
 80086ca:	2203      	movs	r2, #3
 80086cc:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x003;
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	2203      	movs	r2, #3
 80086d2:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	1dfa      	adds	r2, r7, #7
 80086d8:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80086da:	187b      	adds	r3, r7, r1
 80086dc:	2201      	movs	r2, #1
 80086de:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 80086e0:	187b      	adds	r3, r7, r1
 80086e2:	2100      	movs	r1, #0
 80086e4:	0018      	movs	r0, r3
 80086e6:	f001 fca9 	bl	800a03c <hci_send_req>
 80086ea:	1e03      	subs	r3, r0, #0
 80086ec:	da01      	bge.n	80086f2 <hci_reset+0x46>
    return BLE_STATUS_TIMEOUT;
 80086ee:	23ff      	movs	r3, #255	; 0xff
 80086f0:	e007      	b.n	8008702 <hci_reset+0x56>
  if (status) {
 80086f2:	1dfb      	adds	r3, r7, #7
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <hci_reset+0x54>
    return status;
 80086fa:	1dfb      	adds	r3, r7, #7
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	e000      	b.n	8008702 <hci_reset+0x56>
  }
  return BLE_STATUS_SUCCESS;
 8008700:	2300      	movs	r3, #0
}
 8008702:	0018      	movs	r0, r3
 8008704:	46bd      	mov	sp, r7
 8008706:	b009      	add	sp, #36	; 0x24
 8008708:	bd90      	pop	{r4, r7, pc}

0800870a <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800870a:	b5b0      	push	{r4, r5, r7, lr}
 800870c:	b08e      	sub	sp, #56	; 0x38
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008718:	2514      	movs	r5, #20
 800871a:	197b      	adds	r3, r7, r5
 800871c:	2209      	movs	r2, #9
 800871e:	2100      	movs	r1, #0
 8008720:	0018      	movs	r0, r3
 8008722:	f001 ff84 	bl	800a62e <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008726:	2420      	movs	r4, #32
 8008728:	193b      	adds	r3, r7, r4
 800872a:	2218      	movs	r2, #24
 800872c:	2100      	movs	r1, #0
 800872e:	0018      	movs	r0, r3
 8008730:	f001 ff7d 	bl	800a62e <memset>
  rq.ogf = 0x04;
 8008734:	0021      	movs	r1, r4
 8008736:	187b      	adds	r3, r7, r1
 8008738:	2204      	movs	r2, #4
 800873a:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x001;
 800873c:	187b      	adds	r3, r7, r1
 800873e:	2201      	movs	r2, #1
 8008740:	805a      	strh	r2, [r3, #2]
  rq.rparam = &resp;
 8008742:	187b      	adds	r3, r7, r1
 8008744:	197a      	adds	r2, r7, r5
 8008746:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 8008748:	187b      	adds	r3, r7, r1
 800874a:	2209      	movs	r2, #9
 800874c:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800874e:	187b      	adds	r3, r7, r1
 8008750:	2100      	movs	r1, #0
 8008752:	0018      	movs	r0, r3
 8008754:	f001 fc72 	bl	800a03c <hci_send_req>
 8008758:	1e03      	subs	r3, r0, #0
 800875a:	da01      	bge.n	8008760 <hci_read_local_version_information+0x56>
    return BLE_STATUS_TIMEOUT;
 800875c:	23ff      	movs	r3, #255	; 0xff
 800875e:	e024      	b.n	80087aa <hci_read_local_version_information+0xa0>
  if (resp.Status) {
 8008760:	2214      	movs	r2, #20
 8008762:	18bb      	adds	r3, r7, r2
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <hci_read_local_version_information+0x66>
    return resp.Status;
 800876a:	18bb      	adds	r3, r7, r2
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	e01c      	b.n	80087aa <hci_read_local_version_information+0xa0>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 8008770:	2114      	movs	r1, #20
 8008772:	187b      	adds	r3, r7, r1
 8008774:	785a      	ldrb	r2, [r3, #1]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800877a:	187b      	adds	r3, r7, r1
 800877c:	885a      	ldrh	r2, [r3, #2]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 8008782:	187b      	adds	r3, r7, r1
 8008784:	791a      	ldrb	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800878a:	187b      	adds	r3, r7, r1
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	0c1b      	lsrs	r3, r3, #16
 8008792:	b29a      	uxth	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 8008798:	187b      	adds	r3, r7, r1
 800879a:	79da      	ldrb	r2, [r3, #7]
 800879c:	7a1b      	ldrb	r3, [r3, #8]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	4313      	orrs	r3, r2
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	0018      	movs	r0, r3
 80087ac:	46bd      	mov	sp, r7
 80087ae:	b00e      	add	sp, #56	; 0x38
 80087b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080087b4 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 80087b4:	b5b0      	push	{r4, r5, r7, lr}
 80087b6:	b0cc      	sub	sp, #304	; 0x130
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	0002      	movs	r2, r0
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	4b36      	ldr	r3, [pc, #216]	; (8008898 <hci_le_set_scan_response_data+0xe4>)
 80087c0:	2198      	movs	r1, #152	; 0x98
 80087c2:	0049      	lsls	r1, r1, #1
 80087c4:	185b      	adds	r3, r3, r1
 80087c6:	19db      	adds	r3, r3, r7
 80087c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80087ca:	230c      	movs	r3, #12
 80087cc:	18fb      	adds	r3, r7, r3
 80087ce:	2096      	movs	r0, #150	; 0x96
 80087d0:	0040      	lsls	r0, r0, #1
 80087d2:	183a      	adds	r2, r7, r0
 80087d4:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 80087d6:	4b31      	ldr	r3, [pc, #196]	; (800889c <hci_le_set_scan_response_data+0xe8>)
 80087d8:	185b      	adds	r3, r3, r1
 80087da:	19db      	adds	r3, r3, r7
 80087dc:	2200      	movs	r2, #0
 80087de:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80087e0:	242c      	movs	r4, #44	; 0x2c
 80087e2:	34ff      	adds	r4, #255	; 0xff
 80087e4:	193b      	adds	r3, r7, r4
 80087e6:	2200      	movs	r2, #0
 80087e8:	701a      	strb	r2, [r3, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80087ea:	183b      	adds	r3, r7, r0
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a2a      	ldr	r2, [pc, #168]	; (8008898 <hci_le_set_scan_response_data+0xe4>)
 80087f0:	1852      	adds	r2, r2, r1
 80087f2:	19d2      	adds	r2, r2, r7
 80087f4:	7812      	ldrb	r2, [r2, #0]
 80087f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80087f8:	193b      	adds	r3, r7, r4
 80087fa:	193a      	adds	r2, r7, r4
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	3201      	adds	r2, #1
 8008800:	701a      	strb	r2, [r3, #0]
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d007      	beq.n	8008818 <hci_le_set_scan_response_data+0x64>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8008808:	183b      	adds	r3, r7, r0
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3301      	adds	r3, #1
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	221f      	movs	r2, #31
 8008812:	0018      	movs	r0, r3
 8008814:	f001 ff02 	bl	800a61c <memcpy>
  }
  index_input += 31;
 8008818:	252c      	movs	r5, #44	; 0x2c
 800881a:	35ff      	adds	r5, #255	; 0xff
 800881c:	197b      	adds	r3, r7, r5
 800881e:	197a      	adds	r2, r7, r5
 8008820:	7812      	ldrb	r2, [r2, #0]
 8008822:	321f      	adds	r2, #31
 8008824:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008826:	2488      	movs	r4, #136	; 0x88
 8008828:	0064      	lsls	r4, r4, #1
 800882a:	193b      	adds	r3, r7, r4
 800882c:	2218      	movs	r2, #24
 800882e:	2100      	movs	r1, #0
 8008830:	0018      	movs	r0, r3
 8008832:	f001 fefc 	bl	800a62e <memset>
  rq.ogf = 0x08;
 8008836:	0021      	movs	r1, r4
 8008838:	187b      	adds	r3, r7, r1
 800883a:	2208      	movs	r2, #8
 800883c:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x009;
 800883e:	187b      	adds	r3, r7, r1
 8008840:	2209      	movs	r2, #9
 8008842:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8008844:	187b      	adds	r3, r7, r1
 8008846:	220c      	movs	r2, #12
 8008848:	18ba      	adds	r2, r7, r2
 800884a:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800884c:	197b      	adds	r3, r7, r5
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	187b      	adds	r3, r7, r1
 8008852:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8008854:	187b      	adds	r3, r7, r1
 8008856:	220b      	movs	r2, #11
 8008858:	18ba      	adds	r2, r7, r2
 800885a:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800885c:	187b      	adds	r3, r7, r1
 800885e:	2201      	movs	r2, #1
 8008860:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8008862:	187b      	adds	r3, r7, r1
 8008864:	2100      	movs	r1, #0
 8008866:	0018      	movs	r0, r3
 8008868:	f001 fbe8 	bl	800a03c <hci_send_req>
 800886c:	1e03      	subs	r3, r0, #0
 800886e:	da01      	bge.n	8008874 <hci_le_set_scan_response_data+0xc0>
    return BLE_STATUS_TIMEOUT;
 8008870:	23ff      	movs	r3, #255	; 0xff
 8008872:	e00d      	b.n	8008890 <hci_le_set_scan_response_data+0xdc>
  if (status) {
 8008874:	4b09      	ldr	r3, [pc, #36]	; (800889c <hci_le_set_scan_response_data+0xe8>)
 8008876:	2298      	movs	r2, #152	; 0x98
 8008878:	0052      	lsls	r2, r2, #1
 800887a:	189b      	adds	r3, r3, r2
 800887c:	19db      	adds	r3, r3, r7
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <hci_le_set_scan_response_data+0xda>
    return status;
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <hci_le_set_scan_response_data+0xe8>)
 8008886:	189b      	adds	r3, r3, r2
 8008888:	19db      	adds	r3, r3, r7
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	e000      	b.n	8008890 <hci_le_set_scan_response_data+0xdc>
  }
  return BLE_STATUS_SUCCESS;
 800888e:	2300      	movs	r3, #0
}
 8008890:	0018      	movs	r0, r3
 8008892:	46bd      	mov	sp, r7
 8008894:	b04c      	add	sp, #304	; 0x130
 8008896:	bdb0      	pop	{r4, r5, r7, pc}
 8008898:	fffffed7 	.word	0xfffffed7
 800889c:	fffffedb 	.word	0xfffffedb

080088a0 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 80088a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088a2:	b0cf      	sub	sp, #316	; 0x13c
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	0005      	movs	r5, r0
 80088a8:	000c      	movs	r4, r1
 80088aa:	0010      	movs	r0, r2
 80088ac:	0019      	movs	r1, r3
 80088ae:	4bb4      	ldr	r3, [pc, #720]	; (8008b80 <aci_gap_set_discoverable+0x2e0>)
 80088b0:	269c      	movs	r6, #156	; 0x9c
 80088b2:	0076      	lsls	r6, r6, #1
 80088b4:	199b      	adds	r3, r3, r6
 80088b6:	19db      	adds	r3, r3, r7
 80088b8:	1c2a      	adds	r2, r5, #0
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	4bb1      	ldr	r3, [pc, #708]	; (8008b84 <aci_gap_set_discoverable+0x2e4>)
 80088be:	0035      	movs	r5, r6
 80088c0:	195b      	adds	r3, r3, r5
 80088c2:	19db      	adds	r3, r3, r7
 80088c4:	1c22      	adds	r2, r4, #0
 80088c6:	801a      	strh	r2, [r3, #0]
 80088c8:	4baf      	ldr	r3, [pc, #700]	; (8008b88 <aci_gap_set_discoverable+0x2e8>)
 80088ca:	002c      	movs	r4, r5
 80088cc:	191b      	adds	r3, r3, r4
 80088ce:	19db      	adds	r3, r3, r7
 80088d0:	1c02      	adds	r2, r0, #0
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	4bad      	ldr	r3, [pc, #692]	; (8008b8c <aci_gap_set_discoverable+0x2ec>)
 80088d6:	0020      	movs	r0, r4
 80088d8:	181b      	adds	r3, r3, r0
 80088da:	19db      	adds	r3, r3, r7
 80088dc:	1c0a      	adds	r2, r1, #0
 80088de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80088e0:	240c      	movs	r4, #12
 80088e2:	193b      	adds	r3, r7, r4
 80088e4:	219a      	movs	r1, #154	; 0x9a
 80088e6:	0049      	lsls	r1, r1, #1
 80088e8:	187a      	adds	r2, r7, r1
 80088ea:	6013      	str	r3, [r2, #0]
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80088ec:	25a6      	movs	r5, #166	; 0xa6
 80088ee:	006d      	lsls	r5, r5, #1
 80088f0:	2608      	movs	r6, #8
 80088f2:	19ab      	adds	r3, r5, r6
 80088f4:	19db      	adds	r3, r3, r7
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	3308      	adds	r3, #8
 80088fa:	193a      	adds	r2, r7, r4
 80088fc:	18d3      	adds	r3, r2, r3
 80088fe:	2298      	movs	r2, #152	; 0x98
 8008900:	0052      	lsls	r2, r2, #1
 8008902:	18be      	adds	r6, r7, r2
 8008904:	6033      	str	r3, [r6, #0]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008906:	2608      	movs	r6, #8
 8008908:	19ab      	adds	r3, r5, r6
 800890a:	19db      	adds	r3, r3, r7
 800890c:	781a      	ldrb	r2, [r3, #0]
 800890e:	23aa      	movs	r3, #170	; 0xaa
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	199b      	adds	r3, r3, r6
 8008914:	19db      	adds	r3, r3, r7
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	18d3      	adds	r3, r2, r3
 800891a:	3309      	adds	r3, #9
 800891c:	193a      	adds	r2, r7, r4
 800891e:	18d3      	adds	r3, r2, r3
 8008920:	2696      	movs	r6, #150	; 0x96
 8008922:	0076      	lsls	r6, r6, #1
 8008924:	19ba      	adds	r2, r7, r6
 8008926:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 8008928:	4b99      	ldr	r3, [pc, #612]	; (8008b90 <aci_gap_set_discoverable+0x2f0>)
 800892a:	0006      	movs	r6, r0
 800892c:	199b      	adds	r3, r3, r6
 800892e:	19db      	adds	r3, r3, r7
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008934:	252c      	movs	r5, #44	; 0x2c
 8008936:	35ff      	adds	r5, #255	; 0xff
 8008938:	197b      	adds	r3, r7, r5
 800893a:	2200      	movs	r2, #0
 800893c:	701a      	strb	r2, [r3, #0]
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800893e:	187b      	adds	r3, r7, r1
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a8f      	ldr	r2, [pc, #572]	; (8008b80 <aci_gap_set_discoverable+0x2e0>)
 8008944:	1992      	adds	r2, r2, r6
 8008946:	19d2      	adds	r2, r2, r7
 8008948:	7812      	ldrb	r2, [r2, #0]
 800894a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800894c:	197b      	adds	r3, r7, r5
 800894e:	197a      	adds	r2, r7, r5
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	3201      	adds	r2, #1
 8008954:	701a      	strb	r2, [r3, #0]
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8008956:	187b      	adds	r3, r7, r1
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a8a      	ldr	r2, [pc, #552]	; (8008b84 <aci_gap_set_discoverable+0x2e4>)
 800895c:	1992      	adds	r2, r2, r6
 800895e:	19d2      	adds	r2, r2, r7
 8008960:	3301      	adds	r3, #1
 8008962:	7814      	ldrb	r4, [r2, #0]
 8008964:	7819      	ldrb	r1, [r3, #0]
 8008966:	2000      	movs	r0, #0
 8008968:	4001      	ands	r1, r0
 800896a:	1c08      	adds	r0, r1, #0
 800896c:	1c21      	adds	r1, r4, #0
 800896e:	4301      	orrs	r1, r0
 8008970:	7019      	strb	r1, [r3, #0]
 8008972:	7850      	ldrb	r0, [r2, #1]
 8008974:	785a      	ldrb	r2, [r3, #1]
 8008976:	2100      	movs	r1, #0
 8008978:	400a      	ands	r2, r1
 800897a:	1c11      	adds	r1, r2, #0
 800897c:	1c02      	adds	r2, r0, #0
 800897e:	430a      	orrs	r2, r1
 8008980:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 8008982:	197b      	adds	r3, r7, r5
 8008984:	197a      	adds	r2, r7, r5
 8008986:	7812      	ldrb	r2, [r2, #0]
 8008988:	3202      	adds	r2, #2
 800898a:	701a      	strb	r2, [r3, #0]
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800898c:	219a      	movs	r1, #154	; 0x9a
 800898e:	0049      	lsls	r1, r1, #1
 8008990:	187b      	adds	r3, r7, r1
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a7c      	ldr	r2, [pc, #496]	; (8008b88 <aci_gap_set_discoverable+0x2e8>)
 8008996:	1992      	adds	r2, r2, r6
 8008998:	19d2      	adds	r2, r2, r7
 800899a:	3303      	adds	r3, #3
 800899c:	7814      	ldrb	r4, [r2, #0]
 800899e:	7819      	ldrb	r1, [r3, #0]
 80089a0:	2000      	movs	r0, #0
 80089a2:	4001      	ands	r1, r0
 80089a4:	1c08      	adds	r0, r1, #0
 80089a6:	1c21      	adds	r1, r4, #0
 80089a8:	4301      	orrs	r1, r0
 80089aa:	7019      	strb	r1, [r3, #0]
 80089ac:	7850      	ldrb	r0, [r2, #1]
 80089ae:	785a      	ldrb	r2, [r3, #1]
 80089b0:	2100      	movs	r1, #0
 80089b2:	400a      	ands	r2, r1
 80089b4:	1c11      	adds	r1, r2, #0
 80089b6:	1c02      	adds	r2, r0, #0
 80089b8:	430a      	orrs	r2, r1
 80089ba:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 80089bc:	197b      	adds	r3, r7, r5
 80089be:	197a      	adds	r2, r7, r5
 80089c0:	7812      	ldrb	r2, [r2, #0]
 80089c2:	3202      	adds	r2, #2
 80089c4:	701a      	strb	r2, [r3, #0]
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80089c6:	219a      	movs	r1, #154	; 0x9a
 80089c8:	0049      	lsls	r1, r1, #1
 80089ca:	187b      	adds	r3, r7, r1
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a6f      	ldr	r2, [pc, #444]	; (8008b8c <aci_gap_set_discoverable+0x2ec>)
 80089d0:	1992      	adds	r2, r2, r6
 80089d2:	19d2      	adds	r2, r2, r7
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80089d8:	002c      	movs	r4, r5
 80089da:	193b      	adds	r3, r7, r4
 80089dc:	193a      	adds	r2, r7, r4
 80089de:	7812      	ldrb	r2, [r2, #0]
 80089e0:	3201      	adds	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 80089e4:	187b      	adds	r3, r7, r1
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	23a4      	movs	r3, #164	; 0xa4
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	2608      	movs	r6, #8
 80089ee:	199b      	adds	r3, r3, r6
 80089f0:	19db      	adds	r3, r3, r7
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	7193      	strb	r3, [r2, #6]
  index_input += 1;
 80089f6:	193b      	adds	r3, r7, r4
 80089f8:	193a      	adds	r2, r7, r4
 80089fa:	7812      	ldrb	r2, [r2, #0]
 80089fc:	3201      	adds	r2, #1
 80089fe:	701a      	strb	r2, [r3, #0]
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8008a00:	187b      	adds	r3, r7, r1
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	25a6      	movs	r5, #166	; 0xa6
 8008a06:	006d      	lsls	r5, r5, #1
 8008a08:	19aa      	adds	r2, r5, r6
 8008a0a:	19d2      	adds	r2, r2, r7
 8008a0c:	7812      	ldrb	r2, [r2, #0]
 8008a0e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008a10:	193b      	adds	r3, r7, r4
 8008a12:	193a      	adds	r2, r7, r4
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	3201      	adds	r2, #1
 8008a18:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008a1a:	187b      	adds	r3, r7, r1
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	0018      	movs	r0, r3
 8008a22:	19ab      	adds	r3, r5, r6
 8008a24:	19db      	adds	r3, r3, r7
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	23a8      	movs	r3, #168	; 0xa8
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	199b      	adds	r3, r3, r6
 8008a2e:	19db      	adds	r3, r3, r7
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	0019      	movs	r1, r3
 8008a34:	f001 fdf2 	bl	800a61c <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8008a38:	193b      	adds	r3, r7, r4
 8008a3a:	1939      	adds	r1, r7, r4
 8008a3c:	19aa      	adds	r2, r5, r6
 8008a3e:	19d2      	adds	r2, r2, r7
 8008a40:	7809      	ldrb	r1, [r1, #0]
 8008a42:	7812      	ldrb	r2, [r2, #0]
 8008a44:	188a      	adds	r2, r1, r2
 8008a46:	701a      	strb	r2, [r3, #0]
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8008a48:	2098      	movs	r0, #152	; 0x98
 8008a4a:	0040      	lsls	r0, r0, #1
 8008a4c:	183a      	adds	r2, r7, r0
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	21aa      	movs	r1, #170	; 0xaa
 8008a52:	0049      	lsls	r1, r1, #1
 8008a54:	198a      	adds	r2, r1, r6
 8008a56:	19d2      	adds	r2, r2, r7
 8008a58:	7812      	ldrb	r2, [r2, #0]
 8008a5a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008a5c:	193b      	adds	r3, r7, r4
 8008a5e:	0025      	movs	r5, r4
 8008a60:	193a      	adds	r2, r7, r4
 8008a62:	7812      	ldrb	r2, [r2, #0]
 8008a64:	3201      	adds	r2, #1
 8008a66:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8008a68:	183b      	adds	r3, r7, r0
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	1c58      	adds	r0, r3, #1
 8008a6e:	000e      	movs	r6, r1
 8008a70:	2408      	movs	r4, #8
 8008a72:	190b      	adds	r3, r1, r4
 8008a74:	19db      	adds	r3, r3, r7
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	23ac      	movs	r3, #172	; 0xac
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	191b      	adds	r3, r3, r4
 8008a7e:	19db      	adds	r3, r3, r7
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	0019      	movs	r1, r3
 8008a84:	f001 fdca 	bl	800a61c <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8008a88:	197b      	adds	r3, r7, r5
 8008a8a:	1979      	adds	r1, r7, r5
 8008a8c:	0020      	movs	r0, r4
 8008a8e:	1832      	adds	r2, r6, r0
 8008a90:	19d2      	adds	r2, r2, r7
 8008a92:	7809      	ldrb	r1, [r1, #0]
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	188a      	adds	r2, r1, r2
 8008a98:	701a      	strb	r2, [r3, #0]
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008a9a:	2696      	movs	r6, #150	; 0x96
 8008a9c:	0076      	lsls	r6, r6, #1
 8008a9e:	19bb      	adds	r3, r7, r6
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	22ae      	movs	r2, #174	; 0xae
 8008aa4:	0052      	lsls	r2, r2, #1
 8008aa6:	1812      	adds	r2, r2, r0
 8008aa8:	19d2      	adds	r2, r2, r7
 8008aaa:	7814      	ldrb	r4, [r2, #0]
 8008aac:	7819      	ldrb	r1, [r3, #0]
 8008aae:	2000      	movs	r0, #0
 8008ab0:	4001      	ands	r1, r0
 8008ab2:	1c08      	adds	r0, r1, #0
 8008ab4:	1c21      	adds	r1, r4, #0
 8008ab6:	4301      	orrs	r1, r0
 8008ab8:	7019      	strb	r1, [r3, #0]
 8008aba:	7850      	ldrb	r0, [r2, #1]
 8008abc:	785a      	ldrb	r2, [r3, #1]
 8008abe:	2100      	movs	r1, #0
 8008ac0:	400a      	ands	r2, r1
 8008ac2:	1c11      	adds	r1, r2, #0
 8008ac4:	1c02      	adds	r2, r0, #0
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	705a      	strb	r2, [r3, #1]
    }
    index_input += 2;
 8008aca:	197b      	adds	r3, r7, r5
 8008acc:	197a      	adds	r2, r7, r5
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	3202      	adds	r2, #2
 8008ad2:	701a      	strb	r2, [r3, #0]
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8008ad4:	19bb      	adds	r3, r7, r6
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	22b0      	movs	r2, #176	; 0xb0
 8008ada:	0052      	lsls	r2, r2, #1
 8008adc:	2008      	movs	r0, #8
 8008ade:	1812      	adds	r2, r2, r0
 8008ae0:	19d2      	adds	r2, r2, r7
 8008ae2:	7814      	ldrb	r4, [r2, #0]
 8008ae4:	7899      	ldrb	r1, [r3, #2]
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	4001      	ands	r1, r0
 8008aea:	1c08      	adds	r0, r1, #0
 8008aec:	1c21      	adds	r1, r4, #0
 8008aee:	4301      	orrs	r1, r0
 8008af0:	7099      	strb	r1, [r3, #2]
 8008af2:	7850      	ldrb	r0, [r2, #1]
 8008af4:	78da      	ldrb	r2, [r3, #3]
 8008af6:	2100      	movs	r1, #0
 8008af8:	400a      	ands	r2, r1
 8008afa:	1c11      	adds	r1, r2, #0
 8008afc:	1c02      	adds	r2, r0, #0
 8008afe:	430a      	orrs	r2, r1
 8008b00:	70da      	strb	r2, [r3, #3]
    }
    index_input += 2;
 8008b02:	197b      	adds	r3, r7, r5
 8008b04:	197a      	adds	r2, r7, r5
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	3202      	adds	r2, #2
 8008b0a:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b0c:	2488      	movs	r4, #136	; 0x88
 8008b0e:	0064      	lsls	r4, r4, #1
 8008b10:	193b      	adds	r3, r7, r4
 8008b12:	2218      	movs	r2, #24
 8008b14:	2100      	movs	r1, #0
 8008b16:	0018      	movs	r0, r3
 8008b18:	f001 fd89 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8008b1c:	0021      	movs	r1, r4
 8008b1e:	187b      	adds	r3, r7, r1
 8008b20:	223f      	movs	r2, #63	; 0x3f
 8008b22:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x083;
 8008b24:	187b      	adds	r3, r7, r1
 8008b26:	2283      	movs	r2, #131	; 0x83
 8008b28:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8008b2a:	187b      	adds	r3, r7, r1
 8008b2c:	240c      	movs	r4, #12
 8008b2e:	193a      	adds	r2, r7, r4
 8008b30:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8008b32:	197b      	adds	r3, r7, r5
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	187b      	adds	r3, r7, r1
 8008b38:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8008b3a:	187b      	adds	r3, r7, r1
 8008b3c:	220b      	movs	r2, #11
 8008b3e:	18ba      	adds	r2, r7, r2
 8008b40:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008b42:	187b      	adds	r3, r7, r1
 8008b44:	2201      	movs	r2, #1
 8008b46:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8008b48:	187b      	adds	r3, r7, r1
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f001 fa75 	bl	800a03c <hci_send_req>
 8008b52:	1e03      	subs	r3, r0, #0
 8008b54:	da01      	bge.n	8008b5a <aci_gap_set_discoverable+0x2ba>
    return BLE_STATUS_TIMEOUT;
 8008b56:	23ff      	movs	r3, #255	; 0xff
 8008b58:	e00d      	b.n	8008b76 <aci_gap_set_discoverable+0x2d6>
  if (status) {
 8008b5a:	4b0d      	ldr	r3, [pc, #52]	; (8008b90 <aci_gap_set_discoverable+0x2f0>)
 8008b5c:	229c      	movs	r2, #156	; 0x9c
 8008b5e:	0052      	lsls	r2, r2, #1
 8008b60:	189b      	adds	r3, r3, r2
 8008b62:	19db      	adds	r3, r3, r7
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <aci_gap_set_discoverable+0x2d4>
    return status;
 8008b6a:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <aci_gap_set_discoverable+0x2f0>)
 8008b6c:	189b      	adds	r3, r3, r2
 8008b6e:	19db      	adds	r3, r3, r7
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	e000      	b.n	8008b76 <aci_gap_set_discoverable+0x2d6>
  }
  return BLE_STATUS_SUCCESS;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	0018      	movs	r0, r3
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b04f      	add	sp, #316	; 0x13c
 8008b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	fffffecf 	.word	0xfffffecf
 8008b84:	fffffecc 	.word	0xfffffecc
 8008b88:	fffffeca 	.word	0xfffffeca
 8008b8c:	fffffece 	.word	0xfffffece
 8008b90:	fffffed3 	.word	0xfffffed3

08008b94 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8008b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b96:	b0cd      	sub	sp, #308	; 0x134
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	0002      	movs	r2, r0
 8008b9c:	4b2c      	ldr	r3, [pc, #176]	; (8008c50 <aci_gap_set_io_capability+0xbc>)
 8008b9e:	2198      	movs	r1, #152	; 0x98
 8008ba0:	0049      	lsls	r1, r1, #1
 8008ba2:	185b      	adds	r3, r3, r1
 8008ba4:	19db      	adds	r3, r3, r7
 8008ba6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008ba8:	260c      	movs	r6, #12
 8008baa:	19bb      	adds	r3, r7, r6
 8008bac:	2096      	movs	r0, #150	; 0x96
 8008bae:	0040      	lsls	r0, r0, #1
 8008bb0:	183a      	adds	r2, r7, r0
 8008bb2:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 8008bb4:	4b27      	ldr	r3, [pc, #156]	; (8008c54 <aci_gap_set_io_capability+0xc0>)
 8008bb6:	185b      	adds	r3, r3, r1
 8008bb8:	19db      	adds	r3, r3, r7
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008bbe:	252c      	movs	r5, #44	; 0x2c
 8008bc0:	35ff      	adds	r5, #255	; 0xff
 8008bc2:	197b      	adds	r3, r7, r5
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	701a      	strb	r2, [r3, #0]
  cp0->IO_Capability = htob(IO_Capability, 1);
 8008bc8:	183b      	adds	r3, r7, r0
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a20      	ldr	r2, [pc, #128]	; (8008c50 <aci_gap_set_io_capability+0xbc>)
 8008bce:	1852      	adds	r2, r2, r1
 8008bd0:	19d2      	adds	r2, r2, r7
 8008bd2:	7812      	ldrb	r2, [r2, #0]
 8008bd4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008bd6:	197b      	adds	r3, r7, r5
 8008bd8:	197a      	adds	r2, r7, r5
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	3201      	adds	r2, #1
 8008bde:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008be0:	2488      	movs	r4, #136	; 0x88
 8008be2:	0064      	lsls	r4, r4, #1
 8008be4:	193b      	adds	r3, r7, r4
 8008be6:	2218      	movs	r2, #24
 8008be8:	2100      	movs	r1, #0
 8008bea:	0018      	movs	r0, r3
 8008bec:	f001 fd1f 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8008bf0:	0021      	movs	r1, r4
 8008bf2:	187b      	adds	r3, r7, r1
 8008bf4:	223f      	movs	r2, #63	; 0x3f
 8008bf6:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x085;
 8008bf8:	187b      	adds	r3, r7, r1
 8008bfa:	2285      	movs	r2, #133	; 0x85
 8008bfc:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8008bfe:	187b      	adds	r3, r7, r1
 8008c00:	19ba      	adds	r2, r7, r6
 8008c02:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8008c04:	197b      	adds	r3, r7, r5
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	187b      	adds	r3, r7, r1
 8008c0a:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8008c0c:	187b      	adds	r3, r7, r1
 8008c0e:	220b      	movs	r2, #11
 8008c10:	18ba      	adds	r2, r7, r2
 8008c12:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008c14:	187b      	adds	r3, r7, r1
 8008c16:	2201      	movs	r2, #1
 8008c18:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8008c1a:	187b      	adds	r3, r7, r1
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f001 fa0c 	bl	800a03c <hci_send_req>
 8008c24:	1e03      	subs	r3, r0, #0
 8008c26:	da01      	bge.n	8008c2c <aci_gap_set_io_capability+0x98>
    return BLE_STATUS_TIMEOUT;
 8008c28:	23ff      	movs	r3, #255	; 0xff
 8008c2a:	e00d      	b.n	8008c48 <aci_gap_set_io_capability+0xb4>
  if (status) {
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <aci_gap_set_io_capability+0xc0>)
 8008c2e:	2298      	movs	r2, #152	; 0x98
 8008c30:	0052      	lsls	r2, r2, #1
 8008c32:	189b      	adds	r3, r3, r2
 8008c34:	19db      	adds	r3, r3, r7
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d004      	beq.n	8008c46 <aci_gap_set_io_capability+0xb2>
    return status;
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <aci_gap_set_io_capability+0xc0>)
 8008c3e:	189b      	adds	r3, r3, r2
 8008c40:	19db      	adds	r3, r3, r7
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	e000      	b.n	8008c48 <aci_gap_set_io_capability+0xb4>
  }
  return BLE_STATUS_SUCCESS;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	0018      	movs	r0, r3
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	b04d      	add	sp, #308	; 0x134
 8008c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c50:	fffffed7 	.word	0xfffffed7
 8008c54:	fffffedb 	.word	0xfffffedb

08008c58 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5a:	b0cd      	sub	sp, #308	; 0x134
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	0005      	movs	r5, r0
 8008c60:	000c      	movs	r4, r1
 8008c62:	0010      	movs	r0, r2
 8008c64:	0019      	movs	r1, r3
 8008c66:	4b82      	ldr	r3, [pc, #520]	; (8008e70 <aci_gap_set_authentication_requirement+0x218>)
 8008c68:	2698      	movs	r6, #152	; 0x98
 8008c6a:	0076      	lsls	r6, r6, #1
 8008c6c:	199b      	adds	r3, r3, r6
 8008c6e:	19db      	adds	r3, r3, r7
 8008c70:	1c2a      	adds	r2, r5, #0
 8008c72:	701a      	strb	r2, [r3, #0]
 8008c74:	4b7f      	ldr	r3, [pc, #508]	; (8008e74 <aci_gap_set_authentication_requirement+0x21c>)
 8008c76:	0035      	movs	r5, r6
 8008c78:	195b      	adds	r3, r3, r5
 8008c7a:	19db      	adds	r3, r3, r7
 8008c7c:	1c22      	adds	r2, r4, #0
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	4b7d      	ldr	r3, [pc, #500]	; (8008e78 <aci_gap_set_authentication_requirement+0x220>)
 8008c82:	002c      	movs	r4, r5
 8008c84:	191b      	adds	r3, r3, r4
 8008c86:	19db      	adds	r3, r3, r7
 8008c88:	1c02      	adds	r2, r0, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	4b7b      	ldr	r3, [pc, #492]	; (8008e7c <aci_gap_set_authentication_requirement+0x224>)
 8008c8e:	191b      	adds	r3, r3, r4
 8008c90:	19db      	adds	r3, r3, r7
 8008c92:	1c0a      	adds	r2, r1, #0
 8008c94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008c96:	260c      	movs	r6, #12
 8008c98:	19bb      	adds	r3, r7, r6
 8008c9a:	2096      	movs	r0, #150	; 0x96
 8008c9c:	0040      	lsls	r0, r0, #1
 8008c9e:	183a      	adds	r2, r7, r0
 8008ca0:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 8008ca2:	4b77      	ldr	r3, [pc, #476]	; (8008e80 <aci_gap_set_authentication_requirement+0x228>)
 8008ca4:	191b      	adds	r3, r3, r4
 8008ca6:	19db      	adds	r3, r3, r7
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008cac:	212c      	movs	r1, #44	; 0x2c
 8008cae:	31ff      	adds	r1, #255	; 0xff
 8008cb0:	187b      	adds	r3, r7, r1
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8008cb6:	183b      	adds	r3, r7, r0
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a6d      	ldr	r2, [pc, #436]	; (8008e70 <aci_gap_set_authentication_requirement+0x218>)
 8008cbc:	1912      	adds	r2, r2, r4
 8008cbe:	19d2      	adds	r2, r2, r7
 8008cc0:	7812      	ldrb	r2, [r2, #0]
 8008cc2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cc4:	187b      	adds	r3, r7, r1
 8008cc6:	187a      	adds	r2, r7, r1
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	3201      	adds	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8008cce:	183b      	adds	r3, r7, r0
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a68      	ldr	r2, [pc, #416]	; (8008e74 <aci_gap_set_authentication_requirement+0x21c>)
 8008cd4:	1912      	adds	r2, r2, r4
 8008cd6:	19d2      	adds	r2, r2, r7
 8008cd8:	7812      	ldrb	r2, [r2, #0]
 8008cda:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	187a      	adds	r2, r7, r1
 8008ce0:	7812      	ldrb	r2, [r2, #0]
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
  cp0->SC_Support = htob(SC_Support, 1);
 8008ce6:	183b      	adds	r3, r7, r0
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a63      	ldr	r2, [pc, #396]	; (8008e78 <aci_gap_set_authentication_requirement+0x220>)
 8008cec:	1912      	adds	r2, r2, r4
 8008cee:	19d2      	adds	r2, r2, r7
 8008cf0:	7812      	ldrb	r2, [r2, #0]
 8008cf2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008cf4:	187b      	adds	r3, r7, r1
 8008cf6:	187a      	adds	r2, r7, r1
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	3201      	adds	r2, #1
 8008cfc:	701a      	strb	r2, [r3, #0]
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8008cfe:	183b      	adds	r3, r7, r0
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a5e      	ldr	r2, [pc, #376]	; (8008e7c <aci_gap_set_authentication_requirement+0x224>)
 8008d04:	1912      	adds	r2, r2, r4
 8008d06:	19d2      	adds	r2, r2, r7
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008d0c:	187b      	adds	r3, r7, r1
 8008d0e:	187a      	adds	r2, r7, r1
 8008d10:	7812      	ldrb	r2, [r2, #0]
 8008d12:	3201      	adds	r2, #1
 8008d14:	701a      	strb	r2, [r3, #0]
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8008d16:	0005      	movs	r5, r0
 8008d18:	197b      	adds	r3, r7, r5
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	23a0      	movs	r3, #160	; 0xa0
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	2008      	movs	r0, #8
 8008d22:	181b      	adds	r3, r3, r0
 8008d24:	19db      	adds	r3, r3, r7
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	7113      	strb	r3, [r2, #4]
  index_input += 1;
 8008d2a:	187b      	adds	r3, r7, r1
 8008d2c:	000c      	movs	r4, r1
 8008d2e:	187a      	adds	r2, r7, r1
 8008d30:	7812      	ldrb	r2, [r2, #0]
 8008d32:	3201      	adds	r2, #1
 8008d34:	701a      	strb	r2, [r3, #0]
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008d36:	197b      	adds	r3, r7, r5
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	22a2      	movs	r2, #162	; 0xa2
 8008d3c:	0052      	lsls	r2, r2, #1
 8008d3e:	0001      	movs	r1, r0
 8008d40:	1852      	adds	r2, r2, r1
 8008d42:	19d2      	adds	r2, r2, r7
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d48:	193b      	adds	r3, r7, r4
 8008d4a:	193a      	adds	r2, r7, r4
 8008d4c:	7812      	ldrb	r2, [r2, #0]
 8008d4e:	3201      	adds	r2, #1
 8008d50:	701a      	strb	r2, [r3, #0]
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8008d52:	197b      	adds	r3, r7, r5
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	22a4      	movs	r2, #164	; 0xa4
 8008d58:	0052      	lsls	r2, r2, #1
 8008d5a:	1852      	adds	r2, r2, r1
 8008d5c:	19d2      	adds	r2, r2, r7
 8008d5e:	7812      	ldrb	r2, [r2, #0]
 8008d60:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008d62:	193b      	adds	r3, r7, r4
 8008d64:	193a      	adds	r2, r7, r4
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	3201      	adds	r2, #1
 8008d6a:	701a      	strb	r2, [r3, #0]
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8008d6c:	197b      	adds	r3, r7, r5
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3307      	adds	r3, #7
 8008d72:	22a6      	movs	r2, #166	; 0xa6
 8008d74:	0052      	lsls	r2, r2, #1
 8008d76:	1852      	adds	r2, r2, r1
 8008d78:	19d2      	adds	r2, r2, r7
 8008d7a:	7810      	ldrb	r0, [r2, #0]
 8008d7c:	781a      	ldrb	r2, [r3, #0]
 8008d7e:	2100      	movs	r1, #0
 8008d80:	400a      	ands	r2, r1
 8008d82:	1c11      	adds	r1, r2, #0
 8008d84:	1c02      	adds	r2, r0, #0
 8008d86:	430a      	orrs	r2, r1
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	224e      	movs	r2, #78	; 0x4e
 8008d8c:	32ff      	adds	r2, #255	; 0xff
 8008d8e:	2108      	movs	r1, #8
 8008d90:	1852      	adds	r2, r2, r1
 8008d92:	19d2      	adds	r2, r2, r7
 8008d94:	7810      	ldrb	r0, [r2, #0]
 8008d96:	785a      	ldrb	r2, [r3, #1]
 8008d98:	2100      	movs	r1, #0
 8008d9a:	400a      	ands	r2, r1
 8008d9c:	1c11      	adds	r1, r2, #0
 8008d9e:	1c02      	adds	r2, r0, #0
 8008da0:	430a      	orrs	r2, r1
 8008da2:	705a      	strb	r2, [r3, #1]
 8008da4:	22a7      	movs	r2, #167	; 0xa7
 8008da6:	0052      	lsls	r2, r2, #1
 8008da8:	2108      	movs	r1, #8
 8008daa:	1852      	adds	r2, r2, r1
 8008dac:	19d2      	adds	r2, r2, r7
 8008dae:	7810      	ldrb	r0, [r2, #0]
 8008db0:	789a      	ldrb	r2, [r3, #2]
 8008db2:	2100      	movs	r1, #0
 8008db4:	400a      	ands	r2, r1
 8008db6:	1c11      	adds	r1, r2, #0
 8008db8:	1c02      	adds	r2, r0, #0
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	709a      	strb	r2, [r3, #2]
 8008dbe:	2250      	movs	r2, #80	; 0x50
 8008dc0:	32ff      	adds	r2, #255	; 0xff
 8008dc2:	2108      	movs	r1, #8
 8008dc4:	1852      	adds	r2, r2, r1
 8008dc6:	19d2      	adds	r2, r2, r7
 8008dc8:	7810      	ldrb	r0, [r2, #0]
 8008dca:	78da      	ldrb	r2, [r3, #3]
 8008dcc:	2100      	movs	r1, #0
 8008dce:	400a      	ands	r2, r1
 8008dd0:	1c11      	adds	r1, r2, #0
 8008dd2:	1c02      	adds	r2, r0, #0
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	70da      	strb	r2, [r3, #3]
  index_input += 4;
 8008dd8:	193b      	adds	r3, r7, r4
 8008dda:	193a      	adds	r2, r7, r4
 8008ddc:	7812      	ldrb	r2, [r2, #0]
 8008dde:	3204      	adds	r2, #4
 8008de0:	701a      	strb	r2, [r3, #0]
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008de2:	197b      	adds	r3, r7, r5
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	22a8      	movs	r2, #168	; 0xa8
 8008de8:	0052      	lsls	r2, r2, #1
 8008dea:	2108      	movs	r1, #8
 8008dec:	1852      	adds	r2, r2, r1
 8008dee:	19d2      	adds	r2, r2, r7
 8008df0:	7812      	ldrb	r2, [r2, #0]
 8008df2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008df4:	193b      	adds	r3, r7, r4
 8008df6:	193a      	adds	r2, r7, r4
 8008df8:	7812      	ldrb	r2, [r2, #0]
 8008dfa:	3201      	adds	r2, #1
 8008dfc:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dfe:	2588      	movs	r5, #136	; 0x88
 8008e00:	006d      	lsls	r5, r5, #1
 8008e02:	197b      	adds	r3, r7, r5
 8008e04:	2218      	movs	r2, #24
 8008e06:	2100      	movs	r1, #0
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f001 fc10 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8008e0e:	0029      	movs	r1, r5
 8008e10:	187b      	adds	r3, r7, r1
 8008e12:	223f      	movs	r2, #63	; 0x3f
 8008e14:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x086;
 8008e16:	187b      	adds	r3, r7, r1
 8008e18:	2286      	movs	r2, #134	; 0x86
 8008e1a:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8008e1c:	187b      	adds	r3, r7, r1
 8008e1e:	19ba      	adds	r2, r7, r6
 8008e20:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8008e22:	193b      	adds	r3, r7, r4
 8008e24:	781a      	ldrb	r2, [r3, #0]
 8008e26:	187b      	adds	r3, r7, r1
 8008e28:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8008e2a:	187b      	adds	r3, r7, r1
 8008e2c:	220b      	movs	r2, #11
 8008e2e:	18ba      	adds	r2, r7, r2
 8008e30:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008e32:	187b      	adds	r3, r7, r1
 8008e34:	2201      	movs	r2, #1
 8008e36:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8008e38:	187b      	adds	r3, r7, r1
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f001 f8fd 	bl	800a03c <hci_send_req>
 8008e42:	1e03      	subs	r3, r0, #0
 8008e44:	da01      	bge.n	8008e4a <aci_gap_set_authentication_requirement+0x1f2>
    return BLE_STATUS_TIMEOUT;
 8008e46:	23ff      	movs	r3, #255	; 0xff
 8008e48:	e00d      	b.n	8008e66 <aci_gap_set_authentication_requirement+0x20e>
  if (status) {
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	; (8008e80 <aci_gap_set_authentication_requirement+0x228>)
 8008e4c:	2298      	movs	r2, #152	; 0x98
 8008e4e:	0052      	lsls	r2, r2, #1
 8008e50:	189b      	adds	r3, r3, r2
 8008e52:	19db      	adds	r3, r3, r7
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d004      	beq.n	8008e64 <aci_gap_set_authentication_requirement+0x20c>
    return status;
 8008e5a:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <aci_gap_set_authentication_requirement+0x228>)
 8008e5c:	189b      	adds	r3, r3, r2
 8008e5e:	19db      	adds	r3, r3, r7
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	e000      	b.n	8008e66 <aci_gap_set_authentication_requirement+0x20e>
  }
  return BLE_STATUS_SUCCESS;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	0018      	movs	r0, r3
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	b04d      	add	sp, #308	; 0x134
 8008e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e6e:	46c0      	nop			; (mov r8, r8)
 8008e70:	fffffed7 	.word	0xfffffed7
 8008e74:	fffffed6 	.word	0xfffffed6
 8008e78:	fffffed5 	.word	0xfffffed5
 8008e7c:	fffffed4 	.word	0xfffffed4
 8008e80:	fffffedb 	.word	0xfffffedb

08008e84 <aci_gap_pass_key_resp>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle,
                                 uint32_t Pass_Key)
{
 8008e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e86:	b0cd      	sub	sp, #308	; 0x134
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	0002      	movs	r2, r0
 8008e8c:	6039      	str	r1, [r7, #0]
 8008e8e:	4b50      	ldr	r3, [pc, #320]	; (8008fd0 <aci_gap_pass_key_resp+0x14c>)
 8008e90:	2598      	movs	r5, #152	; 0x98
 8008e92:	006d      	lsls	r5, r5, #1
 8008e94:	195b      	adds	r3, r3, r5
 8008e96:	19db      	adds	r3, r3, r7
 8008e98:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	18fb      	adds	r3, r7, r3
 8008e9e:	2196      	movs	r1, #150	; 0x96
 8008ea0:	0049      	lsls	r1, r1, #1
 8008ea2:	1878      	adds	r0, r7, r1
 8008ea4:	6003      	str	r3, [r0, #0]
  tBleStatus status = 0;
 8008ea6:	4b4b      	ldr	r3, [pc, #300]	; (8008fd4 <aci_gap_pass_key_resp+0x150>)
 8008ea8:	1958      	adds	r0, r3, r5
 8008eaa:	19c3      	adds	r3, r0, r7
 8008eac:	2200      	movs	r2, #0
 8008eae:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008eb0:	262c      	movs	r6, #44	; 0x2c
 8008eb2:	36ff      	adds	r6, #255	; 0xff
 8008eb4:	19bb      	adds	r3, r7, r6
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008eba:	1878      	adds	r0, r7, r1
 8008ebc:	6803      	ldr	r3, [r0, #0]
 8008ebe:	4a44      	ldr	r2, [pc, #272]	; (8008fd0 <aci_gap_pass_key_resp+0x14c>)
 8008ec0:	1950      	adds	r0, r2, r5
 8008ec2:	19c2      	adds	r2, r0, r7
 8008ec4:	7814      	ldrb	r4, [r2, #0]
 8008ec6:	7819      	ldrb	r1, [r3, #0]
 8008ec8:	2000      	movs	r0, #0
 8008eca:	4001      	ands	r1, r0
 8008ecc:	1c08      	adds	r0, r1, #0
 8008ece:	1c21      	adds	r1, r4, #0
 8008ed0:	4301      	orrs	r1, r0
 8008ed2:	7019      	strb	r1, [r3, #0]
 8008ed4:	7850      	ldrb	r0, [r2, #1]
 8008ed6:	785a      	ldrb	r2, [r3, #1]
 8008ed8:	2100      	movs	r1, #0
 8008eda:	400a      	ands	r2, r1
 8008edc:	1c11      	adds	r1, r2, #0
 8008ede:	1c02      	adds	r2, r0, #0
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 8008ee4:	0034      	movs	r4, r6
 8008ee6:	193b      	adds	r3, r7, r4
 8008ee8:	193a      	adds	r2, r7, r4
 8008eea:	7812      	ldrb	r2, [r2, #0]
 8008eec:	3202      	adds	r2, #2
 8008eee:	701a      	strb	r2, [r3, #0]
  cp0->Pass_Key = htob(Pass_Key, 4);
 8008ef0:	2196      	movs	r1, #150	; 0x96
 8008ef2:	0049      	lsls	r1, r1, #1
 8008ef4:	1879      	adds	r1, r7, r1
 8008ef6:	680b      	ldr	r3, [r1, #0]
 8008ef8:	3302      	adds	r3, #2
 8008efa:	4a37      	ldr	r2, [pc, #220]	; (8008fd8 <aci_gap_pass_key_resp+0x154>)
 8008efc:	1951      	adds	r1, r2, r5
 8008efe:	19ca      	adds	r2, r1, r7
 8008f00:	7810      	ldrb	r0, [r2, #0]
 8008f02:	781a      	ldrb	r2, [r3, #0]
 8008f04:	2100      	movs	r1, #0
 8008f06:	400a      	ands	r2, r1
 8008f08:	1c11      	adds	r1, r2, #0
 8008f0a:	1c02      	adds	r2, r0, #0
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	4a32      	ldr	r2, [pc, #200]	; (8008fdc <aci_gap_pass_key_resp+0x158>)
 8008f12:	1951      	adds	r1, r2, r5
 8008f14:	19ca      	adds	r2, r1, r7
 8008f16:	7810      	ldrb	r0, [r2, #0]
 8008f18:	785a      	ldrb	r2, [r3, #1]
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	400a      	ands	r2, r1
 8008f1e:	1c11      	adds	r1, r2, #0
 8008f20:	1c02      	adds	r2, r0, #0
 8008f22:	430a      	orrs	r2, r1
 8008f24:	705a      	strb	r2, [r3, #1]
 8008f26:	4a2e      	ldr	r2, [pc, #184]	; (8008fe0 <aci_gap_pass_key_resp+0x15c>)
 8008f28:	1951      	adds	r1, r2, r5
 8008f2a:	19ca      	adds	r2, r1, r7
 8008f2c:	7810      	ldrb	r0, [r2, #0]
 8008f2e:	789a      	ldrb	r2, [r3, #2]
 8008f30:	2100      	movs	r1, #0
 8008f32:	400a      	ands	r2, r1
 8008f34:	1c11      	adds	r1, r2, #0
 8008f36:	1c02      	adds	r2, r0, #0
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	709a      	strb	r2, [r3, #2]
 8008f3c:	4a29      	ldr	r2, [pc, #164]	; (8008fe4 <aci_gap_pass_key_resp+0x160>)
 8008f3e:	1951      	adds	r1, r2, r5
 8008f40:	19ca      	adds	r2, r1, r7
 8008f42:	7810      	ldrb	r0, [r2, #0]
 8008f44:	78da      	ldrb	r2, [r3, #3]
 8008f46:	2100      	movs	r1, #0
 8008f48:	400a      	ands	r2, r1
 8008f4a:	1c11      	adds	r1, r2, #0
 8008f4c:	1c02      	adds	r2, r0, #0
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	70da      	strb	r2, [r3, #3]
  index_input += 4;
 8008f52:	193b      	adds	r3, r7, r4
 8008f54:	0025      	movs	r5, r4
 8008f56:	193a      	adds	r2, r7, r4
 8008f58:	7812      	ldrb	r2, [r2, #0]
 8008f5a:	3204      	adds	r2, #4
 8008f5c:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f5e:	2488      	movs	r4, #136	; 0x88
 8008f60:	0064      	lsls	r4, r4, #1
 8008f62:	193b      	adds	r3, r7, r4
 8008f64:	2218      	movs	r2, #24
 8008f66:	2100      	movs	r1, #0
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f001 fb60 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8008f6e:	0021      	movs	r1, r4
 8008f70:	187b      	adds	r3, r7, r1
 8008f72:	223f      	movs	r2, #63	; 0x3f
 8008f74:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x088;
 8008f76:	187b      	adds	r3, r7, r1
 8008f78:	2288      	movs	r2, #136	; 0x88
 8008f7a:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8008f7c:	187b      	adds	r3, r7, r1
 8008f7e:	220c      	movs	r2, #12
 8008f80:	18ba      	adds	r2, r7, r2
 8008f82:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8008f84:	197b      	adds	r3, r7, r5
 8008f86:	781a      	ldrb	r2, [r3, #0]
 8008f88:	187b      	adds	r3, r7, r1
 8008f8a:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8008f8c:	187b      	adds	r3, r7, r1
 8008f8e:	220b      	movs	r2, #11
 8008f90:	18ba      	adds	r2, r7, r2
 8008f92:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8008f94:	187b      	adds	r3, r7, r1
 8008f96:	2201      	movs	r2, #1
 8008f98:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8008f9a:	187b      	adds	r3, r7, r1
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f001 f84c 	bl	800a03c <hci_send_req>
 8008fa4:	1e03      	subs	r3, r0, #0
 8008fa6:	da01      	bge.n	8008fac <aci_gap_pass_key_resp+0x128>
    return BLE_STATUS_TIMEOUT;
 8008fa8:	23ff      	movs	r3, #255	; 0xff
 8008faa:	e00d      	b.n	8008fc8 <aci_gap_pass_key_resp+0x144>
  if (status) {
 8008fac:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <aci_gap_pass_key_resp+0x150>)
 8008fae:	2298      	movs	r2, #152	; 0x98
 8008fb0:	0052      	lsls	r2, r2, #1
 8008fb2:	189b      	adds	r3, r3, r2
 8008fb4:	19db      	adds	r3, r3, r7
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <aci_gap_pass_key_resp+0x142>
    return status;
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <aci_gap_pass_key_resp+0x150>)
 8008fbe:	189b      	adds	r3, r3, r2
 8008fc0:	19db      	adds	r3, r3, r7
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	e000      	b.n	8008fc8 <aci_gap_pass_key_resp+0x144>
  }
  return BLE_STATUS_SUCCESS;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	0018      	movs	r0, r3
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	b04d      	add	sp, #308	; 0x134
 8008fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fd0:	fffffed6 	.word	0xfffffed6
 8008fd4:	fffffedb 	.word	0xfffffedb
 8008fd8:	fffffed0 	.word	0xfffffed0
 8008fdc:	fffffed1 	.word	0xfffffed1
 8008fe0:	fffffed2 	.word	0xfffffed2
 8008fe4:	fffffed3 	.word	0xfffffed3

08008fe8 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8008fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fea:	b0cf      	sub	sp, #316	; 0x13c
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	0004      	movs	r4, r0
 8008ff0:	0008      	movs	r0, r1
 8008ff2:	0011      	movs	r1, r2
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	4b54      	ldr	r3, [pc, #336]	; (8009148 <aci_gap_init+0x160>)
 8008ff8:	259c      	movs	r5, #156	; 0x9c
 8008ffa:	006d      	lsls	r5, r5, #1
 8008ffc:	195b      	adds	r3, r3, r5
 8008ffe:	19db      	adds	r3, r3, r7
 8009000:	1c22      	adds	r2, r4, #0
 8009002:	701a      	strb	r2, [r3, #0]
 8009004:	4b51      	ldr	r3, [pc, #324]	; (800914c <aci_gap_init+0x164>)
 8009006:	195b      	adds	r3, r3, r5
 8009008:	19db      	adds	r3, r3, r7
 800900a:	1c02      	adds	r2, r0, #0
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	4b50      	ldr	r3, [pc, #320]	; (8009150 <aci_gap_init+0x168>)
 8009010:	195b      	adds	r3, r3, r5
 8009012:	19db      	adds	r3, r3, r7
 8009014:	1c0a      	adds	r2, r1, #0
 8009016:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009018:	2314      	movs	r3, #20
 800901a:	18fb      	adds	r3, r7, r3
 800901c:	269a      	movs	r6, #154	; 0x9a
 800901e:	0076      	lsls	r6, r6, #1
 8009020:	19b9      	adds	r1, r7, r6
 8009022:	600b      	str	r3, [r1, #0]
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009024:	210c      	movs	r1, #12
 8009026:	187b      	adds	r3, r7, r1
 8009028:	2207      	movs	r2, #7
 800902a:	2100      	movs	r1, #0
 800902c:	0018      	movs	r0, r3
 800902e:	f001 fafe 	bl	800a62e <memset>
  uint8_t index_input = 0;
 8009032:	2434      	movs	r4, #52	; 0x34
 8009034:	34ff      	adds	r4, #255	; 0xff
 8009036:	193b      	adds	r3, r7, r4
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
  cp0->Role = htob(Role, 1);
 800903c:	0031      	movs	r1, r6
 800903e:	1878      	adds	r0, r7, r1
 8009040:	6803      	ldr	r3, [r0, #0]
 8009042:	4a41      	ldr	r2, [pc, #260]	; (8009148 <aci_gap_init+0x160>)
 8009044:	1950      	adds	r0, r2, r5
 8009046:	19c2      	adds	r2, r0, r7
 8009048:	7812      	ldrb	r2, [r2, #0]
 800904a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800904c:	193b      	adds	r3, r7, r4
 800904e:	193a      	adds	r2, r7, r4
 8009050:	7812      	ldrb	r2, [r2, #0]
 8009052:	3201      	adds	r2, #1
 8009054:	701a      	strb	r2, [r3, #0]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8009056:	1878      	adds	r0, r7, r1
 8009058:	6803      	ldr	r3, [r0, #0]
 800905a:	4a3c      	ldr	r2, [pc, #240]	; (800914c <aci_gap_init+0x164>)
 800905c:	1950      	adds	r0, r2, r5
 800905e:	19c2      	adds	r2, r0, r7
 8009060:	7812      	ldrb	r2, [r2, #0]
 8009062:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009064:	193b      	adds	r3, r7, r4
 8009066:	193a      	adds	r2, r7, r4
 8009068:	7812      	ldrb	r2, [r2, #0]
 800906a:	3201      	adds	r2, #1
 800906c:	701a      	strb	r2, [r3, #0]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800906e:	1878      	adds	r0, r7, r1
 8009070:	6803      	ldr	r3, [r0, #0]
 8009072:	4a37      	ldr	r2, [pc, #220]	; (8009150 <aci_gap_init+0x168>)
 8009074:	1950      	adds	r0, r2, r5
 8009076:	19c2      	adds	r2, r0, r7
 8009078:	7812      	ldrb	r2, [r2, #0]
 800907a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800907c:	193b      	adds	r3, r7, r4
 800907e:	193a      	adds	r2, r7, r4
 8009080:	7812      	ldrb	r2, [r2, #0]
 8009082:	3201      	adds	r2, #1
 8009084:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009086:	258c      	movs	r5, #140	; 0x8c
 8009088:	006d      	lsls	r5, r5, #1
 800908a:	197b      	adds	r3, r7, r5
 800908c:	2218      	movs	r2, #24
 800908e:	2100      	movs	r1, #0
 8009090:	0018      	movs	r0, r3
 8009092:	f001 facc 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8009096:	0029      	movs	r1, r5
 8009098:	187b      	adds	r3, r7, r1
 800909a:	223f      	movs	r2, #63	; 0x3f
 800909c:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x08a;
 800909e:	187b      	adds	r3, r7, r1
 80090a0:	228a      	movs	r2, #138	; 0x8a
 80090a2:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 80090a4:	187b      	adds	r3, r7, r1
 80090a6:	2214      	movs	r2, #20
 80090a8:	18ba      	adds	r2, r7, r2
 80090aa:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 80090ac:	193b      	adds	r3, r7, r4
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	187b      	adds	r3, r7, r1
 80090b2:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 80090b4:	187b      	adds	r3, r7, r1
 80090b6:	220c      	movs	r2, #12
 80090b8:	18ba      	adds	r2, r7, r2
 80090ba:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 80090bc:	187b      	adds	r3, r7, r1
 80090be:	2207      	movs	r2, #7
 80090c0:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 80090c2:	187b      	adds	r3, r7, r1
 80090c4:	2100      	movs	r1, #0
 80090c6:	0018      	movs	r0, r3
 80090c8:	f000 ffb8 	bl	800a03c <hci_send_req>
 80090cc:	1e03      	subs	r3, r0, #0
 80090ce:	da01      	bge.n	80090d4 <aci_gap_init+0xec>
    return BLE_STATUS_TIMEOUT;
 80090d0:	23ff      	movs	r3, #255	; 0xff
 80090d2:	e034      	b.n	800913e <aci_gap_init+0x156>
  if (resp.Status) {
 80090d4:	4b1f      	ldr	r3, [pc, #124]	; (8009154 <aci_gap_init+0x16c>)
 80090d6:	229c      	movs	r2, #156	; 0x9c
 80090d8:	0052      	lsls	r2, r2, #1
 80090da:	189b      	adds	r3, r3, r2
 80090dc:	19db      	adds	r3, r3, r7
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <aci_gap_init+0x106>
    return resp.Status;
 80090e4:	4b1b      	ldr	r3, [pc, #108]	; (8009154 <aci_gap_init+0x16c>)
 80090e6:	189b      	adds	r3, r3, r2
 80090e8:	19db      	adds	r3, r3, r7
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	e027      	b.n	800913e <aci_gap_init+0x156>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80090ee:	4b19      	ldr	r3, [pc, #100]	; (8009154 <aci_gap_init+0x16c>)
 80090f0:	219c      	movs	r1, #156	; 0x9c
 80090f2:	0049      	lsls	r1, r1, #1
 80090f4:	185b      	adds	r3, r3, r1
 80090f6:	19db      	adds	r3, r3, r7
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	0c1b      	lsrs	r3, r3, #16
 80090fe:	b29a      	uxth	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8009104:	4b13      	ldr	r3, [pc, #76]	; (8009154 <aci_gap_init+0x16c>)
 8009106:	185b      	adds	r3, r3, r1
 8009108:	19db      	adds	r3, r3, r7
 800910a:	78da      	ldrb	r2, [r3, #3]
 800910c:	791b      	ldrb	r3, [r3, #4]
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	4313      	orrs	r3, r2
 8009112:	b29a      	uxth	r2, r3
 8009114:	23a4      	movs	r3, #164	; 0xa4
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	2008      	movs	r0, #8
 800911a:	181b      	adds	r3, r3, r0
 800911c:	19db      	adds	r3, r3, r7
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8009122:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <aci_gap_init+0x16c>)
 8009124:	185b      	adds	r3, r3, r1
 8009126:	19db      	adds	r3, r3, r7
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	021b      	lsls	r3, r3, #8
 800912c:	0c1b      	lsrs	r3, r3, #16
 800912e:	b29a      	uxth	r2, r3
 8009130:	23a6      	movs	r3, #166	; 0xa6
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	181b      	adds	r3, r3, r0
 8009136:	19db      	adds	r3, r3, r7
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800913c:	2300      	movs	r3, #0
}
 800913e:	0018      	movs	r0, r3
 8009140:	46bd      	mov	sp, r7
 8009142:	b04f      	add	sp, #316	; 0x13c
 8009144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009146:	46c0      	nop			; (mov r8, r8)
 8009148:	fffffecf 	.word	0xfffffecf
 800914c:	fffffece 	.word	0xfffffece
 8009150:	fffffecd 	.word	0xfffffecd
 8009154:	fffffed4 	.word	0xfffffed4

08009158 <aci_gap_slave_security_req>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_slave_security_req(uint16_t Connection_Handle)
{
 8009158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800915a:	b0cd      	sub	sp, #308	; 0x134
 800915c:	af00      	add	r7, sp, #0
 800915e:	0002      	movs	r2, r0
 8009160:	4b35      	ldr	r3, [pc, #212]	; (8009238 <aci_gap_slave_security_req+0xe0>)
 8009162:	2198      	movs	r1, #152	; 0x98
 8009164:	0049      	lsls	r1, r1, #1
 8009166:	185b      	adds	r3, r3, r1
 8009168:	19db      	adds	r3, r3, r7
 800916a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
 800916c:	260c      	movs	r6, #12
 800916e:	19bb      	adds	r3, r7, r6
 8009170:	2096      	movs	r0, #150	; 0x96
 8009172:	0040      	lsls	r0, r0, #1
 8009174:	183a      	adds	r2, r7, r0
 8009176:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 8009178:	4b30      	ldr	r3, [pc, #192]	; (800923c <aci_gap_slave_security_req+0xe4>)
 800917a:	185b      	adds	r3, r3, r1
 800917c:	19db      	adds	r3, r3, r7
 800917e:	2200      	movs	r2, #0
 8009180:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009182:	252c      	movs	r5, #44	; 0x2c
 8009184:	35ff      	adds	r5, #255	; 0xff
 8009186:	197b      	adds	r3, r7, r5
 8009188:	2200      	movs	r2, #0
 800918a:	701a      	strb	r2, [r3, #0]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800918c:	183b      	adds	r3, r7, r0
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a29      	ldr	r2, [pc, #164]	; (8009238 <aci_gap_slave_security_req+0xe0>)
 8009192:	1852      	adds	r2, r2, r1
 8009194:	19d2      	adds	r2, r2, r7
 8009196:	7814      	ldrb	r4, [r2, #0]
 8009198:	7819      	ldrb	r1, [r3, #0]
 800919a:	2000      	movs	r0, #0
 800919c:	4001      	ands	r1, r0
 800919e:	1c08      	adds	r0, r1, #0
 80091a0:	1c21      	adds	r1, r4, #0
 80091a2:	4301      	orrs	r1, r0
 80091a4:	7019      	strb	r1, [r3, #0]
 80091a6:	7850      	ldrb	r0, [r2, #1]
 80091a8:	785a      	ldrb	r2, [r3, #1]
 80091aa:	2100      	movs	r1, #0
 80091ac:	400a      	ands	r2, r1
 80091ae:	1c11      	adds	r1, r2, #0
 80091b0:	1c02      	adds	r2, r0, #0
 80091b2:	430a      	orrs	r2, r1
 80091b4:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 80091b6:	197b      	adds	r3, r7, r5
 80091b8:	197a      	adds	r2, r7, r5
 80091ba:	7812      	ldrb	r2, [r2, #0]
 80091bc:	3202      	adds	r2, #2
 80091be:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091c0:	2488      	movs	r4, #136	; 0x88
 80091c2:	0064      	lsls	r4, r4, #1
 80091c4:	193b      	adds	r3, r7, r4
 80091c6:	2218      	movs	r2, #24
 80091c8:	2100      	movs	r1, #0
 80091ca:	0018      	movs	r0, r3
 80091cc:	f001 fa2f 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 80091d0:	0021      	movs	r1, r4
 80091d2:	187b      	adds	r3, r7, r1
 80091d4:	223f      	movs	r2, #63	; 0x3f
 80091d6:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x08d;
 80091d8:	187b      	adds	r3, r7, r1
 80091da:	228d      	movs	r2, #141	; 0x8d
 80091dc:	805a      	strh	r2, [r3, #2]
  rq.event = 0x0F;
 80091de:	187b      	adds	r3, r7, r1
 80091e0:	220f      	movs	r2, #15
 80091e2:	605a      	str	r2, [r3, #4]
  rq.cparam = cmd_buffer;
 80091e4:	187b      	adds	r3, r7, r1
 80091e6:	19ba      	adds	r2, r7, r6
 80091e8:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 80091ea:	197b      	adds	r3, r7, r5
 80091ec:	781a      	ldrb	r2, [r3, #0]
 80091ee:	187b      	adds	r3, r7, r1
 80091f0:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 80091f2:	187b      	adds	r3, r7, r1
 80091f4:	220b      	movs	r2, #11
 80091f6:	18ba      	adds	r2, r7, r2
 80091f8:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80091fa:	187b      	adds	r3, r7, r1
 80091fc:	2201      	movs	r2, #1
 80091fe:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8009200:	187b      	adds	r3, r7, r1
 8009202:	2100      	movs	r1, #0
 8009204:	0018      	movs	r0, r3
 8009206:	f000 ff19 	bl	800a03c <hci_send_req>
 800920a:	1e03      	subs	r3, r0, #0
 800920c:	da01      	bge.n	8009212 <aci_gap_slave_security_req+0xba>
    return BLE_STATUS_TIMEOUT;
 800920e:	23ff      	movs	r3, #255	; 0xff
 8009210:	e00d      	b.n	800922e <aci_gap_slave_security_req+0xd6>
  if (status) {
 8009212:	4b0a      	ldr	r3, [pc, #40]	; (800923c <aci_gap_slave_security_req+0xe4>)
 8009214:	2298      	movs	r2, #152	; 0x98
 8009216:	0052      	lsls	r2, r2, #1
 8009218:	189b      	adds	r3, r3, r2
 800921a:	19db      	adds	r3, r3, r7
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <aci_gap_slave_security_req+0xd4>
    return status;
 8009222:	4b06      	ldr	r3, [pc, #24]	; (800923c <aci_gap_slave_security_req+0xe4>)
 8009224:	189b      	adds	r3, r3, r2
 8009226:	19db      	adds	r3, r3, r7
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	e000      	b.n	800922e <aci_gap_slave_security_req+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800922c:	2300      	movs	r3, #0
}
 800922e:	0018      	movs	r0, r3
 8009230:	46bd      	mov	sp, r7
 8009232:	b04d      	add	sp, #308	; 0x134
 8009234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	fffffed6 	.word	0xfffffed6
 800923c:	fffffedb 	.word	0xfffffedb

08009240 <aci_gap_update_adv_data>:
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8009240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009242:	b0cd      	sub	sp, #308	; 0x134
 8009244:	af00      	add	r7, sp, #0
 8009246:	0002      	movs	r2, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	4b37      	ldr	r3, [pc, #220]	; (8009328 <aci_gap_update_adv_data+0xe8>)
 800924c:	2198      	movs	r1, #152	; 0x98
 800924e:	0049      	lsls	r1, r1, #1
 8009250:	185b      	adds	r3, r3, r1
 8009252:	19db      	adds	r3, r3, r7
 8009254:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009256:	260c      	movs	r6, #12
 8009258:	19bb      	adds	r3, r7, r6
 800925a:	2096      	movs	r0, #150	; 0x96
 800925c:	0040      	lsls	r0, r0, #1
 800925e:	183a      	adds	r2, r7, r0
 8009260:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 8009262:	4b32      	ldr	r3, [pc, #200]	; (800932c <aci_gap_update_adv_data+0xec>)
 8009264:	185b      	adds	r3, r3, r1
 8009266:	19db      	adds	r3, r3, r7
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800926c:	252c      	movs	r5, #44	; 0x2c
 800926e:	35ff      	adds	r5, #255	; 0xff
 8009270:	197b      	adds	r3, r7, r5
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8009276:	183b      	adds	r3, r7, r0
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a2b      	ldr	r2, [pc, #172]	; (8009328 <aci_gap_update_adv_data+0xe8>)
 800927c:	1852      	adds	r2, r2, r1
 800927e:	19d2      	adds	r2, r2, r7
 8009280:	7812      	ldrb	r2, [r2, #0]
 8009282:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009284:	197b      	adds	r3, r7, r5
 8009286:	197a      	adds	r2, r7, r5
 8009288:	7812      	ldrb	r2, [r2, #0]
 800928a:	3201      	adds	r2, #1
 800928c:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800928e:	183b      	adds	r3, r7, r0
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	1c58      	adds	r0, r3, #1
 8009294:	4b24      	ldr	r3, [pc, #144]	; (8009328 <aci_gap_update_adv_data+0xe8>)
 8009296:	000c      	movs	r4, r1
 8009298:	185b      	adds	r3, r3, r1
 800929a:	19db      	adds	r3, r3, r7
 800929c:	781a      	ldrb	r2, [r3, #0]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	0019      	movs	r1, r3
 80092a2:	f001 f9bb 	bl	800a61c <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 80092a6:	197b      	adds	r3, r7, r5
 80092a8:	1979      	adds	r1, r7, r5
 80092aa:	4a1f      	ldr	r2, [pc, #124]	; (8009328 <aci_gap_update_adv_data+0xe8>)
 80092ac:	1912      	adds	r2, r2, r4
 80092ae:	19d2      	adds	r2, r2, r7
 80092b0:	7809      	ldrb	r1, [r1, #0]
 80092b2:	7812      	ldrb	r2, [r2, #0]
 80092b4:	188a      	adds	r2, r1, r2
 80092b6:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80092b8:	2488      	movs	r4, #136	; 0x88
 80092ba:	0064      	lsls	r4, r4, #1
 80092bc:	193b      	adds	r3, r7, r4
 80092be:	2218      	movs	r2, #24
 80092c0:	2100      	movs	r1, #0
 80092c2:	0018      	movs	r0, r3
 80092c4:	f001 f9b3 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 80092c8:	0021      	movs	r1, r4
 80092ca:	187b      	adds	r3, r7, r1
 80092cc:	223f      	movs	r2, #63	; 0x3f
 80092ce:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x08e;
 80092d0:	187b      	adds	r3, r7, r1
 80092d2:	228e      	movs	r2, #142	; 0x8e
 80092d4:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 80092d6:	187b      	adds	r3, r7, r1
 80092d8:	19ba      	adds	r2, r7, r6
 80092da:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 80092dc:	197b      	adds	r3, r7, r5
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	187b      	adds	r3, r7, r1
 80092e2:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 80092e4:	187b      	adds	r3, r7, r1
 80092e6:	220b      	movs	r2, #11
 80092e8:	18ba      	adds	r2, r7, r2
 80092ea:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80092ec:	187b      	adds	r3, r7, r1
 80092ee:	2201      	movs	r2, #1
 80092f0:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 80092f2:	187b      	adds	r3, r7, r1
 80092f4:	2100      	movs	r1, #0
 80092f6:	0018      	movs	r0, r3
 80092f8:	f000 fea0 	bl	800a03c <hci_send_req>
 80092fc:	1e03      	subs	r3, r0, #0
 80092fe:	da01      	bge.n	8009304 <aci_gap_update_adv_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8009300:	23ff      	movs	r3, #255	; 0xff
 8009302:	e00d      	b.n	8009320 <aci_gap_update_adv_data+0xe0>
  if (status) {
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <aci_gap_update_adv_data+0xec>)
 8009306:	2298      	movs	r2, #152	; 0x98
 8009308:	0052      	lsls	r2, r2, #1
 800930a:	189b      	adds	r3, r3, r2
 800930c:	19db      	adds	r3, r3, r7
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <aci_gap_update_adv_data+0xde>
    return status;
 8009314:	4b05      	ldr	r3, [pc, #20]	; (800932c <aci_gap_update_adv_data+0xec>)
 8009316:	189b      	adds	r3, r3, r2
 8009318:	19db      	adds	r3, r3, r7
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	e000      	b.n	8009320 <aci_gap_update_adv_data+0xe0>
  }
  return BLE_STATUS_SUCCESS;
 800931e:	2300      	movs	r3, #0
}
 8009320:	0018      	movs	r0, r3
 8009322:	46bd      	mov	sp, r7
 8009324:	b04d      	add	sp, #308	; 0x134
 8009326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009328:	fffffed7 	.word	0xfffffed7
 800932c:	fffffedb 	.word	0xfffffedb

08009330 <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b089      	sub	sp, #36	; 0x24
 8009334:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009336:	1dfb      	adds	r3, r7, #7
 8009338:	2200      	movs	r2, #0
 800933a:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800933c:	2408      	movs	r4, #8
 800933e:	193b      	adds	r3, r7, r4
 8009340:	2218      	movs	r2, #24
 8009342:	2100      	movs	r1, #0
 8009344:	0018      	movs	r0, r3
 8009346:	f001 f972 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 800934a:	0021      	movs	r1, r4
 800934c:	187b      	adds	r3, r7, r1
 800934e:	223f      	movs	r2, #63	; 0x3f
 8009350:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x094;
 8009352:	187b      	adds	r3, r7, r1
 8009354:	2294      	movs	r2, #148	; 0x94
 8009356:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8009358:	187b      	adds	r3, r7, r1
 800935a:	1dfa      	adds	r2, r7, #7
 800935c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800935e:	187b      	adds	r3, r7, r1
 8009360:	2201      	movs	r2, #1
 8009362:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8009364:	187b      	adds	r3, r7, r1
 8009366:	2100      	movs	r1, #0
 8009368:	0018      	movs	r0, r3
 800936a:	f000 fe67 	bl	800a03c <hci_send_req>
 800936e:	1e03      	subs	r3, r0, #0
 8009370:	da01      	bge.n	8009376 <aci_gap_clear_security_db+0x46>
    return BLE_STATUS_TIMEOUT;
 8009372:	23ff      	movs	r3, #255	; 0xff
 8009374:	e007      	b.n	8009386 <aci_gap_clear_security_db+0x56>
  if (status) {
 8009376:	1dfb      	adds	r3, r7, #7
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <aci_gap_clear_security_db+0x54>
    return status;
 800937e:	1dfb      	adds	r3, r7, #7
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	e000      	b.n	8009386 <aci_gap_clear_security_db+0x56>
  }
  return BLE_STATUS_SUCCESS;
 8009384:	2300      	movs	r3, #0
}
 8009386:	0018      	movs	r0, r3
 8009388:	46bd      	mov	sp, r7
 800938a:	b009      	add	sp, #36	; 0x24
 800938c:	bd90      	pop	{r4, r7, pc}

0800938e <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800938e:	b590      	push	{r4, r7, lr}
 8009390:	b089      	sub	sp, #36	; 0x24
 8009392:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009394:	1dfb      	adds	r3, r7, #7
 8009396:	2200      	movs	r2, #0
 8009398:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800939a:	2408      	movs	r4, #8
 800939c:	193b      	adds	r3, r7, r4
 800939e:	2218      	movs	r2, #24
 80093a0:	2100      	movs	r1, #0
 80093a2:	0018      	movs	r0, r3
 80093a4:	f001 f943 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 80093a8:	0021      	movs	r1, r4
 80093aa:	187b      	adds	r3, r7, r1
 80093ac:	223f      	movs	r2, #63	; 0x3f
 80093ae:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x101;
 80093b0:	187b      	adds	r3, r7, r1
 80093b2:	2202      	movs	r2, #2
 80093b4:	32ff      	adds	r2, #255	; 0xff
 80093b6:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 80093b8:	187b      	adds	r3, r7, r1
 80093ba:	1dfa      	adds	r2, r7, #7
 80093bc:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80093be:	187b      	adds	r3, r7, r1
 80093c0:	2201      	movs	r2, #1
 80093c2:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 80093c4:	187b      	adds	r3, r7, r1
 80093c6:	2100      	movs	r1, #0
 80093c8:	0018      	movs	r0, r3
 80093ca:	f000 fe37 	bl	800a03c <hci_send_req>
 80093ce:	1e03      	subs	r3, r0, #0
 80093d0:	da01      	bge.n	80093d6 <aci_gatt_init+0x48>
    return BLE_STATUS_TIMEOUT;
 80093d2:	23ff      	movs	r3, #255	; 0xff
 80093d4:	e007      	b.n	80093e6 <aci_gatt_init+0x58>
  if (status) {
 80093d6:	1dfb      	adds	r3, r7, #7
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <aci_gatt_init+0x56>
    return status;
 80093de:	1dfb      	adds	r3, r7, #7
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	e000      	b.n	80093e6 <aci_gatt_init+0x58>
  }
  return BLE_STATUS_SUCCESS;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	0018      	movs	r0, r3
 80093e8:	46bd      	mov	sp, r7
 80093ea:	b009      	add	sp, #36	; 0x24
 80093ec:	bd90      	pop	{r4, r7, pc}
	...

080093f0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 80093f0:	b5b0      	push	{r4, r5, r7, lr}
 80093f2:	b0ce      	sub	sp, #312	; 0x138
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	0004      	movs	r4, r0
 80093f8:	6039      	str	r1, [r7, #0]
 80093fa:	0010      	movs	r0, r2
 80093fc:	0019      	movs	r1, r3
 80093fe:	4b6f      	ldr	r3, [pc, #444]	; (80095bc <aci_gatt_add_service+0x1cc>)
 8009400:	259c      	movs	r5, #156	; 0x9c
 8009402:	006d      	lsls	r5, r5, #1
 8009404:	195b      	adds	r3, r3, r5
 8009406:	19db      	adds	r3, r3, r7
 8009408:	1c22      	adds	r2, r4, #0
 800940a:	701a      	strb	r2, [r3, #0]
 800940c:	4b6c      	ldr	r3, [pc, #432]	; (80095c0 <aci_gatt_add_service+0x1d0>)
 800940e:	002c      	movs	r4, r5
 8009410:	191b      	adds	r3, r3, r4
 8009412:	19db      	adds	r3, r3, r7
 8009414:	1c02      	adds	r2, r0, #0
 8009416:	701a      	strb	r2, [r3, #0]
 8009418:	4b6a      	ldr	r3, [pc, #424]	; (80095c4 <aci_gatt_add_service+0x1d4>)
 800941a:	0020      	movs	r0, r4
 800941c:	181b      	adds	r3, r3, r0
 800941e:	19db      	adds	r3, r3, r7
 8009420:	1c0a      	adds	r2, r1, #0
 8009422:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009424:	230c      	movs	r3, #12
 8009426:	18fb      	adds	r3, r7, r3
 8009428:	2298      	movs	r2, #152	; 0x98
 800942a:	0052      	lsls	r2, r2, #1
 800942c:	18ba      	adds	r2, r7, r2
 800942e:	6013      	str	r3, [r2, #0]
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009430:	4b62      	ldr	r3, [pc, #392]	; (80095bc <aci_gatt_add_service+0x1cc>)
 8009432:	181b      	adds	r3, r3, r0
 8009434:	19db      	adds	r3, r3, r7
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d009      	beq.n	8009450 <aci_gatt_add_service+0x60>
 800943c:	4b5f      	ldr	r3, [pc, #380]	; (80095bc <aci_gatt_add_service+0x1cc>)
 800943e:	181b      	adds	r3, r3, r0
 8009440:	19db      	adds	r3, r3, r7
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b02      	cmp	r3, #2
 8009446:	d101      	bne.n	800944c <aci_gatt_add_service+0x5c>
 8009448:	2311      	movs	r3, #17
 800944a:	e002      	b.n	8009452 <aci_gatt_add_service+0x62>
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <aci_gatt_add_service+0x62>
 8009450:	2303      	movs	r3, #3
 8009452:	220c      	movs	r2, #12
 8009454:	18ba      	adds	r2, r7, r2
 8009456:	18d3      	adds	r3, r2, r3
 8009458:	2296      	movs	r2, #150	; 0x96
 800945a:	0052      	lsls	r2, r2, #1
 800945c:	18ba      	adds	r2, r7, r2
 800945e:	6013      	str	r3, [r2, #0]
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009460:	2308      	movs	r3, #8
 8009462:	18fb      	adds	r3, r7, r3
 8009464:	2203      	movs	r2, #3
 8009466:	2100      	movs	r1, #0
 8009468:	0018      	movs	r0, r3
 800946a:	f001 f8e0 	bl	800a62e <memset>
  uint8_t index_input = 0;
 800946e:	212c      	movs	r1, #44	; 0x2c
 8009470:	31ff      	adds	r1, #255	; 0xff
 8009472:	187b      	adds	r3, r7, r1
 8009474:	2200      	movs	r2, #0
 8009476:	701a      	strb	r2, [r3, #0]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8009478:	2398      	movs	r3, #152	; 0x98
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	18fb      	adds	r3, r7, r3
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a4e      	ldr	r2, [pc, #312]	; (80095bc <aci_gatt_add_service+0x1cc>)
 8009482:	209c      	movs	r0, #156	; 0x9c
 8009484:	0040      	lsls	r0, r0, #1
 8009486:	1812      	adds	r2, r2, r0
 8009488:	19d2      	adds	r2, r2, r7
 800948a:	7812      	ldrb	r2, [r2, #0]
 800948c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800948e:	187b      	adds	r3, r7, r1
 8009490:	187a      	adds	r2, r7, r1
 8009492:	7812      	ldrb	r2, [r2, #0]
 8009494:	3201      	adds	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8009498:	4b48      	ldr	r3, [pc, #288]	; (80095bc <aci_gatt_add_service+0x1cc>)
 800949a:	181b      	adds	r3, r3, r0
 800949c:	19db      	adds	r3, r3, r7
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d002      	beq.n	80094aa <aci_gatt_add_service+0xba>
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d006      	beq.n	80094b6 <aci_gatt_add_service+0xc6>
 80094a8:	e00b      	b.n	80094c2 <aci_gatt_add_service+0xd2>
      case 1: size = 2; break;
 80094aa:	2338      	movs	r3, #56	; 0x38
 80094ac:	33ff      	adds	r3, #255	; 0xff
 80094ae:	18fb      	adds	r3, r7, r3
 80094b0:	2202      	movs	r2, #2
 80094b2:	701a      	strb	r2, [r3, #0]
 80094b4:	e007      	b.n	80094c6 <aci_gatt_add_service+0xd6>
      case 2: size = 16; break;
 80094b6:	2338      	movs	r3, #56	; 0x38
 80094b8:	33ff      	adds	r3, #255	; 0xff
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	2210      	movs	r2, #16
 80094be:	701a      	strb	r2, [r3, #0]
 80094c0:	e001      	b.n	80094c6 <aci_gatt_add_service+0xd6>
      default: return BLE_STATUS_ERROR;
 80094c2:	2347      	movs	r3, #71	; 0x47
 80094c4:	e076      	b.n	80095b4 <aci_gatt_add_service+0x1c4>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 80094c6:	2398      	movs	r3, #152	; 0x98
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	18fb      	adds	r3, r7, r3
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	1c58      	adds	r0, r3, #1
 80094d0:	2438      	movs	r4, #56	; 0x38
 80094d2:	34ff      	adds	r4, #255	; 0xff
 80094d4:	193b      	adds	r3, r7, r4
 80094d6:	781a      	ldrb	r2, [r3, #0]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	0019      	movs	r1, r3
 80094dc:	f001 f89e 	bl	800a61c <memcpy>
    index_input += size;
 80094e0:	202c      	movs	r0, #44	; 0x2c
 80094e2:	30ff      	adds	r0, #255	; 0xff
 80094e4:	183b      	adds	r3, r7, r0
 80094e6:	1839      	adds	r1, r7, r0
 80094e8:	193a      	adds	r2, r7, r4
 80094ea:	7809      	ldrb	r1, [r1, #0]
 80094ec:	7812      	ldrb	r2, [r2, #0]
 80094ee:	188a      	adds	r2, r1, r2
 80094f0:	701a      	strb	r2, [r3, #0]
    {
      cp1->Service_Type = htob(Service_Type, 1);
 80094f2:	2196      	movs	r1, #150	; 0x96
 80094f4:	0049      	lsls	r1, r1, #1
 80094f6:	187b      	adds	r3, r7, r1
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a31      	ldr	r2, [pc, #196]	; (80095c0 <aci_gatt_add_service+0x1d0>)
 80094fc:	249c      	movs	r4, #156	; 0x9c
 80094fe:	0064      	lsls	r4, r4, #1
 8009500:	1912      	adds	r2, r2, r4
 8009502:	19d2      	adds	r2, r2, r7
 8009504:	7812      	ldrb	r2, [r2, #0]
 8009506:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009508:	183b      	adds	r3, r7, r0
 800950a:	183a      	adds	r2, r7, r0
 800950c:	7812      	ldrb	r2, [r2, #0]
 800950e:	3201      	adds	r2, #1
 8009510:	701a      	strb	r2, [r3, #0]
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8009512:	187b      	adds	r3, r7, r1
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a2b      	ldr	r2, [pc, #172]	; (80095c4 <aci_gatt_add_service+0x1d4>)
 8009518:	1912      	adds	r2, r2, r4
 800951a:	19d2      	adds	r2, r2, r7
 800951c:	7812      	ldrb	r2, [r2, #0]
 800951e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009520:	183b      	adds	r3, r7, r0
 8009522:	0005      	movs	r5, r0
 8009524:	183a      	adds	r2, r7, r0
 8009526:	7812      	ldrb	r2, [r2, #0]
 8009528:	3201      	adds	r2, #1
 800952a:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800952c:	2488      	movs	r4, #136	; 0x88
 800952e:	0064      	lsls	r4, r4, #1
 8009530:	193b      	adds	r3, r7, r4
 8009532:	2218      	movs	r2, #24
 8009534:	2100      	movs	r1, #0
 8009536:	0018      	movs	r0, r3
 8009538:	f001 f879 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 800953c:	0021      	movs	r1, r4
 800953e:	187b      	adds	r3, r7, r1
 8009540:	223f      	movs	r2, #63	; 0x3f
 8009542:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x102;
 8009544:	187b      	adds	r3, r7, r1
 8009546:	2281      	movs	r2, #129	; 0x81
 8009548:	0052      	lsls	r2, r2, #1
 800954a:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800954c:	187b      	adds	r3, r7, r1
 800954e:	220c      	movs	r2, #12
 8009550:	18ba      	adds	r2, r7, r2
 8009552:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8009554:	197b      	adds	r3, r7, r5
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	187b      	adds	r3, r7, r1
 800955a:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800955c:	187b      	adds	r3, r7, r1
 800955e:	2208      	movs	r2, #8
 8009560:	18ba      	adds	r2, r7, r2
 8009562:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 8009564:	187b      	adds	r3, r7, r1
 8009566:	2203      	movs	r2, #3
 8009568:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800956a:	187b      	adds	r3, r7, r1
 800956c:	2100      	movs	r1, #0
 800956e:	0018      	movs	r0, r3
 8009570:	f000 fd64 	bl	800a03c <hci_send_req>
 8009574:	1e03      	subs	r3, r0, #0
 8009576:	da01      	bge.n	800957c <aci_gatt_add_service+0x18c>
    return BLE_STATUS_TIMEOUT;
 8009578:	23ff      	movs	r3, #255	; 0xff
 800957a:	e01b      	b.n	80095b4 <aci_gatt_add_service+0x1c4>
  if (resp.Status) {
 800957c:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <aci_gatt_add_service+0x1d8>)
 800957e:	229c      	movs	r2, #156	; 0x9c
 8009580:	0052      	lsls	r2, r2, #1
 8009582:	189b      	adds	r3, r3, r2
 8009584:	19db      	adds	r3, r3, r7
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <aci_gatt_add_service+0x1a6>
    return resp.Status;
 800958c:	4b0e      	ldr	r3, [pc, #56]	; (80095c8 <aci_gatt_add_service+0x1d8>)
 800958e:	189b      	adds	r3, r3, r2
 8009590:	19db      	adds	r3, r3, r7
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	e00e      	b.n	80095b4 <aci_gatt_add_service+0x1c4>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8009596:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <aci_gatt_add_service+0x1d8>)
 8009598:	229c      	movs	r2, #156	; 0x9c
 800959a:	0052      	lsls	r2, r2, #1
 800959c:	189b      	adds	r3, r3, r2
 800959e:	19db      	adds	r3, r3, r7
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	23a4      	movs	r3, #164	; 0xa4
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	18fb      	adds	r3, r7, r3
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	0018      	movs	r0, r3
 80095b6:	46bd      	mov	sp, r7
 80095b8:	b04e      	add	sp, #312	; 0x138
 80095ba:	bdb0      	pop	{r4, r5, r7, pc}
 80095bc:	fffffecf 	.word	0xfffffecf
 80095c0:	fffffece 	.word	0xfffffece
 80095c4:	fffffecd 	.word	0xfffffecd
 80095c8:	fffffed0 	.word	0xfffffed0

080095cc <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 80095cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ce:	b0d1      	sub	sp, #324	; 0x144
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	0004      	movs	r4, r0
 80095d4:	0008      	movs	r0, r1
 80095d6:	60ba      	str	r2, [r7, #8]
 80095d8:	0019      	movs	r1, r3
 80095da:	4ba1      	ldr	r3, [pc, #644]	; (8009860 <aci_gatt_add_char+0x294>)
 80095dc:	25a0      	movs	r5, #160	; 0xa0
 80095de:	006d      	lsls	r5, r5, #1
 80095e0:	195b      	adds	r3, r3, r5
 80095e2:	19db      	adds	r3, r3, r7
 80095e4:	1c22      	adds	r2, r4, #0
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	4b9e      	ldr	r3, [pc, #632]	; (8009864 <aci_gatt_add_char+0x298>)
 80095ea:	002c      	movs	r4, r5
 80095ec:	191b      	adds	r3, r3, r4
 80095ee:	19db      	adds	r3, r3, r7
 80095f0:	1c02      	adds	r2, r0, #0
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	4b9c      	ldr	r3, [pc, #624]	; (8009868 <aci_gatt_add_char+0x29c>)
 80095f6:	0020      	movs	r0, r4
 80095f8:	181b      	adds	r3, r3, r0
 80095fa:	19db      	adds	r3, r3, r7
 80095fc:	1c0a      	adds	r2, r1, #0
 80095fe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009600:	2314      	movs	r3, #20
 8009602:	18fb      	adds	r3, r7, r3
 8009604:	229c      	movs	r2, #156	; 0x9c
 8009606:	0052      	lsls	r2, r2, #1
 8009608:	18ba      	adds	r2, r7, r2
 800960a:	6013      	str	r3, [r2, #0]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800960c:	4b95      	ldr	r3, [pc, #596]	; (8009864 <aci_gatt_add_char+0x298>)
 800960e:	181b      	adds	r3, r3, r0
 8009610:	19db      	adds	r3, r3, r7
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d009      	beq.n	800962c <aci_gatt_add_char+0x60>
 8009618:	4b92      	ldr	r3, [pc, #584]	; (8009864 <aci_gatt_add_char+0x298>)
 800961a:	181b      	adds	r3, r3, r0
 800961c:	19db      	adds	r3, r3, r7
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d101      	bne.n	8009628 <aci_gatt_add_char+0x5c>
 8009624:	2313      	movs	r3, #19
 8009626:	e002      	b.n	800962e <aci_gatt_add_char+0x62>
 8009628:	2303      	movs	r3, #3
 800962a:	e000      	b.n	800962e <aci_gatt_add_char+0x62>
 800962c:	2305      	movs	r3, #5
 800962e:	2214      	movs	r2, #20
 8009630:	18ba      	adds	r2, r7, r2
 8009632:	18d3      	adds	r3, r2, r3
 8009634:	229a      	movs	r2, #154	; 0x9a
 8009636:	0052      	lsls	r2, r2, #1
 8009638:	18ba      	adds	r2, r7, r2
 800963a:	6013      	str	r3, [r2, #0]
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800963c:	2310      	movs	r3, #16
 800963e:	18fb      	adds	r3, r7, r3
 8009640:	2203      	movs	r2, #3
 8009642:	2100      	movs	r1, #0
 8009644:	0018      	movs	r0, r3
 8009646:	f000 fff2 	bl	800a62e <memset>
  uint8_t index_input = 0;
 800964a:	2534      	movs	r5, #52	; 0x34
 800964c:	35ff      	adds	r5, #255	; 0xff
 800964e:	197b      	adds	r3, r7, r5
 8009650:	2200      	movs	r2, #0
 8009652:	701a      	strb	r2, [r3, #0]
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009654:	239c      	movs	r3, #156	; 0x9c
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	18fa      	adds	r2, r7, r3
 800965a:	6813      	ldr	r3, [r2, #0]
 800965c:	4a80      	ldr	r2, [pc, #512]	; (8009860 <aci_gatt_add_char+0x294>)
 800965e:	26a0      	movs	r6, #160	; 0xa0
 8009660:	0076      	lsls	r6, r6, #1
 8009662:	1992      	adds	r2, r2, r6
 8009664:	19d2      	adds	r2, r2, r7
 8009666:	7814      	ldrb	r4, [r2, #0]
 8009668:	7819      	ldrb	r1, [r3, #0]
 800966a:	2000      	movs	r0, #0
 800966c:	4001      	ands	r1, r0
 800966e:	1c08      	adds	r0, r1, #0
 8009670:	1c21      	adds	r1, r4, #0
 8009672:	4301      	orrs	r1, r0
 8009674:	7019      	strb	r1, [r3, #0]
 8009676:	7850      	ldrb	r0, [r2, #1]
 8009678:	785a      	ldrb	r2, [r3, #1]
 800967a:	2100      	movs	r1, #0
 800967c:	400a      	ands	r2, r1
 800967e:	1c11      	adds	r1, r2, #0
 8009680:	1c02      	adds	r2, r0, #0
 8009682:	430a      	orrs	r2, r1
 8009684:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 8009686:	197b      	adds	r3, r7, r5
 8009688:	197a      	adds	r2, r7, r5
 800968a:	7812      	ldrb	r2, [r2, #0]
 800968c:	3202      	adds	r2, #2
 800968e:	701a      	strb	r2, [r3, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8009690:	239c      	movs	r3, #156	; 0x9c
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	18fb      	adds	r3, r7, r3
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a72      	ldr	r2, [pc, #456]	; (8009864 <aci_gatt_add_char+0x298>)
 800969a:	1992      	adds	r2, r2, r6
 800969c:	19d2      	adds	r2, r2, r7
 800969e:	7812      	ldrb	r2, [r2, #0]
 80096a0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80096a2:	197b      	adds	r3, r7, r5
 80096a4:	197a      	adds	r2, r7, r5
 80096a6:	7812      	ldrb	r2, [r2, #0]
 80096a8:	3201      	adds	r2, #1
 80096aa:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80096ac:	4b6d      	ldr	r3, [pc, #436]	; (8009864 <aci_gatt_add_char+0x298>)
 80096ae:	199b      	adds	r3, r3, r6
 80096b0:	19db      	adds	r3, r3, r7
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d002      	beq.n	80096be <aci_gatt_add_char+0xf2>
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d006      	beq.n	80096ca <aci_gatt_add_char+0xfe>
 80096bc:	e00b      	b.n	80096d6 <aci_gatt_add_char+0x10a>
      case 1: size = 2; break;
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	33ff      	adds	r3, #255	; 0xff
 80096c2:	18fb      	adds	r3, r7, r3
 80096c4:	2202      	movs	r2, #2
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	e007      	b.n	80096da <aci_gatt_add_char+0x10e>
      case 2: size = 16; break;
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	33ff      	adds	r3, #255	; 0xff
 80096ce:	18fb      	adds	r3, r7, r3
 80096d0:	2210      	movs	r2, #16
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e001      	b.n	80096da <aci_gatt_add_char+0x10e>
      default: return BLE_STATUS_ERROR;
 80096d6:	2347      	movs	r3, #71	; 0x47
 80096d8:	e0bd      	b.n	8009856 <aci_gatt_add_char+0x28a>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80096da:	239c      	movs	r3, #156	; 0x9c
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	1cd8      	adds	r0, r3, #3
 80096e4:	2440      	movs	r4, #64	; 0x40
 80096e6:	34ff      	adds	r4, #255	; 0xff
 80096e8:	193b      	adds	r3, r7, r4
 80096ea:	781a      	ldrb	r2, [r3, #0]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	0019      	movs	r1, r3
 80096f0:	f000 ff94 	bl	800a61c <memcpy>
    index_input += size;
 80096f4:	2534      	movs	r5, #52	; 0x34
 80096f6:	35ff      	adds	r5, #255	; 0xff
 80096f8:	197b      	adds	r3, r7, r5
 80096fa:	1979      	adds	r1, r7, r5
 80096fc:	193a      	adds	r2, r7, r4
 80096fe:	7809      	ldrb	r1, [r1, #0]
 8009700:	7812      	ldrb	r2, [r2, #0]
 8009702:	188a      	adds	r2, r1, r2
 8009704:	701a      	strb	r2, [r3, #0]
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8009706:	269a      	movs	r6, #154	; 0x9a
 8009708:	0076      	lsls	r6, r6, #1
 800970a:	19bb      	adds	r3, r7, r6
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a56      	ldr	r2, [pc, #344]	; (8009868 <aci_gatt_add_char+0x29c>)
 8009710:	21a0      	movs	r1, #160	; 0xa0
 8009712:	0049      	lsls	r1, r1, #1
 8009714:	1852      	adds	r2, r2, r1
 8009716:	19d2      	adds	r2, r2, r7
 8009718:	7814      	ldrb	r4, [r2, #0]
 800971a:	7819      	ldrb	r1, [r3, #0]
 800971c:	2000      	movs	r0, #0
 800971e:	4001      	ands	r1, r0
 8009720:	1c08      	adds	r0, r1, #0
 8009722:	1c21      	adds	r1, r4, #0
 8009724:	4301      	orrs	r1, r0
 8009726:	7019      	strb	r1, [r3, #0]
 8009728:	7850      	ldrb	r0, [r2, #1]
 800972a:	785a      	ldrb	r2, [r3, #1]
 800972c:	2100      	movs	r1, #0
 800972e:	400a      	ands	r2, r1
 8009730:	1c11      	adds	r1, r2, #0
 8009732:	1c02      	adds	r2, r0, #0
 8009734:	430a      	orrs	r2, r1
 8009736:	705a      	strb	r2, [r3, #1]
    }
    index_input += 2;
 8009738:	002c      	movs	r4, r5
 800973a:	193b      	adds	r3, r7, r4
 800973c:	193a      	adds	r2, r7, r4
 800973e:	7812      	ldrb	r2, [r2, #0]
 8009740:	3202      	adds	r2, #2
 8009742:	701a      	strb	r2, [r3, #0]
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8009744:	0031      	movs	r1, r6
 8009746:	187b      	adds	r3, r7, r1
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	23a8      	movs	r3, #168	; 0xa8
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	2008      	movs	r0, #8
 8009750:	181b      	adds	r3, r3, r0
 8009752:	19db      	adds	r3, r3, r7
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	7093      	strb	r3, [r2, #2]
    }
    index_input += 1;
 8009758:	193b      	adds	r3, r7, r4
 800975a:	193a      	adds	r2, r7, r4
 800975c:	7812      	ldrb	r2, [r2, #0]
 800975e:	3201      	adds	r2, #1
 8009760:	701a      	strb	r2, [r3, #0]
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8009762:	187b      	adds	r3, r7, r1
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	22aa      	movs	r2, #170	; 0xaa
 8009768:	0052      	lsls	r2, r2, #1
 800976a:	1812      	adds	r2, r2, r0
 800976c:	19d2      	adds	r2, r2, r7
 800976e:	7812      	ldrb	r2, [r2, #0]
 8009770:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009772:	193b      	adds	r3, r7, r4
 8009774:	193a      	adds	r2, r7, r4
 8009776:	7812      	ldrb	r2, [r2, #0]
 8009778:	3201      	adds	r2, #1
 800977a:	701a      	strb	r2, [r3, #0]
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800977c:	187b      	adds	r3, r7, r1
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	22ac      	movs	r2, #172	; 0xac
 8009782:	0052      	lsls	r2, r2, #1
 8009784:	1812      	adds	r2, r2, r0
 8009786:	19d2      	adds	r2, r2, r7
 8009788:	7812      	ldrb	r2, [r2, #0]
 800978a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800978c:	193b      	adds	r3, r7, r4
 800978e:	193a      	adds	r2, r7, r4
 8009790:	7812      	ldrb	r2, [r2, #0]
 8009792:	3201      	adds	r2, #1
 8009794:	701a      	strb	r2, [r3, #0]
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8009796:	187b      	adds	r3, r7, r1
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	22ae      	movs	r2, #174	; 0xae
 800979c:	0052      	lsls	r2, r2, #1
 800979e:	1812      	adds	r2, r2, r0
 80097a0:	19d2      	adds	r2, r2, r7
 80097a2:	7812      	ldrb	r2, [r2, #0]
 80097a4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80097a6:	193b      	adds	r3, r7, r4
 80097a8:	193a      	adds	r2, r7, r4
 80097aa:	7812      	ldrb	r2, [r2, #0]
 80097ac:	3201      	adds	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80097b0:	187b      	adds	r3, r7, r1
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	22b0      	movs	r2, #176	; 0xb0
 80097b6:	0052      	lsls	r2, r2, #1
 80097b8:	1812      	adds	r2, r2, r0
 80097ba:	19d2      	adds	r2, r2, r7
 80097bc:	7812      	ldrb	r2, [r2, #0]
 80097be:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80097c0:	193b      	adds	r3, r7, r4
 80097c2:	193a      	adds	r2, r7, r4
 80097c4:	7812      	ldrb	r2, [r2, #0]
 80097c6:	3201      	adds	r2, #1
 80097c8:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80097ca:	258c      	movs	r5, #140	; 0x8c
 80097cc:	006d      	lsls	r5, r5, #1
 80097ce:	197b      	adds	r3, r7, r5
 80097d0:	2218      	movs	r2, #24
 80097d2:	2100      	movs	r1, #0
 80097d4:	0018      	movs	r0, r3
 80097d6:	f000 ff2a 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 80097da:	0029      	movs	r1, r5
 80097dc:	187b      	adds	r3, r7, r1
 80097de:	223f      	movs	r2, #63	; 0x3f
 80097e0:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x104;
 80097e2:	187b      	adds	r3, r7, r1
 80097e4:	2282      	movs	r2, #130	; 0x82
 80097e6:	0052      	lsls	r2, r2, #1
 80097e8:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 80097ea:	187b      	adds	r3, r7, r1
 80097ec:	2214      	movs	r2, #20
 80097ee:	18ba      	adds	r2, r7, r2
 80097f0:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 80097f2:	193b      	adds	r3, r7, r4
 80097f4:	781a      	ldrb	r2, [r3, #0]
 80097f6:	187b      	adds	r3, r7, r1
 80097f8:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 80097fa:	187b      	adds	r3, r7, r1
 80097fc:	2210      	movs	r2, #16
 80097fe:	18ba      	adds	r2, r7, r2
 8009800:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 8009802:	187b      	adds	r3, r7, r1
 8009804:	2203      	movs	r2, #3
 8009806:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8009808:	187b      	adds	r3, r7, r1
 800980a:	2100      	movs	r1, #0
 800980c:	0018      	movs	r0, r3
 800980e:	f000 fc15 	bl	800a03c <hci_send_req>
 8009812:	1e03      	subs	r3, r0, #0
 8009814:	da01      	bge.n	800981a <aci_gatt_add_char+0x24e>
    return BLE_STATUS_TIMEOUT;
 8009816:	23ff      	movs	r3, #255	; 0xff
 8009818:	e01d      	b.n	8009856 <aci_gatt_add_char+0x28a>
  if (resp.Status) {
 800981a:	4b14      	ldr	r3, [pc, #80]	; (800986c <aci_gatt_add_char+0x2a0>)
 800981c:	22a0      	movs	r2, #160	; 0xa0
 800981e:	0052      	lsls	r2, r2, #1
 8009820:	189b      	adds	r3, r3, r2
 8009822:	19db      	adds	r3, r3, r7
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d004      	beq.n	8009834 <aci_gatt_add_char+0x268>
    return resp.Status;
 800982a:	4b10      	ldr	r3, [pc, #64]	; (800986c <aci_gatt_add_char+0x2a0>)
 800982c:	189b      	adds	r3, r3, r2
 800982e:	19db      	adds	r3, r3, r7
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	e010      	b.n	8009856 <aci_gatt_add_char+0x28a>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8009834:	4b0d      	ldr	r3, [pc, #52]	; (800986c <aci_gatt_add_char+0x2a0>)
 8009836:	22a0      	movs	r2, #160	; 0xa0
 8009838:	0052      	lsls	r2, r2, #1
 800983a:	189b      	adds	r3, r3, r2
 800983c:	19db      	adds	r3, r3, r7
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	021b      	lsls	r3, r3, #8
 8009842:	0c1b      	lsrs	r3, r3, #16
 8009844:	b29a      	uxth	r2, r3
 8009846:	23b2      	movs	r3, #178	; 0xb2
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	2108      	movs	r1, #8
 800984c:	185b      	adds	r3, r3, r1
 800984e:	19db      	adds	r3, r3, r7
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009854:	2300      	movs	r3, #0
}
 8009856:	0018      	movs	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	b051      	add	sp, #324	; 0x144
 800985c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	fffffece 	.word	0xfffffece
 8009864:	fffffecd 	.word	0xfffffecd
 8009868:	fffffec6 	.word	0xfffffec6
 800986c:	fffffed0 	.word	0xfffffed0

08009870 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8009870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009872:	b0cd      	sub	sp, #308	; 0x134
 8009874:	af00      	add	r7, sp, #0
 8009876:	0005      	movs	r5, r0
 8009878:	000c      	movs	r4, r1
 800987a:	0010      	movs	r0, r2
 800987c:	0019      	movs	r1, r3
 800987e:	4b65      	ldr	r3, [pc, #404]	; (8009a14 <aci_gatt_update_char_value+0x1a4>)
 8009880:	2698      	movs	r6, #152	; 0x98
 8009882:	0076      	lsls	r6, r6, #1
 8009884:	199b      	adds	r3, r3, r6
 8009886:	19db      	adds	r3, r3, r7
 8009888:	1c2a      	adds	r2, r5, #0
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	4b62      	ldr	r3, [pc, #392]	; (8009a18 <aci_gatt_update_char_value+0x1a8>)
 800988e:	199b      	adds	r3, r3, r6
 8009890:	19db      	adds	r3, r3, r7
 8009892:	1c22      	adds	r2, r4, #0
 8009894:	801a      	strh	r2, [r3, #0]
 8009896:	4b61      	ldr	r3, [pc, #388]	; (8009a1c <aci_gatt_update_char_value+0x1ac>)
 8009898:	199b      	adds	r3, r3, r6
 800989a:	19db      	adds	r3, r3, r7
 800989c:	1c02      	adds	r2, r0, #0
 800989e:	701a      	strb	r2, [r3, #0]
 80098a0:	4b5f      	ldr	r3, [pc, #380]	; (8009a20 <aci_gatt_update_char_value+0x1b0>)
 80098a2:	199b      	adds	r3, r3, r6
 80098a4:	19db      	adds	r3, r3, r7
 80098a6:	1c0a      	adds	r2, r1, #0
 80098a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80098aa:	230c      	movs	r3, #12
 80098ac:	18fb      	adds	r3, r7, r3
 80098ae:	2196      	movs	r1, #150	; 0x96
 80098b0:	0049      	lsls	r1, r1, #1
 80098b2:	1878      	adds	r0, r7, r1
 80098b4:	6003      	str	r3, [r0, #0]
  tBleStatus status = 0;
 80098b6:	4b5b      	ldr	r3, [pc, #364]	; (8009a24 <aci_gatt_update_char_value+0x1b4>)
 80098b8:	1998      	adds	r0, r3, r6
 80098ba:	19c3      	adds	r3, r0, r7
 80098bc:	2200      	movs	r2, #0
 80098be:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80098c0:	252c      	movs	r5, #44	; 0x2c
 80098c2:	35ff      	adds	r5, #255	; 0xff
 80098c4:	197b      	adds	r3, r7, r5
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]
  cp0->Service_Handle = htob(Service_Handle, 2);
 80098ca:	1878      	adds	r0, r7, r1
 80098cc:	6803      	ldr	r3, [r0, #0]
 80098ce:	4a51      	ldr	r2, [pc, #324]	; (8009a14 <aci_gatt_update_char_value+0x1a4>)
 80098d0:	1990      	adds	r0, r2, r6
 80098d2:	19c2      	adds	r2, r0, r7
 80098d4:	7814      	ldrb	r4, [r2, #0]
 80098d6:	7819      	ldrb	r1, [r3, #0]
 80098d8:	2000      	movs	r0, #0
 80098da:	4001      	ands	r1, r0
 80098dc:	1c08      	adds	r0, r1, #0
 80098de:	1c21      	adds	r1, r4, #0
 80098e0:	4301      	orrs	r1, r0
 80098e2:	7019      	strb	r1, [r3, #0]
 80098e4:	7850      	ldrb	r0, [r2, #1]
 80098e6:	785a      	ldrb	r2, [r3, #1]
 80098e8:	2100      	movs	r1, #0
 80098ea:	400a      	ands	r2, r1
 80098ec:	1c11      	adds	r1, r2, #0
 80098ee:	1c02      	adds	r2, r0, #0
 80098f0:	430a      	orrs	r2, r1
 80098f2:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 80098f4:	197b      	adds	r3, r7, r5
 80098f6:	197a      	adds	r2, r7, r5
 80098f8:	7812      	ldrb	r2, [r2, #0]
 80098fa:	3202      	adds	r2, #2
 80098fc:	701a      	strb	r2, [r3, #0]
  cp0->Char_Handle = htob(Char_Handle, 2);
 80098fe:	2196      	movs	r1, #150	; 0x96
 8009900:	0049      	lsls	r1, r1, #1
 8009902:	1878      	adds	r0, r7, r1
 8009904:	6803      	ldr	r3, [r0, #0]
 8009906:	4a44      	ldr	r2, [pc, #272]	; (8009a18 <aci_gatt_update_char_value+0x1a8>)
 8009908:	1990      	adds	r0, r2, r6
 800990a:	19c2      	adds	r2, r0, r7
 800990c:	7814      	ldrb	r4, [r2, #0]
 800990e:	7899      	ldrb	r1, [r3, #2]
 8009910:	2000      	movs	r0, #0
 8009912:	4001      	ands	r1, r0
 8009914:	1c08      	adds	r0, r1, #0
 8009916:	1c21      	adds	r1, r4, #0
 8009918:	4301      	orrs	r1, r0
 800991a:	7099      	strb	r1, [r3, #2]
 800991c:	7850      	ldrb	r0, [r2, #1]
 800991e:	78da      	ldrb	r2, [r3, #3]
 8009920:	2100      	movs	r1, #0
 8009922:	400a      	ands	r2, r1
 8009924:	1c11      	adds	r1, r2, #0
 8009926:	1c02      	adds	r2, r0, #0
 8009928:	430a      	orrs	r2, r1
 800992a:	70da      	strb	r2, [r3, #3]
  index_input += 2;
 800992c:	002c      	movs	r4, r5
 800992e:	193b      	adds	r3, r7, r4
 8009930:	193a      	adds	r2, r7, r4
 8009932:	7812      	ldrb	r2, [r2, #0]
 8009934:	3202      	adds	r2, #2
 8009936:	701a      	strb	r2, [r3, #0]
  cp0->Val_Offset = htob(Val_Offset, 1);
 8009938:	2196      	movs	r1, #150	; 0x96
 800993a:	0049      	lsls	r1, r1, #1
 800993c:	1878      	adds	r0, r7, r1
 800993e:	6803      	ldr	r3, [r0, #0]
 8009940:	4a36      	ldr	r2, [pc, #216]	; (8009a1c <aci_gatt_update_char_value+0x1ac>)
 8009942:	1990      	adds	r0, r2, r6
 8009944:	19c2      	adds	r2, r0, r7
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800994a:	193b      	adds	r3, r7, r4
 800994c:	193a      	adds	r2, r7, r4
 800994e:	7812      	ldrb	r2, [r2, #0]
 8009950:	3201      	adds	r2, #1
 8009952:	701a      	strb	r2, [r3, #0]
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8009954:	1878      	adds	r0, r7, r1
 8009956:	6803      	ldr	r3, [r0, #0]
 8009958:	4a31      	ldr	r2, [pc, #196]	; (8009a20 <aci_gatt_update_char_value+0x1b0>)
 800995a:	1990      	adds	r0, r2, r6
 800995c:	19c2      	adds	r2, r0, r7
 800995e:	7812      	ldrb	r2, [r2, #0]
 8009960:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009962:	193b      	adds	r3, r7, r4
 8009964:	193a      	adds	r2, r7, r4
 8009966:	7812      	ldrb	r2, [r2, #0]
 8009968:	3201      	adds	r2, #1
 800996a:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800996c:	1879      	adds	r1, r7, r1
 800996e:	680b      	ldr	r3, [r1, #0]
 8009970:	1d98      	adds	r0, r3, #6
 8009972:	4b2b      	ldr	r3, [pc, #172]	; (8009a20 <aci_gatt_update_char_value+0x1b0>)
 8009974:	1999      	adds	r1, r3, r6
 8009976:	19cb      	adds	r3, r1, r7
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	21a0      	movs	r1, #160	; 0xa0
 800997c:	0049      	lsls	r1, r1, #1
 800997e:	2308      	movs	r3, #8
 8009980:	18cb      	adds	r3, r1, r3
 8009982:	19d9      	adds	r1, r3, r7
 8009984:	680b      	ldr	r3, [r1, #0]
 8009986:	0019      	movs	r1, r3
 8009988:	f000 fe48 	bl	800a61c <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800998c:	193b      	adds	r3, r7, r4
 800998e:	1939      	adds	r1, r7, r4
 8009990:	4a23      	ldr	r2, [pc, #140]	; (8009a20 <aci_gatt_update_char_value+0x1b0>)
 8009992:	1990      	adds	r0, r2, r6
 8009994:	19c2      	adds	r2, r0, r7
 8009996:	7809      	ldrb	r1, [r1, #0]
 8009998:	7812      	ldrb	r2, [r2, #0]
 800999a:	188a      	adds	r2, r1, r2
 800999c:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800999e:	2588      	movs	r5, #136	; 0x88
 80099a0:	006d      	lsls	r5, r5, #1
 80099a2:	197b      	adds	r3, r7, r5
 80099a4:	2218      	movs	r2, #24
 80099a6:	2100      	movs	r1, #0
 80099a8:	0018      	movs	r0, r3
 80099aa:	f000 fe40 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 80099ae:	0029      	movs	r1, r5
 80099b0:	187b      	adds	r3, r7, r1
 80099b2:	223f      	movs	r2, #63	; 0x3f
 80099b4:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x106;
 80099b6:	187b      	adds	r3, r7, r1
 80099b8:	2283      	movs	r2, #131	; 0x83
 80099ba:	0052      	lsls	r2, r2, #1
 80099bc:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 80099be:	187b      	adds	r3, r7, r1
 80099c0:	220c      	movs	r2, #12
 80099c2:	18ba      	adds	r2, r7, r2
 80099c4:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 80099c6:	193b      	adds	r3, r7, r4
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	187b      	adds	r3, r7, r1
 80099cc:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 80099ce:	187b      	adds	r3, r7, r1
 80099d0:	220b      	movs	r2, #11
 80099d2:	18ba      	adds	r2, r7, r2
 80099d4:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80099d6:	187b      	adds	r3, r7, r1
 80099d8:	2201      	movs	r2, #1
 80099da:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 80099dc:	187b      	adds	r3, r7, r1
 80099de:	2100      	movs	r1, #0
 80099e0:	0018      	movs	r0, r3
 80099e2:	f000 fb2b 	bl	800a03c <hci_send_req>
 80099e6:	1e03      	subs	r3, r0, #0
 80099e8:	da01      	bge.n	80099ee <aci_gatt_update_char_value+0x17e>
    return BLE_STATUS_TIMEOUT;
 80099ea:	23ff      	movs	r3, #255	; 0xff
 80099ec:	e00d      	b.n	8009a0a <aci_gatt_update_char_value+0x19a>
  if (status) {
 80099ee:	4b0d      	ldr	r3, [pc, #52]	; (8009a24 <aci_gatt_update_char_value+0x1b4>)
 80099f0:	2298      	movs	r2, #152	; 0x98
 80099f2:	0052      	lsls	r2, r2, #1
 80099f4:	189b      	adds	r3, r3, r2
 80099f6:	19db      	adds	r3, r3, r7
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d004      	beq.n	8009a08 <aci_gatt_update_char_value+0x198>
    return status;
 80099fe:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <aci_gatt_update_char_value+0x1b4>)
 8009a00:	189b      	adds	r3, r3, r2
 8009a02:	19db      	adds	r3, r3, r7
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	e000      	b.n	8009a0a <aci_gatt_update_char_value+0x19a>
  }
  return BLE_STATUS_SUCCESS;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	b04d      	add	sp, #308	; 0x134
 8009a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a12:	46c0      	nop			; (mov r8, r8)
 8009a14:	fffffed6 	.word	0xfffffed6
 8009a18:	fffffed4 	.word	0xfffffed4
 8009a1c:	fffffed3 	.word	0xfffffed3
 8009a20:	fffffed2 	.word	0xfffffed2
 8009a24:	fffffedb 	.word	0xfffffedb

08009a28 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 8009a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a2a:	b0cd      	sub	sp, #308	; 0x134
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	0002      	movs	r2, r0
 8009a30:	4b34      	ldr	r3, [pc, #208]	; (8009b04 <aci_gatt_allow_read+0xdc>)
 8009a32:	2198      	movs	r1, #152	; 0x98
 8009a34:	0049      	lsls	r1, r1, #1
 8009a36:	185b      	adds	r3, r3, r1
 8009a38:	19db      	adds	r3, r3, r7
 8009a3a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8009a3c:	260c      	movs	r6, #12
 8009a3e:	19bb      	adds	r3, r7, r6
 8009a40:	2096      	movs	r0, #150	; 0x96
 8009a42:	0040      	lsls	r0, r0, #1
 8009a44:	183a      	adds	r2, r7, r0
 8009a46:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 8009a48:	4b2f      	ldr	r3, [pc, #188]	; (8009b08 <aci_gatt_allow_read+0xe0>)
 8009a4a:	185b      	adds	r3, r3, r1
 8009a4c:	19db      	adds	r3, r3, r7
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009a52:	252c      	movs	r5, #44	; 0x2c
 8009a54:	35ff      	adds	r5, #255	; 0xff
 8009a56:	197b      	adds	r3, r7, r5
 8009a58:	2200      	movs	r2, #0
 8009a5a:	701a      	strb	r2, [r3, #0]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8009a5c:	183b      	adds	r3, r7, r0
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a28      	ldr	r2, [pc, #160]	; (8009b04 <aci_gatt_allow_read+0xdc>)
 8009a62:	1852      	adds	r2, r2, r1
 8009a64:	19d2      	adds	r2, r2, r7
 8009a66:	7814      	ldrb	r4, [r2, #0]
 8009a68:	7819      	ldrb	r1, [r3, #0]
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	4001      	ands	r1, r0
 8009a6e:	1c08      	adds	r0, r1, #0
 8009a70:	1c21      	adds	r1, r4, #0
 8009a72:	4301      	orrs	r1, r0
 8009a74:	7019      	strb	r1, [r3, #0]
 8009a76:	7850      	ldrb	r0, [r2, #1]
 8009a78:	785a      	ldrb	r2, [r3, #1]
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	400a      	ands	r2, r1
 8009a7e:	1c11      	adds	r1, r2, #0
 8009a80:	1c02      	adds	r2, r0, #0
 8009a82:	430a      	orrs	r2, r1
 8009a84:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 8009a86:	197b      	adds	r3, r7, r5
 8009a88:	197a      	adds	r2, r7, r5
 8009a8a:	7812      	ldrb	r2, [r2, #0]
 8009a8c:	3202      	adds	r2, #2
 8009a8e:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a90:	2488      	movs	r4, #136	; 0x88
 8009a92:	0064      	lsls	r4, r4, #1
 8009a94:	193b      	adds	r3, r7, r4
 8009a96:	2218      	movs	r2, #24
 8009a98:	2100      	movs	r1, #0
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f000 fdc7 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8009aa0:	0021      	movs	r1, r4
 8009aa2:	187b      	adds	r3, r7, r1
 8009aa4:	223f      	movs	r2, #63	; 0x3f
 8009aa6:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x127;
 8009aa8:	187b      	adds	r3, r7, r1
 8009aaa:	2228      	movs	r2, #40	; 0x28
 8009aac:	32ff      	adds	r2, #255	; 0xff
 8009aae:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8009ab0:	187b      	adds	r3, r7, r1
 8009ab2:	19ba      	adds	r2, r7, r6
 8009ab4:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8009ab6:	197b      	adds	r3, r7, r5
 8009ab8:	781a      	ldrb	r2, [r3, #0]
 8009aba:	187b      	adds	r3, r7, r1
 8009abc:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8009abe:	187b      	adds	r3, r7, r1
 8009ac0:	220b      	movs	r2, #11
 8009ac2:	18ba      	adds	r2, r7, r2
 8009ac4:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8009ac6:	187b      	adds	r3, r7, r1
 8009ac8:	2201      	movs	r2, #1
 8009aca:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8009acc:	187b      	adds	r3, r7, r1
 8009ace:	2100      	movs	r1, #0
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f000 fab3 	bl	800a03c <hci_send_req>
 8009ad6:	1e03      	subs	r3, r0, #0
 8009ad8:	da01      	bge.n	8009ade <aci_gatt_allow_read+0xb6>
    return BLE_STATUS_TIMEOUT;
 8009ada:	23ff      	movs	r3, #255	; 0xff
 8009adc:	e00d      	b.n	8009afa <aci_gatt_allow_read+0xd2>
  if (status) {
 8009ade:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <aci_gatt_allow_read+0xe0>)
 8009ae0:	2298      	movs	r2, #152	; 0x98
 8009ae2:	0052      	lsls	r2, r2, #1
 8009ae4:	189b      	adds	r3, r3, r2
 8009ae6:	19db      	adds	r3, r3, r7
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d004      	beq.n	8009af8 <aci_gatt_allow_read+0xd0>
    return status;
 8009aee:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <aci_gatt_allow_read+0xe0>)
 8009af0:	189b      	adds	r3, r3, r2
 8009af2:	19db      	adds	r3, r3, r7
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	e000      	b.n	8009afa <aci_gatt_allow_read+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	0018      	movs	r0, r3
 8009afc:	46bd      	mov	sp, r7
 8009afe:	b04d      	add	sp, #308	; 0x134
 8009b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b02:	46c0      	nop			; (mov r8, r8)
 8009b04:	fffffed6 	.word	0xfffffed6
 8009b08:	fffffedb 	.word	0xfffffedb

08009b0c <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8009b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b0e:	b0cd      	sub	sp, #308	; 0x134
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	603a      	str	r2, [r7, #0]
 8009b14:	4b41      	ldr	r3, [pc, #260]	; (8009c1c <aci_hal_write_config_data+0x110>)
 8009b16:	2498      	movs	r4, #152	; 0x98
 8009b18:	0064      	lsls	r4, r4, #1
 8009b1a:	191b      	adds	r3, r3, r4
 8009b1c:	19db      	adds	r3, r3, r7
 8009b1e:	1c02      	adds	r2, r0, #0
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	4b3f      	ldr	r3, [pc, #252]	; (8009c20 <aci_hal_write_config_data+0x114>)
 8009b24:	0020      	movs	r0, r4
 8009b26:	181b      	adds	r3, r3, r0
 8009b28:	19db      	adds	r3, r3, r7
 8009b2a:	1c0a      	adds	r2, r1, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009b2e:	260c      	movs	r6, #12
 8009b30:	19bb      	adds	r3, r7, r6
 8009b32:	2596      	movs	r5, #150	; 0x96
 8009b34:	006d      	lsls	r5, r5, #1
 8009b36:	197a      	adds	r2, r7, r5
 8009b38:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 8009b3a:	4b3a      	ldr	r3, [pc, #232]	; (8009c24 <aci_hal_write_config_data+0x118>)
 8009b3c:	0001      	movs	r1, r0
 8009b3e:	185b      	adds	r3, r3, r1
 8009b40:	19db      	adds	r3, r3, r7
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009b46:	242c      	movs	r4, #44	; 0x2c
 8009b48:	34ff      	adds	r4, #255	; 0xff
 8009b4a:	193b      	adds	r3, r7, r4
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	701a      	strb	r2, [r3, #0]
  cp0->Offset = htob(Offset, 1);
 8009b50:	0028      	movs	r0, r5
 8009b52:	183b      	adds	r3, r7, r0
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a31      	ldr	r2, [pc, #196]	; (8009c1c <aci_hal_write_config_data+0x110>)
 8009b58:	1852      	adds	r2, r2, r1
 8009b5a:	19d2      	adds	r2, r2, r7
 8009b5c:	7812      	ldrb	r2, [r2, #0]
 8009b5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b60:	193b      	adds	r3, r7, r4
 8009b62:	193a      	adds	r2, r7, r4
 8009b64:	7812      	ldrb	r2, [r2, #0]
 8009b66:	3201      	adds	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]
  cp0->Length = htob(Length, 1);
 8009b6a:	183b      	adds	r3, r7, r0
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a2c      	ldr	r2, [pc, #176]	; (8009c20 <aci_hal_write_config_data+0x114>)
 8009b70:	1852      	adds	r2, r2, r1
 8009b72:	19d2      	adds	r2, r2, r7
 8009b74:	7812      	ldrb	r2, [r2, #0]
 8009b76:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009b78:	193b      	adds	r3, r7, r4
 8009b7a:	193a      	adds	r2, r7, r4
 8009b7c:	7812      	ldrb	r2, [r2, #0]
 8009b7e:	3201      	adds	r2, #1
 8009b80:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8009b82:	183b      	adds	r3, r7, r0
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	1c98      	adds	r0, r3, #2
 8009b88:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <aci_hal_write_config_data+0x114>)
 8009b8a:	000d      	movs	r5, r1
 8009b8c:	185b      	adds	r3, r3, r1
 8009b8e:	19db      	adds	r3, r3, r7
 8009b90:	781a      	ldrb	r2, [r3, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	0019      	movs	r1, r3
 8009b96:	f000 fd41 	bl	800a61c <memcpy>
    index_input += Length*sizeof(uint8_t);
 8009b9a:	193b      	adds	r3, r7, r4
 8009b9c:	1939      	adds	r1, r7, r4
 8009b9e:	4a20      	ldr	r2, [pc, #128]	; (8009c20 <aci_hal_write_config_data+0x114>)
 8009ba0:	1952      	adds	r2, r2, r5
 8009ba2:	19d2      	adds	r2, r2, r7
 8009ba4:	7809      	ldrb	r1, [r1, #0]
 8009ba6:	7812      	ldrb	r2, [r2, #0]
 8009ba8:	188a      	adds	r2, r1, r2
 8009baa:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009bac:	2588      	movs	r5, #136	; 0x88
 8009bae:	006d      	lsls	r5, r5, #1
 8009bb0:	197b      	adds	r3, r7, r5
 8009bb2:	2218      	movs	r2, #24
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	f000 fd39 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8009bbc:	0029      	movs	r1, r5
 8009bbe:	187b      	adds	r3, r7, r1
 8009bc0:	223f      	movs	r2, #63	; 0x3f
 8009bc2:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x00c;
 8009bc4:	187b      	adds	r3, r7, r1
 8009bc6:	220c      	movs	r2, #12
 8009bc8:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8009bca:	187b      	adds	r3, r7, r1
 8009bcc:	19ba      	adds	r2, r7, r6
 8009bce:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8009bd0:	193b      	adds	r3, r7, r4
 8009bd2:	781a      	ldrb	r2, [r3, #0]
 8009bd4:	187b      	adds	r3, r7, r1
 8009bd6:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8009bd8:	187b      	adds	r3, r7, r1
 8009bda:	220b      	movs	r2, #11
 8009bdc:	18ba      	adds	r2, r7, r2
 8009bde:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8009be0:	187b      	adds	r3, r7, r1
 8009be2:	2201      	movs	r2, #1
 8009be4:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8009be6:	187b      	adds	r3, r7, r1
 8009be8:	2100      	movs	r1, #0
 8009bea:	0018      	movs	r0, r3
 8009bec:	f000 fa26 	bl	800a03c <hci_send_req>
 8009bf0:	1e03      	subs	r3, r0, #0
 8009bf2:	da01      	bge.n	8009bf8 <aci_hal_write_config_data+0xec>
    return BLE_STATUS_TIMEOUT;
 8009bf4:	23ff      	movs	r3, #255	; 0xff
 8009bf6:	e00d      	b.n	8009c14 <aci_hal_write_config_data+0x108>
  if (status) {
 8009bf8:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <aci_hal_write_config_data+0x118>)
 8009bfa:	2298      	movs	r2, #152	; 0x98
 8009bfc:	0052      	lsls	r2, r2, #1
 8009bfe:	189b      	adds	r3, r3, r2
 8009c00:	19db      	adds	r3, r3, r7
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d004      	beq.n	8009c12 <aci_hal_write_config_data+0x106>
    return status;
 8009c08:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <aci_hal_write_config_data+0x118>)
 8009c0a:	189b      	adds	r3, r3, r2
 8009c0c:	19db      	adds	r3, r3, r7
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	e000      	b.n	8009c14 <aci_hal_write_config_data+0x108>
  }
  return BLE_STATUS_SUCCESS;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	0018      	movs	r0, r3
 8009c16:	46bd      	mov	sp, r7
 8009c18:	b04d      	add	sp, #308	; 0x134
 8009c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c1c:	fffffed7 	.word	0xfffffed7
 8009c20:	fffffed6 	.word	0xfffffed6
 8009c24:	fffffedb 	.word	0xfffffedb

08009c28 <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 8009c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c2a:	b0ef      	sub	sp, #444	; 0x1bc
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
 8009c32:	4b38      	ldr	r3, [pc, #224]	; (8009d14 <aci_hal_read_config_data+0xec>)
 8009c34:	24dc      	movs	r4, #220	; 0xdc
 8009c36:	0064      	lsls	r4, r4, #1
 8009c38:	191b      	adds	r3, r3, r4
 8009c3a:	19db      	adds	r3, r3, r7
 8009c3c:	1c02      	adds	r2, r0, #0
 8009c3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8009c40:	2694      	movs	r6, #148	; 0x94
 8009c42:	19bb      	adds	r3, r7, r6
 8009c44:	22da      	movs	r2, #218	; 0xda
 8009c46:	0052      	lsls	r2, r2, #1
 8009c48:	18b9      	adds	r1, r7, r2
 8009c4a:	600b      	str	r3, [r1, #0]
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009c4c:	2314      	movs	r3, #20
 8009c4e:	18fb      	adds	r3, r7, r3
 8009c50:	2280      	movs	r2, #128	; 0x80
 8009c52:	2100      	movs	r1, #0
 8009c54:	0018      	movs	r0, r3
 8009c56:	f000 fcea 	bl	800a62e <memset>
  uint8_t index_input = 0;
 8009c5a:	25b4      	movs	r5, #180	; 0xb4
 8009c5c:	35ff      	adds	r5, #255	; 0xff
 8009c5e:	197b      	adds	r3, r7, r5
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
  cp0->Offset = htob(Offset, 1);
 8009c64:	22da      	movs	r2, #218	; 0xda
 8009c66:	0052      	lsls	r2, r2, #1
 8009c68:	18b9      	adds	r1, r7, r2
 8009c6a:	680b      	ldr	r3, [r1, #0]
 8009c6c:	4a29      	ldr	r2, [pc, #164]	; (8009d14 <aci_hal_read_config_data+0xec>)
 8009c6e:	1911      	adds	r1, r2, r4
 8009c70:	19ca      	adds	r2, r1, r7
 8009c72:	7812      	ldrb	r2, [r2, #0]
 8009c74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c76:	197b      	adds	r3, r7, r5
 8009c78:	197a      	adds	r2, r7, r5
 8009c7a:	7812      	ldrb	r2, [r2, #0]
 8009c7c:	3201      	adds	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c80:	24cc      	movs	r4, #204	; 0xcc
 8009c82:	0064      	lsls	r4, r4, #1
 8009c84:	193b      	adds	r3, r7, r4
 8009c86:	2218      	movs	r2, #24
 8009c88:	2100      	movs	r1, #0
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	f000 fccf 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8009c90:	0021      	movs	r1, r4
 8009c92:	187b      	adds	r3, r7, r1
 8009c94:	223f      	movs	r2, #63	; 0x3f
 8009c96:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x00d;
 8009c98:	187b      	adds	r3, r7, r1
 8009c9a:	220d      	movs	r2, #13
 8009c9c:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8009c9e:	187b      	adds	r3, r7, r1
 8009ca0:	19ba      	adds	r2, r7, r6
 8009ca2:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8009ca4:	197b      	adds	r3, r7, r5
 8009ca6:	781a      	ldrb	r2, [r3, #0]
 8009ca8:	187b      	adds	r3, r7, r1
 8009caa:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 8009cac:	187b      	adds	r3, r7, r1
 8009cae:	2214      	movs	r2, #20
 8009cb0:	18ba      	adds	r2, r7, r2
 8009cb2:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 8009cb4:	187b      	adds	r3, r7, r1
 8009cb6:	2280      	movs	r2, #128	; 0x80
 8009cb8:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8009cba:	187b      	adds	r3, r7, r1
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	f000 f9bc 	bl	800a03c <hci_send_req>
 8009cc4:	1e03      	subs	r3, r0, #0
 8009cc6:	da01      	bge.n	8009ccc <aci_hal_read_config_data+0xa4>
    return BLE_STATUS_TIMEOUT;
 8009cc8:	23ff      	movs	r3, #255	; 0xff
 8009cca:	e01f      	b.n	8009d0c <aci_hal_read_config_data+0xe4>
  if (resp.Status) {
 8009ccc:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <aci_hal_read_config_data+0xf0>)
 8009cce:	22dc      	movs	r2, #220	; 0xdc
 8009cd0:	0052      	lsls	r2, r2, #1
 8009cd2:	189b      	adds	r3, r3, r2
 8009cd4:	19db      	adds	r3, r3, r7
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d004      	beq.n	8009ce6 <aci_hal_read_config_data+0xbe>
    return resp.Status;
 8009cdc:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <aci_hal_read_config_data+0xf0>)
 8009cde:	189b      	adds	r3, r3, r2
 8009ce0:	19db      	adds	r3, r3, r7
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	e012      	b.n	8009d0c <aci_hal_read_config_data+0xe4>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <aci_hal_read_config_data+0xf0>)
 8009ce8:	22dc      	movs	r2, #220	; 0xdc
 8009cea:	0052      	lsls	r2, r2, #1
 8009cec:	189b      	adds	r3, r3, r2
 8009cee:	19db      	adds	r3, r3, r7
 8009cf0:	785a      	ldrb	r2, [r3, #1]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	001a      	movs	r2, r3
 8009cfc:	2314      	movs	r3, #20
 8009cfe:	18fb      	adds	r3, r7, r3
 8009d00:	1c99      	adds	r1, r3, #2
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	0018      	movs	r0, r3
 8009d06:	f000 fc89 	bl	800a61c <memcpy>
  return BLE_STATUS_SUCCESS;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b06f      	add	sp, #444	; 0x1bc
 8009d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d14:	fffffe57 	.word	0xfffffe57
 8009d18:	fffffe5c 	.word	0xfffffe5c

08009d1c <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d1e:	b0cd      	sub	sp, #308	; 0x134
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	0002      	movs	r2, r0
 8009d24:	4b36      	ldr	r3, [pc, #216]	; (8009e00 <aci_hal_set_tx_power_level+0xe4>)
 8009d26:	2098      	movs	r0, #152	; 0x98
 8009d28:	0040      	lsls	r0, r0, #1
 8009d2a:	181b      	adds	r3, r3, r0
 8009d2c:	19db      	adds	r3, r3, r7
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	4b34      	ldr	r3, [pc, #208]	; (8009e04 <aci_hal_set_tx_power_level+0xe8>)
 8009d32:	181b      	adds	r3, r3, r0
 8009d34:	19db      	adds	r3, r3, r7
 8009d36:	1c0a      	adds	r2, r1, #0
 8009d38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009d3a:	260c      	movs	r6, #12
 8009d3c:	19bb      	adds	r3, r7, r6
 8009d3e:	2496      	movs	r4, #150	; 0x96
 8009d40:	0064      	lsls	r4, r4, #1
 8009d42:	193a      	adds	r2, r7, r4
 8009d44:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 8009d46:	4b30      	ldr	r3, [pc, #192]	; (8009e08 <aci_hal_set_tx_power_level+0xec>)
 8009d48:	0001      	movs	r1, r0
 8009d4a:	185b      	adds	r3, r3, r1
 8009d4c:	19db      	adds	r3, r3, r7
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009d52:	252c      	movs	r5, #44	; 0x2c
 8009d54:	35ff      	adds	r5, #255	; 0xff
 8009d56:	197b      	adds	r3, r7, r5
 8009d58:	2200      	movs	r2, #0
 8009d5a:	701a      	strb	r2, [r3, #0]
  cp0->En_High_Power = htob(En_High_Power, 1);
 8009d5c:	0020      	movs	r0, r4
 8009d5e:	183b      	adds	r3, r7, r0
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a27      	ldr	r2, [pc, #156]	; (8009e00 <aci_hal_set_tx_power_level+0xe4>)
 8009d64:	1852      	adds	r2, r2, r1
 8009d66:	19d2      	adds	r2, r2, r7
 8009d68:	7812      	ldrb	r2, [r2, #0]
 8009d6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d6c:	197b      	adds	r3, r7, r5
 8009d6e:	197a      	adds	r2, r7, r5
 8009d70:	7812      	ldrb	r2, [r2, #0]
 8009d72:	3201      	adds	r2, #1
 8009d74:	701a      	strb	r2, [r3, #0]
  cp0->PA_Level = htob(PA_Level, 1);
 8009d76:	183b      	adds	r3, r7, r0
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a22      	ldr	r2, [pc, #136]	; (8009e04 <aci_hal_set_tx_power_level+0xe8>)
 8009d7c:	1852      	adds	r2, r2, r1
 8009d7e:	19d2      	adds	r2, r2, r7
 8009d80:	7812      	ldrb	r2, [r2, #0]
 8009d82:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d84:	197b      	adds	r3, r7, r5
 8009d86:	197a      	adds	r2, r7, r5
 8009d88:	7812      	ldrb	r2, [r2, #0]
 8009d8a:	3201      	adds	r2, #1
 8009d8c:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d8e:	2488      	movs	r4, #136	; 0x88
 8009d90:	0064      	lsls	r4, r4, #1
 8009d92:	193b      	adds	r3, r7, r4
 8009d94:	2218      	movs	r2, #24
 8009d96:	2100      	movs	r1, #0
 8009d98:	0018      	movs	r0, r3
 8009d9a:	f000 fc48 	bl	800a62e <memset>
  rq.ogf = 0x3f;
 8009d9e:	0021      	movs	r1, r4
 8009da0:	187b      	adds	r3, r7, r1
 8009da2:	223f      	movs	r2, #63	; 0x3f
 8009da4:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x00f;
 8009da6:	187b      	adds	r3, r7, r1
 8009da8:	220f      	movs	r2, #15
 8009daa:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 8009dac:	187b      	adds	r3, r7, r1
 8009dae:	19ba      	adds	r2, r7, r6
 8009db0:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 8009db2:	197b      	adds	r3, r7, r5
 8009db4:	781a      	ldrb	r2, [r3, #0]
 8009db6:	187b      	adds	r3, r7, r1
 8009db8:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8009dba:	187b      	adds	r3, r7, r1
 8009dbc:	220b      	movs	r2, #11
 8009dbe:	18ba      	adds	r2, r7, r2
 8009dc0:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8009dc2:	187b      	adds	r3, r7, r1
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 8009dc8:	187b      	adds	r3, r7, r1
 8009dca:	2100      	movs	r1, #0
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f000 f935 	bl	800a03c <hci_send_req>
 8009dd2:	1e03      	subs	r3, r0, #0
 8009dd4:	da01      	bge.n	8009dda <aci_hal_set_tx_power_level+0xbe>
    return BLE_STATUS_TIMEOUT;
 8009dd6:	23ff      	movs	r3, #255	; 0xff
 8009dd8:	e00d      	b.n	8009df6 <aci_hal_set_tx_power_level+0xda>
  if (status) {
 8009dda:	4b0b      	ldr	r3, [pc, #44]	; (8009e08 <aci_hal_set_tx_power_level+0xec>)
 8009ddc:	2298      	movs	r2, #152	; 0x98
 8009dde:	0052      	lsls	r2, r2, #1
 8009de0:	189b      	adds	r3, r3, r2
 8009de2:	19db      	adds	r3, r3, r7
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d004      	beq.n	8009df4 <aci_hal_set_tx_power_level+0xd8>
    return status;
 8009dea:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <aci_hal_set_tx_power_level+0xec>)
 8009dec:	189b      	adds	r3, r3, r2
 8009dee:	19db      	adds	r3, r3, r7
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	e000      	b.n	8009df6 <aci_hal_set_tx_power_level+0xda>
  }
  return BLE_STATUS_SUCCESS;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	0018      	movs	r0, r3
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	b04d      	add	sp, #308	; 0x134
 8009dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	fffffed7 	.word	0xfffffed7
 8009e04:	fffffed6 	.word	0xfffffed6
 8009e08:	fffffedb 	.word	0xfffffedb

08009e0c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3308      	adds	r3, #8
 8009e18:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d001      	beq.n	8009e26 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009e22:	2301      	movs	r3, #1
 8009e24:	e00c      	b.n	8009e40 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3302      	adds	r3, #2
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	0019      	movs	r1, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2288      	movs	r2, #136	; 0x88
 8009e32:	5c9b      	ldrb	r3, [r3, r2]
 8009e34:	3b03      	subs	r3, #3
 8009e36:	4299      	cmp	r1, r3
 8009e38:	d001      	beq.n	8009e3e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e000      	b.n	8009e40 <verify_packet+0x34>
  
  return 0;      
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	0018      	movs	r0, r3
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b004      	add	sp, #16
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009e48:	b5b0      	push	{r4, r5, r7, lr}
 8009e4a:	b0a6      	sub	sp, #152	; 0x98
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	0004      	movs	r4, r0
 8009e50:	0008      	movs	r0, r1
 8009e52:	0011      	movs	r1, r2
 8009e54:	607b      	str	r3, [r7, #4]
 8009e56:	250e      	movs	r5, #14
 8009e58:	197b      	adds	r3, r7, r5
 8009e5a:	1c22      	adds	r2, r4, #0
 8009e5c:	801a      	strh	r2, [r3, #0]
 8009e5e:	240c      	movs	r4, #12
 8009e60:	193b      	adds	r3, r7, r4
 8009e62:	1c02      	adds	r2, r0, #0
 8009e64:	801a      	strh	r2, [r3, #0]
 8009e66:	200b      	movs	r0, #11
 8009e68:	183b      	adds	r3, r7, r0
 8009e6a:	1c0a      	adds	r2, r1, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009e6e:	193b      	adds	r3, r7, r4
 8009e70:	2200      	movs	r2, #0
 8009e72:	5e9b      	ldrsh	r3, [r3, r2]
 8009e74:	059b      	lsls	r3, r3, #22
 8009e76:	0d9b      	lsrs	r3, r3, #22
 8009e78:	b21a      	sxth	r2, r3
 8009e7a:	197b      	adds	r3, r7, r5
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	029b      	lsls	r3, r3, #10
 8009e80:	b21b      	sxth	r3, r3
 8009e82:	4313      	orrs	r3, r2
 8009e84:	b21b      	sxth	r3, r3
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	2114      	movs	r1, #20
 8009e8a:	187b      	adds	r3, r7, r1
 8009e8c:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8009e8e:	187b      	adds	r3, r7, r1
 8009e90:	0004      	movs	r4, r0
 8009e92:	183a      	adds	r2, r7, r0
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 8009e98:	2518      	movs	r5, #24
 8009e9a:	197b      	adds	r3, r7, r5
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009ea0:	197b      	adds	r3, r7, r5
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	187a      	adds	r2, r7, r1
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	0011      	movs	r1, r2
 8009eaa:	2303      	movs	r3, #3
 8009eac:	001a      	movs	r2, r3
 8009eae:	f000 fbb5 	bl	800a61c <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009eb2:	197b      	adds	r3, r7, r5
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	193a      	adds	r2, r7, r4
 8009eb8:	7812      	ldrb	r2, [r2, #0]
 8009eba:	6879      	ldr	r1, [r7, #4]
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f000 fbad 	bl	800a61c <memcpy>
  
  if (hciContext.io.Send)
 8009ec2:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <send_cmd+0xa0>)
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d009      	beq.n	8009ede <send_cmd+0x96>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009eca:	4b07      	ldr	r3, [pc, #28]	; (8009ee8 <send_cmd+0xa0>)
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	193a      	adds	r2, r7, r4
 8009ed0:	7812      	ldrb	r2, [r2, #0]
 8009ed2:	b292      	uxth	r2, r2
 8009ed4:	3204      	adds	r2, #4
 8009ed6:	b291      	uxth	r1, r2
 8009ed8:	197a      	adds	r2, r7, r5
 8009eda:	0010      	movs	r0, r2
 8009edc:	4798      	blx	r3
  }
}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	b026      	add	sp, #152	; 0x98
 8009ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ee6:	46c0      	nop			; (mov r8, r8)
 8009ee8:	200008a4 	.word	0x200008a4

08009eec <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8009ef6:	e00c      	b.n	8009f12 <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 8009ef8:	230c      	movs	r3, #12
 8009efa:	18fa      	adds	r2, r7, r3
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	0011      	movs	r1, r2
 8009f00:	0018      	movs	r0, r3
 8009f02:	f000 fb13 	bl	800a52c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	0011      	movs	r1, r2
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	f000 fa7f 	bl	800a410 <list_insert_head>
  while (!list_is_empty(src_list))
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	0018      	movs	r0, r3
 8009f16:	f000 fa55 	bl	800a3c4 <list_is_empty>
 8009f1a:	1e03      	subs	r3, r0, #0
 8009f1c:	d0ec      	beq.n	8009ef8 <move_list+0xc>
  }
}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	46c0      	nop			; (mov r8, r8)
 8009f22:	46bd      	mov	sp, r7
 8009f24:	b004      	add	sp, #16
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009f2e:	e00b      	b.n	8009f48 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009f30:	1d3a      	adds	r2, r7, #4
 8009f32:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <free_event_list+0x38>)
 8009f34:	0011      	movs	r1, r2
 8009f36:	0018      	movs	r0, r3
 8009f38:	f000 fad1 	bl	800a4de <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <free_event_list+0x3c>)
 8009f40:	0011      	movs	r1, r2
 8009f42:	0018      	movs	r0, r3
 8009f44:	f000 fa88 	bl	800a458 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <free_event_list+0x3c>)
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f000 fb15 	bl	800a57a <list_get_size>
 8009f50:	0003      	movs	r3, r0
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	ddec      	ble.n	8009f30 <free_event_list+0x8>
  }
}
 8009f56:	46c0      	nop			; (mov r8, r8)
 8009f58:	46c0      	nop			; (mov r8, r8)
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	b002      	add	sp, #8
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20000324 	.word	0x20000324
 8009f64:	2000031c 	.word	0x2000031c

08009f68 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009f68:	b590      	push	{r4, r7, lr}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009f78:	4b1d      	ldr	r3, [pc, #116]	; (8009ff0 <hci_init+0x88>)
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009f7e:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <hci_init+0x8c>)
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 fa11 	bl	800a3a8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009f86:	4b1c      	ldr	r3, [pc, #112]	; (8009ff8 <hci_init+0x90>)
 8009f88:	0018      	movs	r0, r3
 8009f8a:	f000 fa0d 	bl	800a3a8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009f8e:	f7f9 fcd7 	bl	8003940 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009f92:	230f      	movs	r3, #15
 8009f94:	18fb      	adds	r3, r7, r3
 8009f96:	2200      	movs	r2, #0
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	e010      	b.n	8009fbe <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009f9c:	240f      	movs	r4, #15
 8009f9e:	193b      	adds	r3, r7, r4
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	228c      	movs	r2, #140	; 0x8c
 8009fa4:	435a      	muls	r2, r3
 8009fa6:	4b15      	ldr	r3, [pc, #84]	; (8009ffc <hci_init+0x94>)
 8009fa8:	18d2      	adds	r2, r2, r3
 8009faa:	4b12      	ldr	r3, [pc, #72]	; (8009ff4 <hci_init+0x8c>)
 8009fac:	0011      	movs	r1, r2
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f000 fa52 	bl	800a458 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009fb4:	193b      	adds	r3, r7, r4
 8009fb6:	781a      	ldrb	r2, [r3, #0]
 8009fb8:	193b      	adds	r3, r7, r4
 8009fba:	3201      	adds	r2, #1
 8009fbc:	701a      	strb	r2, [r3, #0]
 8009fbe:	230f      	movs	r3, #15
 8009fc0:	18fb      	adds	r3, r7, r3
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b09      	cmp	r3, #9
 8009fc6:	d9e9      	bls.n	8009f9c <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009fc8:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <hci_init+0x88>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d003      	beq.n	8009fd8 <hci_init+0x70>
 8009fd0:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <hci_init+0x88>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <hci_init+0x88>)
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <hci_init+0x7e>
 8009fe0:	4b03      	ldr	r3, [pc, #12]	; (8009ff0 <hci_init+0x88>)
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	4798      	blx	r3
}
 8009fe6:	46c0      	nop			; (mov r8, r8)
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	b005      	add	sp, #20
 8009fec:	bd90      	pop	{r4, r7, pc}
 8009fee:	46c0      	nop			; (mov r8, r8)
 8009ff0:	200008a4 	.word	0x200008a4
 8009ff4:	2000031c 	.word	0x2000031c
 8009ff8:	20000324 	.word	0x20000324
 8009ffc:	2000032c 	.word	0x2000032c

0800a000 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <hci_register_io_bus+0x38>)
 800a00e:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	4b08      	ldr	r3, [pc, #32]	; (800a038 <hci_register_io_bus+0x38>)
 800a016:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	691a      	ldr	r2, [r3, #16]
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <hci_register_io_bus+0x38>)
 800a01e:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	699a      	ldr	r2, [r3, #24]
 800a024:	4b04      	ldr	r3, [pc, #16]	; (800a038 <hci_register_io_bus+0x38>)
 800a026:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	689a      	ldr	r2, [r3, #8]
 800a02c:	4b02      	ldr	r3, [pc, #8]	; (800a038 <hci_register_io_bus+0x38>)
 800a02e:	609a      	str	r2, [r3, #8]
}
 800a030:	46c0      	nop			; (mov r8, r8)
 800a032:	46bd      	mov	sp, r7
 800a034:	b002      	add	sp, #8
 800a036:	bd80      	pop	{r7, pc}
 800a038:	200008a4 	.word	0x200008a4

0800a03c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08e      	sub	sp, #56	; 0x38
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	000a      	movs	r2, r1
 800a046:	1cfb      	adds	r3, r7, #3
 800a048:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	885b      	ldrh	r3, [r3, #2]
 800a04e:	b21b      	sxth	r3, r3
 800a050:	059b      	lsls	r3, r3, #22
 800a052:	0d9b      	lsrs	r3, r3, #22
 800a054:	b21a      	sxth	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	029b      	lsls	r3, r3, #10
 800a05c:	b21b      	sxth	r3, r3
 800a05e:	4313      	orrs	r3, r2
 800a060:	b21a      	sxth	r2, r3
 800a062:	2336      	movs	r3, #54	; 0x36
 800a064:	18fb      	adds	r3, r7, r3
 800a066:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a06c:	2308      	movs	r3, #8
 800a06e:	18fb      	adds	r3, r7, r3
 800a070:	0018      	movs	r0, r3
 800a072:	f000 f999 	bl	800a3a8 <list_init_head>

  free_event_list();
 800a076:	f7ff ff57 	bl	8009f28 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	8818      	ldrh	r0, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	8859      	ldrh	r1, [r3, #2]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	b2da      	uxtb	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f7ff fedc 	bl	8009e48 <send_cmd>
  
  if (async)
 800a090:	1cfb      	adds	r3, r7, #3
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <hci_send_req+0x60>
  {
    return 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	e0f8      	b.n	800a28e <hci_send_req+0x252>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a09c:	f7fa fa9c 	bl	80045d8 <HAL_GetTick>
 800a0a0:	0003      	movs	r3, r0
 800a0a2:	633b      	str	r3, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a0a4:	f7fa fa98 	bl	80045d8 <HAL_GetTick>
 800a0a8:	0002      	movs	r2, r0
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	1ad2      	subs	r2, r2, r3
 800a0ae:	23fa      	movs	r3, #250	; 0xfa
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d900      	bls.n	800a0b8 <hci_send_req+0x7c>
 800a0b6:	e0c2      	b.n	800a23e <hci_send_req+0x202>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a0b8:	4b77      	ldr	r3, [pc, #476]	; (800a298 <hci_send_req+0x25c>)
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	f000 f982 	bl	800a3c4 <list_is_empty>
 800a0c0:	1e03      	subs	r3, r0, #0
 800a0c2:	d000      	beq.n	800a0c6 <hci_send_req+0x8a>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a0c4:	e7ee      	b.n	800a0a4 <hci_send_req+0x68>
      {
        break;
 800a0c6:	46c0      	nop			; (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a0c8:	2310      	movs	r3, #16
 800a0ca:	18fa      	adds	r2, r7, r3
 800a0cc:	4b72      	ldr	r3, [pc, #456]	; (800a298 <hci_send_req+0x25c>)
 800a0ce:	0011      	movs	r1, r2
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f000 fa04 	bl	800a4de <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	3308      	adds	r3, #8
 800a0da:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d000      	beq.n	800a0e6 <hci_send_req+0xaa>
 800a0e4:	e085      	b.n	800a1f2 <hci_send_req+0x1b6>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	3303      	adds	r3, #3
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2288      	movs	r2, #136	; 0x88
 800a0f8:	5c9b      	ldrb	r3, [r3, r2]
 800a0fa:	3b03      	subs	r3, #3
 800a0fc:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	2b3e      	cmp	r3, #62	; 0x3e
 800a104:	d057      	beq.n	800a1b6 <hci_send_req+0x17a>
 800a106:	dd00      	ble.n	800a10a <hci_send_req+0xce>
 800a108:	e075      	b.n	800a1f6 <hci_send_req+0x1ba>
 800a10a:	2b10      	cmp	r3, #16
 800a10c:	d100      	bne.n	800a110 <hci_send_req+0xd4>
 800a10e:	e098      	b.n	800a242 <hci_send_req+0x206>
 800a110:	dd00      	ble.n	800a114 <hci_send_req+0xd8>
 800a112:	e070      	b.n	800a1f6 <hci_send_req+0x1ba>
 800a114:	2b0e      	cmp	r3, #14
 800a116:	d02a      	beq.n	800a16e <hci_send_req+0x132>
 800a118:	2b0f      	cmp	r3, #15
 800a11a:	d000      	beq.n	800a11e <hci_send_req+0xe2>
 800a11c:	e06b      	b.n	800a1f6 <hci_send_req+0x1ba>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	789a      	ldrb	r2, [r3, #2]
 800a126:	78db      	ldrb	r3, [r3, #3]
 800a128:	021b      	lsls	r3, r3, #8
 800a12a:	4313      	orrs	r3, r2
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	2236      	movs	r2, #54	; 0x36
 800a130:	18ba      	adds	r2, r7, r2
 800a132:	8812      	ldrh	r2, [r2, #0]
 800a134:	429a      	cmp	r2, r3
 800a136:	d000      	beq.n	800a13a <hci_send_req+0xfe>
 800a138:	e085      	b.n	800a246 <hci_send_req+0x20a>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	2b0f      	cmp	r3, #15
 800a140:	d004      	beq.n	800a14c <hci_send_req+0x110>
          if (cs->status) {
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d057      	beq.n	800a1fa <hci_send_req+0x1be>
            goto failed;
 800a14a:	e07f      	b.n	800a24c <hci_send_req+0x210>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	695a      	ldr	r2, [r3, #20]
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	4293      	cmp	r3, r2
 800a154:	d900      	bls.n	800a158 <hci_send_req+0x11c>
 800a156:	0013      	movs	r3, r2
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6918      	ldr	r0, [r3, #16]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	695a      	ldr	r2, [r3, #20]
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	0019      	movs	r1, r3
 800a168:	f000 fa58 	bl	800a61c <memcpy>
        goto done;
 800a16c:	e081      	b.n	800a272 <hci_send_req+0x236>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	785a      	ldrb	r2, [r3, #1]
 800a176:	789b      	ldrb	r3, [r3, #2]
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	4313      	orrs	r3, r2
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2236      	movs	r2, #54	; 0x36
 800a180:	18ba      	adds	r2, r7, r2
 800a182:	8812      	ldrh	r2, [r2, #0]
 800a184:	429a      	cmp	r2, r3
 800a186:	d160      	bne.n	800a24a <hci_send_req+0x20e>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	3303      	adds	r3, #3
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	3b03      	subs	r3, #3
 800a192:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	695a      	ldr	r2, [r3, #20]
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d900      	bls.n	800a1a0 <hci_send_req+0x164>
 800a19e:	0013      	movs	r3, r2
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6918      	ldr	r0, [r3, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	695a      	ldr	r2, [r3, #20]
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	0019      	movs	r1, r3
 800a1b0:	f000 fa34 	bl	800a61c <memcpy>
        goto done;
 800a1b4:	e05d      	b.n	800a272 <hci_send_req+0x236>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	001a      	movs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d11a      	bne.n	800a1fe <hci_send_req+0x1c2>
          break;
      
        len -= 1;
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	695a      	ldr	r2, [r3, #20]
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d900      	bls.n	800a1da <hci_send_req+0x19e>
 800a1d8:	0013      	movs	r3, r2
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6918      	ldr	r0, [r3, #16]
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	1c59      	adds	r1, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	001a      	movs	r2, r3
 800a1ec:	f000 fa16 	bl	800a61c <memcpy>
        goto done;
 800a1f0:	e03f      	b.n	800a272 <hci_send_req+0x236>
        goto failed;
      
      default:      
        break;
      }
    }
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	e004      	b.n	800a200 <hci_send_req+0x1c4>
        break;
 800a1f6:	46c0      	nop			; (mov r8, r8)
 800a1f8:	e002      	b.n	800a200 <hci_send_req+0x1c4>
          break;
 800a1fa:	46c0      	nop			; (mov r8, r8)
 800a1fc:	e000      	b.n	800a200 <hci_send_req+0x1c4>
          break;
 800a1fe:	46c0      	nop			; (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a200:	4b26      	ldr	r3, [pc, #152]	; (800a29c <hci_send_req+0x260>)
 800a202:	0018      	movs	r0, r3
 800a204:	f000 f8de 	bl	800a3c4 <list_is_empty>
 800a208:	1e03      	subs	r3, r0, #0
 800a20a:	d00e      	beq.n	800a22a <hci_send_req+0x1ee>
 800a20c:	4b22      	ldr	r3, [pc, #136]	; (800a298 <hci_send_req+0x25c>)
 800a20e:	0018      	movs	r0, r3
 800a210:	f000 f8d8 	bl	800a3c4 <list_is_empty>
 800a214:	1e03      	subs	r3, r0, #0
 800a216:	d008      	beq.n	800a22a <hci_send_req+0x1ee>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4b20      	ldr	r3, [pc, #128]	; (800a29c <hci_send_req+0x260>)
 800a21c:	0011      	movs	r1, r2
 800a21e:	0018      	movs	r0, r3
 800a220:	f000 f91a 	bl	800a458 <list_insert_tail>
      hciReadPacket=NULL;
 800a224:	2300      	movs	r3, #0
 800a226:	613b      	str	r3, [r7, #16]
 800a228:	e008      	b.n	800a23c <hci_send_req+0x200>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	2308      	movs	r3, #8
 800a22e:	18fb      	adds	r3, r7, r3
 800a230:	0011      	movs	r1, r2
 800a232:	0018      	movs	r0, r3
 800a234:	f000 f910 	bl	800a458 <list_insert_tail>
      hciReadPacket=NULL;
 800a238:	2300      	movs	r3, #0
 800a23a:	613b      	str	r3, [r7, #16]
  {
 800a23c:	e72e      	b.n	800a09c <hci_send_req+0x60>
        goto failed;
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	e004      	b.n	800a24c <hci_send_req+0x210>
        goto failed;
 800a242:	46c0      	nop			; (mov r8, r8)
 800a244:	e002      	b.n	800a24c <hci_send_req+0x210>
          goto failed;
 800a246:	46c0      	nop			; (mov r8, r8)
 800a248:	e000      	b.n	800a24c <hci_send_req+0x210>
          goto failed;
 800a24a:	46c0      	nop			; (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d005      	beq.n	800a25e <hci_send_req+0x222>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	4b11      	ldr	r3, [pc, #68]	; (800a29c <hci_send_req+0x260>)
 800a256:	0011      	movs	r1, r2
 800a258:	0018      	movs	r0, r3
 800a25a:	f000 f8d9 	bl	800a410 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a25e:	2308      	movs	r3, #8
 800a260:	18fa      	adds	r2, r7, r3
 800a262:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <hci_send_req+0x25c>)
 800a264:	0011      	movs	r1, r2
 800a266:	0018      	movs	r0, r3
 800a268:	f7ff fe40 	bl	8009eec <move_list>

  return -1;
 800a26c:	2301      	movs	r3, #1
 800a26e:	425b      	negs	r3, r3
 800a270:	e00d      	b.n	800a28e <hci_send_req+0x252>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	4b09      	ldr	r3, [pc, #36]	; (800a29c <hci_send_req+0x260>)
 800a276:	0011      	movs	r1, r2
 800a278:	0018      	movs	r0, r3
 800a27a:	f000 f8c9 	bl	800a410 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a27e:	2308      	movs	r3, #8
 800a280:	18fa      	adds	r2, r7, r3
 800a282:	4b05      	ldr	r3, [pc, #20]	; (800a298 <hci_send_req+0x25c>)
 800a284:	0011      	movs	r1, r2
 800a286:	0018      	movs	r0, r3
 800a288:	f7ff fe30 	bl	8009eec <move_list>

  return 0;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	0018      	movs	r0, r3
 800a290:	46bd      	mov	sp, r7
 800a292:	b00e      	add	sp, #56	; 0x38
 800a294:	bd80      	pop	{r7, pc}
 800a296:	46c0      	nop			; (mov r8, r8)
 800a298:	20000324 	.word	0x20000324
 800a29c:	2000031c 	.word	0x2000031c

0800a2a0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a2aa:	e015      	b.n	800a2d8 <hci_user_evt_proc+0x38>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a2ac:	1d3a      	adds	r2, r7, #4
 800a2ae:	4b10      	ldr	r3, [pc, #64]	; (800a2f0 <hci_user_evt_proc+0x50>)
 800a2b0:	0011      	movs	r1, r2
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	f000 f913 	bl	800a4de <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a2b8:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <hci_user_evt_proc+0x54>)
 800a2ba:	69db      	ldr	r3, [r3, #28]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d005      	beq.n	800a2cc <hci_user_evt_proc+0x2c>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	; (800a2f4 <hci_user_evt_proc+0x54>)
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	3208      	adds	r2, #8
 800a2c8:	0010      	movs	r0, r2
 800a2ca:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <hci_user_evt_proc+0x58>)
 800a2d0:	0011      	movs	r1, r2
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	f000 f8c0 	bl	800a458 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <hci_user_evt_proc+0x50>)
 800a2da:	0018      	movs	r0, r3
 800a2dc:	f000 f872 	bl	800a3c4 <list_is_empty>
 800a2e0:	1e03      	subs	r3, r0, #0
 800a2e2:	d0e3      	beq.n	800a2ac <hci_user_evt_proc+0xc>
  }
}
 800a2e4:	46c0      	nop			; (mov r8, r8)
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	b002      	add	sp, #8
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	46c0      	nop			; (mov r8, r8)
 800a2f0:	20000324 	.word	0x20000324
 800a2f4:	200008a4 	.word	0x200008a4
 800a2f8:	2000031c 	.word	0x2000031c

0800a2fc <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a304:	2300      	movs	r3, #0
 800a306:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a30c:	4b23      	ldr	r3, [pc, #140]	; (800a39c <hci_notify_asynch_evt+0xa0>)
 800a30e:	0018      	movs	r0, r3
 800a310:	f000 f858 	bl	800a3c4 <list_is_empty>
 800a314:	1e03      	subs	r3, r0, #0
 800a316:	d13a      	bne.n	800a38e <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a318:	230c      	movs	r3, #12
 800a31a:	18fa      	adds	r2, r7, r3
 800a31c:	4b1f      	ldr	r3, [pc, #124]	; (800a39c <hci_notify_asynch_evt+0xa0>)
 800a31e:	0011      	movs	r1, r2
 800a320:	0018      	movs	r0, r3
 800a322:	f000 f8dc 	bl	800a4de <list_remove_head>
    
    if (hciContext.io.Receive)
 800a326:	4b1e      	ldr	r3, [pc, #120]	; (800a3a0 <hci_notify_asynch_evt+0xa4>)
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d031      	beq.n	800a392 <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a32e:	4b1c      	ldr	r3, [pc, #112]	; (800a3a0 <hci_notify_asynch_evt+0xa4>)
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	3208      	adds	r2, #8
 800a336:	2180      	movs	r1, #128	; 0x80
 800a338:	0010      	movs	r0, r2
 800a33a:	4798      	blx	r3
 800a33c:	0002      	movs	r2, r0
 800a33e:	2113      	movs	r1, #19
 800a340:	187b      	adds	r3, r7, r1
 800a342:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 800a344:	000a      	movs	r2, r1
 800a346:	18bb      	adds	r3, r7, r2
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d018      	beq.n	800a380 <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	18ba      	adds	r2, r7, r2
 800a352:	2188      	movs	r1, #136	; 0x88
 800a354:	7812      	ldrb	r2, [r2, #0]
 800a356:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	0018      	movs	r0, r3
 800a35c:	f7ff fd56 	bl	8009e0c <verify_packet>
 800a360:	1e03      	subs	r3, r0, #0
 800a362:	d106      	bne.n	800a372 <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <hci_notify_asynch_evt+0xa8>)
 800a368:	0011      	movs	r1, r2
 800a36a:	0018      	movs	r0, r3
 800a36c:	f000 f874 	bl	800a458 <list_insert_tail>
 800a370:	e00f      	b.n	800a392 <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4b09      	ldr	r3, [pc, #36]	; (800a39c <hci_notify_asynch_evt+0xa0>)
 800a376:	0011      	movs	r1, r2
 800a378:	0018      	movs	r0, r3
 800a37a:	f000 f849 	bl	800a410 <list_insert_head>
 800a37e:	e008      	b.n	800a392 <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4b06      	ldr	r3, [pc, #24]	; (800a39c <hci_notify_asynch_evt+0xa0>)
 800a384:	0011      	movs	r1, r2
 800a386:	0018      	movs	r0, r3
 800a388:	f000 f842 	bl	800a410 <list_insert_head>
 800a38c:	e001      	b.n	800a392 <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 800a38e:	2301      	movs	r3, #1
 800a390:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a392:	697b      	ldr	r3, [r7, #20]
  
}
 800a394:	0018      	movs	r0, r3
 800a396:	46bd      	mov	sp, r7
 800a398:	b006      	add	sp, #24
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	2000031c 	.word	0x2000031c
 800a3a0:	200008a4 	.word	0x200008a4
 800a3a4:	20000324 	.word	0x20000324

0800a3a8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	605a      	str	r2, [r3, #4]
}
 800a3bc:	46c0      	nop			; (mov r8, r8)
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a3d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3d6:	b672      	cpsid	i
}
 800a3d8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d104      	bne.n	800a3ee <list_is_empty+0x2a>
  {
    return_value = 1;
 800a3e4:	2317      	movs	r3, #23
 800a3e6:	18fb      	adds	r3, r7, r3
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	e003      	b.n	800a3f6 <list_is_empty+0x32>
  }
  else
  {
    return_value = 0;
 800a3ee:	2317      	movs	r3, #23
 800a3f0:	18fb      	adds	r3, r7, r3
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	f383 8810 	msr	PRIMASK, r3
}
 800a400:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a402:	2317      	movs	r3, #23
 800a404:	18fb      	adds	r3, r7, r3
 800a406:	781b      	ldrb	r3, [r3, #0]
}
 800a408:	0018      	movs	r0, r3
 800a40a:	46bd      	mov	sp, r7
 800a40c:	b006      	add	sp, #24
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a41a:	f3ef 8310 	mrs	r3, PRIMASK
 800a41e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a420:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a422:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a424:	b672      	cpsid	i
}
 800a426:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	605a      	str	r2, [r3, #4]
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f383 8810 	msr	PRIMASK, r3
}
 800a44e:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a450:	46c0      	nop			; (mov r8, r8)
 800a452:	46bd      	mov	sp, r7
 800a454:	b006      	add	sp, #24
 800a456:	bd80      	pop	{r7, pc}

0800a458 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a462:	f3ef 8310 	mrs	r3, PRIMASK
 800a466:	60fb      	str	r3, [r7, #12]
  return(result);
 800a468:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a46a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a46c:	b672      	cpsid	i
}
 800a46e:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	f383 8810 	msr	PRIMASK, r3
}
 800a496:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a498:	46c0      	nop			; (mov r8, r8)
 800a49a:	46bd      	mov	sp, r7
 800a49c:	b006      	add	sp, #24
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4b2:	b672      	cpsid	i
}
 800a4b4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6812      	ldr	r2, [r2, #0]
 800a4be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	6852      	ldr	r2, [r2, #4]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f383 8810 	msr	PRIMASK, r3
}
 800a4d4:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	b006      	add	sp, #24
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b086      	sub	sp, #24
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4f2:	b672      	cpsid	i
}
 800a4f4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	0018      	movs	r0, r3
 800a504:	f7ff ffcc 	bl	800a4a0 <list_remove_node>
  (*node)->next = NULL;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2200      	movs	r2, #0
 800a50e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2200      	movs	r2, #0
 800a516:	605a      	str	r2, [r3, #4]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f383 8810 	msr	PRIMASK, r3
}
 800a522:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a524:	46c0      	nop			; (mov r8, r8)
 800a526:	46bd      	mov	sp, r7
 800a528:	b006      	add	sp, #24
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a536:	f3ef 8310 	mrs	r3, PRIMASK
 800a53a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a53c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a53e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a540:	b672      	cpsid	i
}
 800a542:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	0018      	movs	r0, r3
 800a552:	f7ff ffa5 	bl	800a4a0 <list_remove_node>
  (*node)->next = NULL;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2200      	movs	r2, #0
 800a55c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2200      	movs	r2, #0
 800a564:	605a      	str	r2, [r3, #4]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f383 8810 	msr	PRIMASK, r3
}
 800a570:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a572:	46c0      	nop			; (mov r8, r8)
 800a574:	46bd      	mov	sp, r7
 800a576:	b006      	add	sp, #24
 800a578:	bd80      	pop	{r7, pc}

0800a57a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b088      	sub	sp, #32
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a586:	f3ef 8310 	mrs	r3, PRIMASK
 800a58a:	613b      	str	r3, [r7, #16]
  return(result);
 800a58c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a58e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a590:	b672      	cpsid	i
}
 800a592:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a59a:	e005      	b.n	800a5a8 <list_get_size+0x2e>
  {
    size++;
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d1f5      	bne.n	800a59c <list_get_size+0x22>
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f383 8810 	msr	PRIMASK, r3
}
 800a5ba:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a5bc:	69fb      	ldr	r3, [r7, #28]
}
 800a5be:	0018      	movs	r0, r3
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	b008      	add	sp, #32
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <__errno>:
 800a5c8:	4b01      	ldr	r3, [pc, #4]	; (800a5d0 <__errno+0x8>)
 800a5ca:	6818      	ldr	r0, [r3, #0]
 800a5cc:	4770      	bx	lr
 800a5ce:	46c0      	nop			; (mov r8, r8)
 800a5d0:	20000024 	.word	0x20000024

0800a5d4 <__libc_init_array>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	4d0c      	ldr	r5, [pc, #48]	; (800a60c <__libc_init_array+0x38>)
 800a5da:	4c0d      	ldr	r4, [pc, #52]	; (800a610 <__libc_init_array+0x3c>)
 800a5dc:	1b64      	subs	r4, r4, r5
 800a5de:	10a4      	asrs	r4, r4, #2
 800a5e0:	42a6      	cmp	r6, r4
 800a5e2:	d109      	bne.n	800a5f8 <__libc_init_array+0x24>
 800a5e4:	2600      	movs	r6, #0
 800a5e6:	f001 f8e1 	bl	800b7ac <_init>
 800a5ea:	4d0a      	ldr	r5, [pc, #40]	; (800a614 <__libc_init_array+0x40>)
 800a5ec:	4c0a      	ldr	r4, [pc, #40]	; (800a618 <__libc_init_array+0x44>)
 800a5ee:	1b64      	subs	r4, r4, r5
 800a5f0:	10a4      	asrs	r4, r4, #2
 800a5f2:	42a6      	cmp	r6, r4
 800a5f4:	d105      	bne.n	800a602 <__libc_init_array+0x2e>
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
 800a5f8:	00b3      	lsls	r3, r6, #2
 800a5fa:	58eb      	ldr	r3, [r5, r3]
 800a5fc:	4798      	blx	r3
 800a5fe:	3601      	adds	r6, #1
 800a600:	e7ee      	b.n	800a5e0 <__libc_init_array+0xc>
 800a602:	00b3      	lsls	r3, r6, #2
 800a604:	58eb      	ldr	r3, [r5, r3]
 800a606:	4798      	blx	r3
 800a608:	3601      	adds	r6, #1
 800a60a:	e7f2      	b.n	800a5f2 <__libc_init_array+0x1e>
 800a60c:	0800bbe0 	.word	0x0800bbe0
 800a610:	0800bbe0 	.word	0x0800bbe0
 800a614:	0800bbe0 	.word	0x0800bbe0
 800a618:	0800bbe4 	.word	0x0800bbe4

0800a61c <memcpy>:
 800a61c:	2300      	movs	r3, #0
 800a61e:	b510      	push	{r4, lr}
 800a620:	429a      	cmp	r2, r3
 800a622:	d100      	bne.n	800a626 <memcpy+0xa>
 800a624:	bd10      	pop	{r4, pc}
 800a626:	5ccc      	ldrb	r4, [r1, r3]
 800a628:	54c4      	strb	r4, [r0, r3]
 800a62a:	3301      	adds	r3, #1
 800a62c:	e7f8      	b.n	800a620 <memcpy+0x4>

0800a62e <memset>:
 800a62e:	0003      	movs	r3, r0
 800a630:	1882      	adds	r2, r0, r2
 800a632:	4293      	cmp	r3, r2
 800a634:	d100      	bne.n	800a638 <memset+0xa>
 800a636:	4770      	bx	lr
 800a638:	7019      	strb	r1, [r3, #0]
 800a63a:	3301      	adds	r3, #1
 800a63c:	e7f9      	b.n	800a632 <memset+0x4>
	...

0800a640 <srand>:
 800a640:	4b11      	ldr	r3, [pc, #68]	; (800a688 <srand+0x48>)
 800a642:	b570      	push	{r4, r5, r6, lr}
 800a644:	681d      	ldr	r5, [r3, #0]
 800a646:	0004      	movs	r4, r0
 800a648:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d116      	bne.n	800a67c <srand+0x3c>
 800a64e:	2018      	movs	r0, #24
 800a650:	f000 f892 	bl	800a778 <malloc>
 800a654:	1e02      	subs	r2, r0, #0
 800a656:	63a8      	str	r0, [r5, #56]	; 0x38
 800a658:	d104      	bne.n	800a664 <srand+0x24>
 800a65a:	2142      	movs	r1, #66	; 0x42
 800a65c:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <srand+0x4c>)
 800a65e:	480c      	ldr	r0, [pc, #48]	; (800a690 <srand+0x50>)
 800a660:	f000 f85c 	bl	800a71c <__assert_func>
 800a664:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <srand+0x54>)
 800a666:	2100      	movs	r1, #0
 800a668:	6003      	str	r3, [r0, #0]
 800a66a:	4b0b      	ldr	r3, [pc, #44]	; (800a698 <srand+0x58>)
 800a66c:	6043      	str	r3, [r0, #4]
 800a66e:	4b0b      	ldr	r3, [pc, #44]	; (800a69c <srand+0x5c>)
 800a670:	6083      	str	r3, [r0, #8]
 800a672:	230b      	movs	r3, #11
 800a674:	8183      	strh	r3, [r0, #12]
 800a676:	2001      	movs	r0, #1
 800a678:	6110      	str	r0, [r2, #16]
 800a67a:	6151      	str	r1, [r2, #20]
 800a67c:	2200      	movs	r2, #0
 800a67e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a680:	611c      	str	r4, [r3, #16]
 800a682:	615a      	str	r2, [r3, #20]
 800a684:	bd70      	pop	{r4, r5, r6, pc}
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	20000024 	.word	0x20000024
 800a68c:	0800ba94 	.word	0x0800ba94
 800a690:	0800baab 	.word	0x0800baab
 800a694:	abcd330e 	.word	0xabcd330e
 800a698:	e66d1234 	.word	0xe66d1234
 800a69c:	0005deec 	.word	0x0005deec

0800a6a0 <rand>:
 800a6a0:	4b16      	ldr	r3, [pc, #88]	; (800a6fc <rand+0x5c>)
 800a6a2:	b510      	push	{r4, lr}
 800a6a4:	681c      	ldr	r4, [r3, #0]
 800a6a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d116      	bne.n	800a6da <rand+0x3a>
 800a6ac:	2018      	movs	r0, #24
 800a6ae:	f000 f863 	bl	800a778 <malloc>
 800a6b2:	1e02      	subs	r2, r0, #0
 800a6b4:	63a0      	str	r0, [r4, #56]	; 0x38
 800a6b6:	d104      	bne.n	800a6c2 <rand+0x22>
 800a6b8:	214e      	movs	r1, #78	; 0x4e
 800a6ba:	4b11      	ldr	r3, [pc, #68]	; (800a700 <rand+0x60>)
 800a6bc:	4811      	ldr	r0, [pc, #68]	; (800a704 <rand+0x64>)
 800a6be:	f000 f82d 	bl	800a71c <__assert_func>
 800a6c2:	4b11      	ldr	r3, [pc, #68]	; (800a708 <rand+0x68>)
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	6003      	str	r3, [r0, #0]
 800a6c8:	4b10      	ldr	r3, [pc, #64]	; (800a70c <rand+0x6c>)
 800a6ca:	6043      	str	r3, [r0, #4]
 800a6cc:	4b10      	ldr	r3, [pc, #64]	; (800a710 <rand+0x70>)
 800a6ce:	6083      	str	r3, [r0, #8]
 800a6d0:	230b      	movs	r3, #11
 800a6d2:	8183      	strh	r3, [r0, #12]
 800a6d4:	2001      	movs	r0, #1
 800a6d6:	6110      	str	r0, [r2, #16]
 800a6d8:	6151      	str	r1, [r2, #20]
 800a6da:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a6dc:	4a0d      	ldr	r2, [pc, #52]	; (800a714 <rand+0x74>)
 800a6de:	6920      	ldr	r0, [r4, #16]
 800a6e0:	6961      	ldr	r1, [r4, #20]
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	; (800a718 <rand+0x78>)
 800a6e4:	f7f5 feb0 	bl	8000448 <__aeabi_lmul>
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	1880      	adds	r0, r0, r2
 800a6ee:	4159      	adcs	r1, r3
 800a6f0:	6120      	str	r0, [r4, #16]
 800a6f2:	6161      	str	r1, [r4, #20]
 800a6f4:	0048      	lsls	r0, r1, #1
 800a6f6:	0840      	lsrs	r0, r0, #1
 800a6f8:	bd10      	pop	{r4, pc}
 800a6fa:	46c0      	nop			; (mov r8, r8)
 800a6fc:	20000024 	.word	0x20000024
 800a700:	0800ba94 	.word	0x0800ba94
 800a704:	0800baab 	.word	0x0800baab
 800a708:	abcd330e 	.word	0xabcd330e
 800a70c:	e66d1234 	.word	0xe66d1234
 800a710:	0005deec 	.word	0x0005deec
 800a714:	4c957f2d 	.word	0x4c957f2d
 800a718:	5851f42d 	.word	0x5851f42d

0800a71c <__assert_func>:
 800a71c:	b530      	push	{r4, r5, lr}
 800a71e:	0014      	movs	r4, r2
 800a720:	001a      	movs	r2, r3
 800a722:	4b09      	ldr	r3, [pc, #36]	; (800a748 <__assert_func+0x2c>)
 800a724:	0005      	movs	r5, r0
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	b085      	sub	sp, #20
 800a72a:	68d8      	ldr	r0, [r3, #12]
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <__assert_func+0x30>)
 800a72e:	2c00      	cmp	r4, #0
 800a730:	d101      	bne.n	800a736 <__assert_func+0x1a>
 800a732:	4b07      	ldr	r3, [pc, #28]	; (800a750 <__assert_func+0x34>)
 800a734:	001c      	movs	r4, r3
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	9100      	str	r1, [sp, #0]
 800a73a:	002b      	movs	r3, r5
 800a73c:	4905      	ldr	r1, [pc, #20]	; (800a754 <__assert_func+0x38>)
 800a73e:	9402      	str	r4, [sp, #8]
 800a740:	f000 f80a 	bl	800a758 <fiprintf>
 800a744:	f000 fcc8 	bl	800b0d8 <abort>
 800a748:	20000024 	.word	0x20000024
 800a74c:	0800bb06 	.word	0x0800bb06
 800a750:	0800bb41 	.word	0x0800bb41
 800a754:	0800bb13 	.word	0x0800bb13

0800a758 <fiprintf>:
 800a758:	b40e      	push	{r1, r2, r3}
 800a75a:	b503      	push	{r0, r1, lr}
 800a75c:	0001      	movs	r1, r0
 800a75e:	ab03      	add	r3, sp, #12
 800a760:	4804      	ldr	r0, [pc, #16]	; (800a774 <fiprintf+0x1c>)
 800a762:	cb04      	ldmia	r3!, {r2}
 800a764:	6800      	ldr	r0, [r0, #0]
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	f000 f91a 	bl	800a9a0 <_vfiprintf_r>
 800a76c:	b002      	add	sp, #8
 800a76e:	bc08      	pop	{r3}
 800a770:	b003      	add	sp, #12
 800a772:	4718      	bx	r3
 800a774:	20000024 	.word	0x20000024

0800a778 <malloc>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	4b03      	ldr	r3, [pc, #12]	; (800a788 <malloc+0x10>)
 800a77c:	0001      	movs	r1, r0
 800a77e:	6818      	ldr	r0, [r3, #0]
 800a780:	f000 f870 	bl	800a864 <_malloc_r>
 800a784:	bd10      	pop	{r4, pc}
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	20000024 	.word	0x20000024

0800a78c <_free_r>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	0005      	movs	r5, r0
 800a790:	2900      	cmp	r1, #0
 800a792:	d010      	beq.n	800a7b6 <_free_r+0x2a>
 800a794:	1f0c      	subs	r4, r1, #4
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	da00      	bge.n	800a79e <_free_r+0x12>
 800a79c:	18e4      	adds	r4, r4, r3
 800a79e:	0028      	movs	r0, r5
 800a7a0:	f000 feec 	bl	800b57c <__malloc_lock>
 800a7a4:	4a1d      	ldr	r2, [pc, #116]	; (800a81c <_free_r+0x90>)
 800a7a6:	6813      	ldr	r3, [r2, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d105      	bne.n	800a7b8 <_free_r+0x2c>
 800a7ac:	6063      	str	r3, [r4, #4]
 800a7ae:	6014      	str	r4, [r2, #0]
 800a7b0:	0028      	movs	r0, r5
 800a7b2:	f000 feeb 	bl	800b58c <__malloc_unlock>
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	d908      	bls.n	800a7ce <_free_r+0x42>
 800a7bc:	6821      	ldr	r1, [r4, #0]
 800a7be:	1860      	adds	r0, r4, r1
 800a7c0:	4283      	cmp	r3, r0
 800a7c2:	d1f3      	bne.n	800a7ac <_free_r+0x20>
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	1841      	adds	r1, r0, r1
 800a7ca:	6021      	str	r1, [r4, #0]
 800a7cc:	e7ee      	b.n	800a7ac <_free_r+0x20>
 800a7ce:	001a      	movs	r2, r3
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <_free_r+0x4e>
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	d9f9      	bls.n	800a7ce <_free_r+0x42>
 800a7da:	6811      	ldr	r1, [r2, #0]
 800a7dc:	1850      	adds	r0, r2, r1
 800a7de:	42a0      	cmp	r0, r4
 800a7e0:	d10b      	bne.n	800a7fa <_free_r+0x6e>
 800a7e2:	6820      	ldr	r0, [r4, #0]
 800a7e4:	1809      	adds	r1, r1, r0
 800a7e6:	1850      	adds	r0, r2, r1
 800a7e8:	6011      	str	r1, [r2, #0]
 800a7ea:	4283      	cmp	r3, r0
 800a7ec:	d1e0      	bne.n	800a7b0 <_free_r+0x24>
 800a7ee:	6818      	ldr	r0, [r3, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	1841      	adds	r1, r0, r1
 800a7f4:	6011      	str	r1, [r2, #0]
 800a7f6:	6053      	str	r3, [r2, #4]
 800a7f8:	e7da      	b.n	800a7b0 <_free_r+0x24>
 800a7fa:	42a0      	cmp	r0, r4
 800a7fc:	d902      	bls.n	800a804 <_free_r+0x78>
 800a7fe:	230c      	movs	r3, #12
 800a800:	602b      	str	r3, [r5, #0]
 800a802:	e7d5      	b.n	800a7b0 <_free_r+0x24>
 800a804:	6821      	ldr	r1, [r4, #0]
 800a806:	1860      	adds	r0, r4, r1
 800a808:	4283      	cmp	r3, r0
 800a80a:	d103      	bne.n	800a814 <_free_r+0x88>
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	1841      	adds	r1, r0, r1
 800a812:	6021      	str	r1, [r4, #0]
 800a814:	6063      	str	r3, [r4, #4]
 800a816:	6054      	str	r4, [r2, #4]
 800a818:	e7ca      	b.n	800a7b0 <_free_r+0x24>
 800a81a:	46c0      	nop			; (mov r8, r8)
 800a81c:	200008c4 	.word	0x200008c4

0800a820 <sbrk_aligned>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	4e0f      	ldr	r6, [pc, #60]	; (800a860 <sbrk_aligned+0x40>)
 800a824:	000d      	movs	r5, r1
 800a826:	6831      	ldr	r1, [r6, #0]
 800a828:	0004      	movs	r4, r0
 800a82a:	2900      	cmp	r1, #0
 800a82c:	d102      	bne.n	800a834 <sbrk_aligned+0x14>
 800a82e:	f000 fb73 	bl	800af18 <_sbrk_r>
 800a832:	6030      	str	r0, [r6, #0]
 800a834:	0029      	movs	r1, r5
 800a836:	0020      	movs	r0, r4
 800a838:	f000 fb6e 	bl	800af18 <_sbrk_r>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d00a      	beq.n	800a856 <sbrk_aligned+0x36>
 800a840:	2303      	movs	r3, #3
 800a842:	1cc5      	adds	r5, r0, #3
 800a844:	439d      	bics	r5, r3
 800a846:	42a8      	cmp	r0, r5
 800a848:	d007      	beq.n	800a85a <sbrk_aligned+0x3a>
 800a84a:	1a29      	subs	r1, r5, r0
 800a84c:	0020      	movs	r0, r4
 800a84e:	f000 fb63 	bl	800af18 <_sbrk_r>
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	d101      	bne.n	800a85a <sbrk_aligned+0x3a>
 800a856:	2501      	movs	r5, #1
 800a858:	426d      	negs	r5, r5
 800a85a:	0028      	movs	r0, r5
 800a85c:	bd70      	pop	{r4, r5, r6, pc}
 800a85e:	46c0      	nop			; (mov r8, r8)
 800a860:	200008c8 	.word	0x200008c8

0800a864 <_malloc_r>:
 800a864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a866:	2203      	movs	r2, #3
 800a868:	1ccb      	adds	r3, r1, #3
 800a86a:	4393      	bics	r3, r2
 800a86c:	3308      	adds	r3, #8
 800a86e:	0006      	movs	r6, r0
 800a870:	001f      	movs	r7, r3
 800a872:	2b0c      	cmp	r3, #12
 800a874:	d232      	bcs.n	800a8dc <_malloc_r+0x78>
 800a876:	270c      	movs	r7, #12
 800a878:	42b9      	cmp	r1, r7
 800a87a:	d831      	bhi.n	800a8e0 <_malloc_r+0x7c>
 800a87c:	0030      	movs	r0, r6
 800a87e:	f000 fe7d 	bl	800b57c <__malloc_lock>
 800a882:	4d32      	ldr	r5, [pc, #200]	; (800a94c <_malloc_r+0xe8>)
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	001c      	movs	r4, r3
 800a888:	2c00      	cmp	r4, #0
 800a88a:	d12e      	bne.n	800a8ea <_malloc_r+0x86>
 800a88c:	0039      	movs	r1, r7
 800a88e:	0030      	movs	r0, r6
 800a890:	f7ff ffc6 	bl	800a820 <sbrk_aligned>
 800a894:	0004      	movs	r4, r0
 800a896:	1c43      	adds	r3, r0, #1
 800a898:	d11e      	bne.n	800a8d8 <_malloc_r+0x74>
 800a89a:	682c      	ldr	r4, [r5, #0]
 800a89c:	0025      	movs	r5, r4
 800a89e:	2d00      	cmp	r5, #0
 800a8a0:	d14a      	bne.n	800a938 <_malloc_r+0xd4>
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	0029      	movs	r1, r5
 800a8a6:	18e3      	adds	r3, r4, r3
 800a8a8:	0030      	movs	r0, r6
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	f000 fb34 	bl	800af18 <_sbrk_r>
 800a8b0:	9b01      	ldr	r3, [sp, #4]
 800a8b2:	4283      	cmp	r3, r0
 800a8b4:	d143      	bne.n	800a93e <_malloc_r+0xda>
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	3703      	adds	r7, #3
 800a8ba:	1aff      	subs	r7, r7, r3
 800a8bc:	2303      	movs	r3, #3
 800a8be:	439f      	bics	r7, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	2f0c      	cmp	r7, #12
 800a8c4:	d200      	bcs.n	800a8c8 <_malloc_r+0x64>
 800a8c6:	270c      	movs	r7, #12
 800a8c8:	0039      	movs	r1, r7
 800a8ca:	0030      	movs	r0, r6
 800a8cc:	f7ff ffa8 	bl	800a820 <sbrk_aligned>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d034      	beq.n	800a93e <_malloc_r+0xda>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	19df      	adds	r7, r3, r7
 800a8d8:	6027      	str	r7, [r4, #0]
 800a8da:	e013      	b.n	800a904 <_malloc_r+0xa0>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dacb      	bge.n	800a878 <_malloc_r+0x14>
 800a8e0:	230c      	movs	r3, #12
 800a8e2:	2500      	movs	r5, #0
 800a8e4:	6033      	str	r3, [r6, #0]
 800a8e6:	0028      	movs	r0, r5
 800a8e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8ea:	6822      	ldr	r2, [r4, #0]
 800a8ec:	1bd1      	subs	r1, r2, r7
 800a8ee:	d420      	bmi.n	800a932 <_malloc_r+0xce>
 800a8f0:	290b      	cmp	r1, #11
 800a8f2:	d917      	bls.n	800a924 <_malloc_r+0xc0>
 800a8f4:	19e2      	adds	r2, r4, r7
 800a8f6:	6027      	str	r7, [r4, #0]
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d111      	bne.n	800a920 <_malloc_r+0xbc>
 800a8fc:	602a      	str	r2, [r5, #0]
 800a8fe:	6863      	ldr	r3, [r4, #4]
 800a900:	6011      	str	r1, [r2, #0]
 800a902:	6053      	str	r3, [r2, #4]
 800a904:	0030      	movs	r0, r6
 800a906:	0025      	movs	r5, r4
 800a908:	f000 fe40 	bl	800b58c <__malloc_unlock>
 800a90c:	2207      	movs	r2, #7
 800a90e:	350b      	adds	r5, #11
 800a910:	1d23      	adds	r3, r4, #4
 800a912:	4395      	bics	r5, r2
 800a914:	1aea      	subs	r2, r5, r3
 800a916:	429d      	cmp	r5, r3
 800a918:	d0e5      	beq.n	800a8e6 <_malloc_r+0x82>
 800a91a:	1b5b      	subs	r3, r3, r5
 800a91c:	50a3      	str	r3, [r4, r2]
 800a91e:	e7e2      	b.n	800a8e6 <_malloc_r+0x82>
 800a920:	605a      	str	r2, [r3, #4]
 800a922:	e7ec      	b.n	800a8fe <_malloc_r+0x9a>
 800a924:	6862      	ldr	r2, [r4, #4]
 800a926:	42a3      	cmp	r3, r4
 800a928:	d101      	bne.n	800a92e <_malloc_r+0xca>
 800a92a:	602a      	str	r2, [r5, #0]
 800a92c:	e7ea      	b.n	800a904 <_malloc_r+0xa0>
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	e7e8      	b.n	800a904 <_malloc_r+0xa0>
 800a932:	0023      	movs	r3, r4
 800a934:	6864      	ldr	r4, [r4, #4]
 800a936:	e7a7      	b.n	800a888 <_malloc_r+0x24>
 800a938:	002c      	movs	r4, r5
 800a93a:	686d      	ldr	r5, [r5, #4]
 800a93c:	e7af      	b.n	800a89e <_malloc_r+0x3a>
 800a93e:	230c      	movs	r3, #12
 800a940:	0030      	movs	r0, r6
 800a942:	6033      	str	r3, [r6, #0]
 800a944:	f000 fe22 	bl	800b58c <__malloc_unlock>
 800a948:	e7cd      	b.n	800a8e6 <_malloc_r+0x82>
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	200008c4 	.word	0x200008c4

0800a950 <__sfputc_r>:
 800a950:	6893      	ldr	r3, [r2, #8]
 800a952:	b510      	push	{r4, lr}
 800a954:	3b01      	subs	r3, #1
 800a956:	6093      	str	r3, [r2, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	da04      	bge.n	800a966 <__sfputc_r+0x16>
 800a95c:	6994      	ldr	r4, [r2, #24]
 800a95e:	42a3      	cmp	r3, r4
 800a960:	db07      	blt.n	800a972 <__sfputc_r+0x22>
 800a962:	290a      	cmp	r1, #10
 800a964:	d005      	beq.n	800a972 <__sfputc_r+0x22>
 800a966:	6813      	ldr	r3, [r2, #0]
 800a968:	1c58      	adds	r0, r3, #1
 800a96a:	6010      	str	r0, [r2, #0]
 800a96c:	7019      	strb	r1, [r3, #0]
 800a96e:	0008      	movs	r0, r1
 800a970:	bd10      	pop	{r4, pc}
 800a972:	f000 fae3 	bl	800af3c <__swbuf_r>
 800a976:	0001      	movs	r1, r0
 800a978:	e7f9      	b.n	800a96e <__sfputc_r+0x1e>

0800a97a <__sfputs_r>:
 800a97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97c:	0006      	movs	r6, r0
 800a97e:	000f      	movs	r7, r1
 800a980:	0014      	movs	r4, r2
 800a982:	18d5      	adds	r5, r2, r3
 800a984:	42ac      	cmp	r4, r5
 800a986:	d101      	bne.n	800a98c <__sfputs_r+0x12>
 800a988:	2000      	movs	r0, #0
 800a98a:	e007      	b.n	800a99c <__sfputs_r+0x22>
 800a98c:	7821      	ldrb	r1, [r4, #0]
 800a98e:	003a      	movs	r2, r7
 800a990:	0030      	movs	r0, r6
 800a992:	f7ff ffdd 	bl	800a950 <__sfputc_r>
 800a996:	3401      	adds	r4, #1
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d1f3      	bne.n	800a984 <__sfputs_r+0xa>
 800a99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9a0 <_vfiprintf_r>:
 800a9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a2:	b0a1      	sub	sp, #132	; 0x84
 800a9a4:	0006      	movs	r6, r0
 800a9a6:	000c      	movs	r4, r1
 800a9a8:	001f      	movs	r7, r3
 800a9aa:	9203      	str	r2, [sp, #12]
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d004      	beq.n	800a9ba <_vfiprintf_r+0x1a>
 800a9b0:	6983      	ldr	r3, [r0, #24]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <_vfiprintf_r+0x1a>
 800a9b6:	f000 fcc5 	bl	800b344 <__sinit>
 800a9ba:	4b8e      	ldr	r3, [pc, #568]	; (800abf4 <_vfiprintf_r+0x254>)
 800a9bc:	429c      	cmp	r4, r3
 800a9be:	d11c      	bne.n	800a9fa <_vfiprintf_r+0x5a>
 800a9c0:	6874      	ldr	r4, [r6, #4]
 800a9c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9c4:	07db      	lsls	r3, r3, #31
 800a9c6:	d405      	bmi.n	800a9d4 <_vfiprintf_r+0x34>
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	059b      	lsls	r3, r3, #22
 800a9cc:	d402      	bmi.n	800a9d4 <_vfiprintf_r+0x34>
 800a9ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9d0:	f000 fd59 	bl	800b486 <__retarget_lock_acquire_recursive>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	071b      	lsls	r3, r3, #28
 800a9d8:	d502      	bpl.n	800a9e0 <_vfiprintf_r+0x40>
 800a9da:	6923      	ldr	r3, [r4, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d11d      	bne.n	800aa1c <_vfiprintf_r+0x7c>
 800a9e0:	0021      	movs	r1, r4
 800a9e2:	0030      	movs	r0, r6
 800a9e4:	f000 fb00 	bl	800afe8 <__swsetup_r>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d017      	beq.n	800aa1c <_vfiprintf_r+0x7c>
 800a9ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d50d      	bpl.n	800aa0e <_vfiprintf_r+0x6e>
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	4240      	negs	r0, r0
 800a9f6:	b021      	add	sp, #132	; 0x84
 800a9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9fa:	4b7f      	ldr	r3, [pc, #508]	; (800abf8 <_vfiprintf_r+0x258>)
 800a9fc:	429c      	cmp	r4, r3
 800a9fe:	d101      	bne.n	800aa04 <_vfiprintf_r+0x64>
 800aa00:	68b4      	ldr	r4, [r6, #8]
 800aa02:	e7de      	b.n	800a9c2 <_vfiprintf_r+0x22>
 800aa04:	4b7d      	ldr	r3, [pc, #500]	; (800abfc <_vfiprintf_r+0x25c>)
 800aa06:	429c      	cmp	r4, r3
 800aa08:	d1db      	bne.n	800a9c2 <_vfiprintf_r+0x22>
 800aa0a:	68f4      	ldr	r4, [r6, #12]
 800aa0c:	e7d9      	b.n	800a9c2 <_vfiprintf_r+0x22>
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	059b      	lsls	r3, r3, #22
 800aa12:	d4ee      	bmi.n	800a9f2 <_vfiprintf_r+0x52>
 800aa14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa16:	f000 fd37 	bl	800b488 <__retarget_lock_release_recursive>
 800aa1a:	e7ea      	b.n	800a9f2 <_vfiprintf_r+0x52>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	ad08      	add	r5, sp, #32
 800aa20:	616b      	str	r3, [r5, #20]
 800aa22:	3320      	adds	r3, #32
 800aa24:	766b      	strb	r3, [r5, #25]
 800aa26:	3310      	adds	r3, #16
 800aa28:	76ab      	strb	r3, [r5, #26]
 800aa2a:	9707      	str	r7, [sp, #28]
 800aa2c:	9f03      	ldr	r7, [sp, #12]
 800aa2e:	783b      	ldrb	r3, [r7, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <_vfiprintf_r+0x98>
 800aa34:	2b25      	cmp	r3, #37	; 0x25
 800aa36:	d14e      	bne.n	800aad6 <_vfiprintf_r+0x136>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	1afb      	subs	r3, r7, r3
 800aa3c:	9305      	str	r3, [sp, #20]
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	429f      	cmp	r7, r3
 800aa42:	d00d      	beq.n	800aa60 <_vfiprintf_r+0xc0>
 800aa44:	9b05      	ldr	r3, [sp, #20]
 800aa46:	0021      	movs	r1, r4
 800aa48:	0030      	movs	r0, r6
 800aa4a:	9a03      	ldr	r2, [sp, #12]
 800aa4c:	f7ff ff95 	bl	800a97a <__sfputs_r>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d100      	bne.n	800aa56 <_vfiprintf_r+0xb6>
 800aa54:	e0b5      	b.n	800abc2 <_vfiprintf_r+0x222>
 800aa56:	696a      	ldr	r2, [r5, #20]
 800aa58:	9b05      	ldr	r3, [sp, #20]
 800aa5a:	4694      	mov	ip, r2
 800aa5c:	4463      	add	r3, ip
 800aa5e:	616b      	str	r3, [r5, #20]
 800aa60:	783b      	ldrb	r3, [r7, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d100      	bne.n	800aa68 <_vfiprintf_r+0xc8>
 800aa66:	e0ac      	b.n	800abc2 <_vfiprintf_r+0x222>
 800aa68:	2201      	movs	r2, #1
 800aa6a:	1c7b      	adds	r3, r7, #1
 800aa6c:	9303      	str	r3, [sp, #12]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	4252      	negs	r2, r2
 800aa72:	606a      	str	r2, [r5, #4]
 800aa74:	a904      	add	r1, sp, #16
 800aa76:	3254      	adds	r2, #84	; 0x54
 800aa78:	1852      	adds	r2, r2, r1
 800aa7a:	602b      	str	r3, [r5, #0]
 800aa7c:	60eb      	str	r3, [r5, #12]
 800aa7e:	60ab      	str	r3, [r5, #8]
 800aa80:	7013      	strb	r3, [r2, #0]
 800aa82:	65ab      	str	r3, [r5, #88]	; 0x58
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	2205      	movs	r2, #5
 800aa88:	7819      	ldrb	r1, [r3, #0]
 800aa8a:	485d      	ldr	r0, [pc, #372]	; (800ac00 <_vfiprintf_r+0x260>)
 800aa8c:	f000 fd6a 	bl	800b564 <memchr>
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	1c5f      	adds	r7, r3, #1
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d120      	bne.n	800aada <_vfiprintf_r+0x13a>
 800aa98:	682a      	ldr	r2, [r5, #0]
 800aa9a:	06d3      	lsls	r3, r2, #27
 800aa9c:	d504      	bpl.n	800aaa8 <_vfiprintf_r+0x108>
 800aa9e:	2353      	movs	r3, #83	; 0x53
 800aaa0:	a904      	add	r1, sp, #16
 800aaa2:	185b      	adds	r3, r3, r1
 800aaa4:	2120      	movs	r1, #32
 800aaa6:	7019      	strb	r1, [r3, #0]
 800aaa8:	0713      	lsls	r3, r2, #28
 800aaaa:	d504      	bpl.n	800aab6 <_vfiprintf_r+0x116>
 800aaac:	2353      	movs	r3, #83	; 0x53
 800aaae:	a904      	add	r1, sp, #16
 800aab0:	185b      	adds	r3, r3, r1
 800aab2:	212b      	movs	r1, #43	; 0x2b
 800aab4:	7019      	strb	r1, [r3, #0]
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	2b2a      	cmp	r3, #42	; 0x2a
 800aabc:	d016      	beq.n	800aaec <_vfiprintf_r+0x14c>
 800aabe:	2100      	movs	r1, #0
 800aac0:	68eb      	ldr	r3, [r5, #12]
 800aac2:	9f03      	ldr	r7, [sp, #12]
 800aac4:	783a      	ldrb	r2, [r7, #0]
 800aac6:	1c78      	adds	r0, r7, #1
 800aac8:	3a30      	subs	r2, #48	; 0x30
 800aaca:	4684      	mov	ip, r0
 800aacc:	2a09      	cmp	r2, #9
 800aace:	d94f      	bls.n	800ab70 <_vfiprintf_r+0x1d0>
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d111      	bne.n	800aaf8 <_vfiprintf_r+0x158>
 800aad4:	e017      	b.n	800ab06 <_vfiprintf_r+0x166>
 800aad6:	3701      	adds	r7, #1
 800aad8:	e7a9      	b.n	800aa2e <_vfiprintf_r+0x8e>
 800aada:	4b49      	ldr	r3, [pc, #292]	; (800ac00 <_vfiprintf_r+0x260>)
 800aadc:	682a      	ldr	r2, [r5, #0]
 800aade:	1ac0      	subs	r0, r0, r3
 800aae0:	2301      	movs	r3, #1
 800aae2:	4083      	lsls	r3, r0
 800aae4:	4313      	orrs	r3, r2
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	9703      	str	r7, [sp, #12]
 800aaea:	e7cb      	b.n	800aa84 <_vfiprintf_r+0xe4>
 800aaec:	9b07      	ldr	r3, [sp, #28]
 800aaee:	1d19      	adds	r1, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	9107      	str	r1, [sp, #28]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	db01      	blt.n	800aafc <_vfiprintf_r+0x15c>
 800aaf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800aafa:	e004      	b.n	800ab06 <_vfiprintf_r+0x166>
 800aafc:	425b      	negs	r3, r3
 800aafe:	60eb      	str	r3, [r5, #12]
 800ab00:	2302      	movs	r3, #2
 800ab02:	4313      	orrs	r3, r2
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	783b      	ldrb	r3, [r7, #0]
 800ab08:	2b2e      	cmp	r3, #46	; 0x2e
 800ab0a:	d10a      	bne.n	800ab22 <_vfiprintf_r+0x182>
 800ab0c:	787b      	ldrb	r3, [r7, #1]
 800ab0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab10:	d137      	bne.n	800ab82 <_vfiprintf_r+0x1e2>
 800ab12:	9b07      	ldr	r3, [sp, #28]
 800ab14:	3702      	adds	r7, #2
 800ab16:	1d1a      	adds	r2, r3, #4
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	9207      	str	r2, [sp, #28]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	db2d      	blt.n	800ab7c <_vfiprintf_r+0x1dc>
 800ab20:	9309      	str	r3, [sp, #36]	; 0x24
 800ab22:	2203      	movs	r2, #3
 800ab24:	7839      	ldrb	r1, [r7, #0]
 800ab26:	4837      	ldr	r0, [pc, #220]	; (800ac04 <_vfiprintf_r+0x264>)
 800ab28:	f000 fd1c 	bl	800b564 <memchr>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d007      	beq.n	800ab40 <_vfiprintf_r+0x1a0>
 800ab30:	4b34      	ldr	r3, [pc, #208]	; (800ac04 <_vfiprintf_r+0x264>)
 800ab32:	682a      	ldr	r2, [r5, #0]
 800ab34:	1ac0      	subs	r0, r0, r3
 800ab36:	2340      	movs	r3, #64	; 0x40
 800ab38:	4083      	lsls	r3, r0
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	3701      	adds	r7, #1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	7839      	ldrb	r1, [r7, #0]
 800ab42:	1c7b      	adds	r3, r7, #1
 800ab44:	2206      	movs	r2, #6
 800ab46:	4830      	ldr	r0, [pc, #192]	; (800ac08 <_vfiprintf_r+0x268>)
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	7629      	strb	r1, [r5, #24]
 800ab4c:	f000 fd0a 	bl	800b564 <memchr>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d045      	beq.n	800abe0 <_vfiprintf_r+0x240>
 800ab54:	4b2d      	ldr	r3, [pc, #180]	; (800ac0c <_vfiprintf_r+0x26c>)
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d127      	bne.n	800abaa <_vfiprintf_r+0x20a>
 800ab5a:	2207      	movs	r2, #7
 800ab5c:	9b07      	ldr	r3, [sp, #28]
 800ab5e:	3307      	adds	r3, #7
 800ab60:	4393      	bics	r3, r2
 800ab62:	3308      	adds	r3, #8
 800ab64:	9307      	str	r3, [sp, #28]
 800ab66:	696b      	ldr	r3, [r5, #20]
 800ab68:	9a04      	ldr	r2, [sp, #16]
 800ab6a:	189b      	adds	r3, r3, r2
 800ab6c:	616b      	str	r3, [r5, #20]
 800ab6e:	e75d      	b.n	800aa2c <_vfiprintf_r+0x8c>
 800ab70:	210a      	movs	r1, #10
 800ab72:	434b      	muls	r3, r1
 800ab74:	4667      	mov	r7, ip
 800ab76:	189b      	adds	r3, r3, r2
 800ab78:	3909      	subs	r1, #9
 800ab7a:	e7a3      	b.n	800aac4 <_vfiprintf_r+0x124>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	425b      	negs	r3, r3
 800ab80:	e7ce      	b.n	800ab20 <_vfiprintf_r+0x180>
 800ab82:	2300      	movs	r3, #0
 800ab84:	001a      	movs	r2, r3
 800ab86:	3701      	adds	r7, #1
 800ab88:	606b      	str	r3, [r5, #4]
 800ab8a:	7839      	ldrb	r1, [r7, #0]
 800ab8c:	1c78      	adds	r0, r7, #1
 800ab8e:	3930      	subs	r1, #48	; 0x30
 800ab90:	4684      	mov	ip, r0
 800ab92:	2909      	cmp	r1, #9
 800ab94:	d903      	bls.n	800ab9e <_vfiprintf_r+0x1fe>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0c3      	beq.n	800ab22 <_vfiprintf_r+0x182>
 800ab9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab9c:	e7c1      	b.n	800ab22 <_vfiprintf_r+0x182>
 800ab9e:	230a      	movs	r3, #10
 800aba0:	435a      	muls	r2, r3
 800aba2:	4667      	mov	r7, ip
 800aba4:	1852      	adds	r2, r2, r1
 800aba6:	3b09      	subs	r3, #9
 800aba8:	e7ef      	b.n	800ab8a <_vfiprintf_r+0x1ea>
 800abaa:	ab07      	add	r3, sp, #28
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	0022      	movs	r2, r4
 800abb0:	0029      	movs	r1, r5
 800abb2:	0030      	movs	r0, r6
 800abb4:	4b16      	ldr	r3, [pc, #88]	; (800ac10 <_vfiprintf_r+0x270>)
 800abb6:	e000      	b.n	800abba <_vfiprintf_r+0x21a>
 800abb8:	bf00      	nop
 800abba:	9004      	str	r0, [sp, #16]
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	3301      	adds	r3, #1
 800abc0:	d1d1      	bne.n	800ab66 <_vfiprintf_r+0x1c6>
 800abc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abc4:	07db      	lsls	r3, r3, #31
 800abc6:	d405      	bmi.n	800abd4 <_vfiprintf_r+0x234>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	059b      	lsls	r3, r3, #22
 800abcc:	d402      	bmi.n	800abd4 <_vfiprintf_r+0x234>
 800abce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abd0:	f000 fc5a 	bl	800b488 <__retarget_lock_release_recursive>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	065b      	lsls	r3, r3, #25
 800abd8:	d500      	bpl.n	800abdc <_vfiprintf_r+0x23c>
 800abda:	e70a      	b.n	800a9f2 <_vfiprintf_r+0x52>
 800abdc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800abde:	e70a      	b.n	800a9f6 <_vfiprintf_r+0x56>
 800abe0:	ab07      	add	r3, sp, #28
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	0022      	movs	r2, r4
 800abe6:	0029      	movs	r1, r5
 800abe8:	0030      	movs	r0, r6
 800abea:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <_vfiprintf_r+0x270>)
 800abec:	f000 f882 	bl	800acf4 <_printf_i>
 800abf0:	e7e3      	b.n	800abba <_vfiprintf_r+0x21a>
 800abf2:	46c0      	nop			; (mov r8, r8)
 800abf4:	0800bb98 	.word	0x0800bb98
 800abf8:	0800bbb8 	.word	0x0800bbb8
 800abfc:	0800bb78 	.word	0x0800bb78
 800ac00:	0800bb42 	.word	0x0800bb42
 800ac04:	0800bb48 	.word	0x0800bb48
 800ac08:	0800bb4c 	.word	0x0800bb4c
 800ac0c:	00000000 	.word	0x00000000
 800ac10:	0800a97b 	.word	0x0800a97b

0800ac14 <_printf_common>:
 800ac14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac16:	0015      	movs	r5, r2
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	688a      	ldr	r2, [r1, #8]
 800ac1c:	690b      	ldr	r3, [r1, #16]
 800ac1e:	000c      	movs	r4, r1
 800ac20:	9000      	str	r0, [sp, #0]
 800ac22:	4293      	cmp	r3, r2
 800ac24:	da00      	bge.n	800ac28 <_printf_common+0x14>
 800ac26:	0013      	movs	r3, r2
 800ac28:	0022      	movs	r2, r4
 800ac2a:	602b      	str	r3, [r5, #0]
 800ac2c:	3243      	adds	r2, #67	; 0x43
 800ac2e:	7812      	ldrb	r2, [r2, #0]
 800ac30:	2a00      	cmp	r2, #0
 800ac32:	d001      	beq.n	800ac38 <_printf_common+0x24>
 800ac34:	3301      	adds	r3, #1
 800ac36:	602b      	str	r3, [r5, #0]
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	069b      	lsls	r3, r3, #26
 800ac3c:	d502      	bpl.n	800ac44 <_printf_common+0x30>
 800ac3e:	682b      	ldr	r3, [r5, #0]
 800ac40:	3302      	adds	r3, #2
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	6822      	ldr	r2, [r4, #0]
 800ac46:	2306      	movs	r3, #6
 800ac48:	0017      	movs	r7, r2
 800ac4a:	401f      	ands	r7, r3
 800ac4c:	421a      	tst	r2, r3
 800ac4e:	d027      	beq.n	800aca0 <_printf_common+0x8c>
 800ac50:	0023      	movs	r3, r4
 800ac52:	3343      	adds	r3, #67	; 0x43
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	1e5a      	subs	r2, r3, #1
 800ac58:	4193      	sbcs	r3, r2
 800ac5a:	6822      	ldr	r2, [r4, #0]
 800ac5c:	0692      	lsls	r2, r2, #26
 800ac5e:	d430      	bmi.n	800acc2 <_printf_common+0xae>
 800ac60:	0022      	movs	r2, r4
 800ac62:	9901      	ldr	r1, [sp, #4]
 800ac64:	9800      	ldr	r0, [sp, #0]
 800ac66:	9e08      	ldr	r6, [sp, #32]
 800ac68:	3243      	adds	r2, #67	; 0x43
 800ac6a:	47b0      	blx	r6
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d025      	beq.n	800acbc <_printf_common+0xa8>
 800ac70:	2306      	movs	r3, #6
 800ac72:	6820      	ldr	r0, [r4, #0]
 800ac74:	682a      	ldr	r2, [r5, #0]
 800ac76:	68e1      	ldr	r1, [r4, #12]
 800ac78:	2500      	movs	r5, #0
 800ac7a:	4003      	ands	r3, r0
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	d103      	bne.n	800ac88 <_printf_common+0x74>
 800ac80:	1a8d      	subs	r5, r1, r2
 800ac82:	43eb      	mvns	r3, r5
 800ac84:	17db      	asrs	r3, r3, #31
 800ac86:	401d      	ands	r5, r3
 800ac88:	68a3      	ldr	r3, [r4, #8]
 800ac8a:	6922      	ldr	r2, [r4, #16]
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	dd01      	ble.n	800ac94 <_printf_common+0x80>
 800ac90:	1a9b      	subs	r3, r3, r2
 800ac92:	18ed      	adds	r5, r5, r3
 800ac94:	2700      	movs	r7, #0
 800ac96:	42bd      	cmp	r5, r7
 800ac98:	d120      	bne.n	800acdc <_printf_common+0xc8>
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	e010      	b.n	800acc0 <_printf_common+0xac>
 800ac9e:	3701      	adds	r7, #1
 800aca0:	68e3      	ldr	r3, [r4, #12]
 800aca2:	682a      	ldr	r2, [r5, #0]
 800aca4:	1a9b      	subs	r3, r3, r2
 800aca6:	42bb      	cmp	r3, r7
 800aca8:	ddd2      	ble.n	800ac50 <_printf_common+0x3c>
 800acaa:	0022      	movs	r2, r4
 800acac:	2301      	movs	r3, #1
 800acae:	9901      	ldr	r1, [sp, #4]
 800acb0:	9800      	ldr	r0, [sp, #0]
 800acb2:	9e08      	ldr	r6, [sp, #32]
 800acb4:	3219      	adds	r2, #25
 800acb6:	47b0      	blx	r6
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d1f0      	bne.n	800ac9e <_printf_common+0x8a>
 800acbc:	2001      	movs	r0, #1
 800acbe:	4240      	negs	r0, r0
 800acc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acc2:	2030      	movs	r0, #48	; 0x30
 800acc4:	18e1      	adds	r1, r4, r3
 800acc6:	3143      	adds	r1, #67	; 0x43
 800acc8:	7008      	strb	r0, [r1, #0]
 800acca:	0021      	movs	r1, r4
 800accc:	1c5a      	adds	r2, r3, #1
 800acce:	3145      	adds	r1, #69	; 0x45
 800acd0:	7809      	ldrb	r1, [r1, #0]
 800acd2:	18a2      	adds	r2, r4, r2
 800acd4:	3243      	adds	r2, #67	; 0x43
 800acd6:	3302      	adds	r3, #2
 800acd8:	7011      	strb	r1, [r2, #0]
 800acda:	e7c1      	b.n	800ac60 <_printf_common+0x4c>
 800acdc:	0022      	movs	r2, r4
 800acde:	2301      	movs	r3, #1
 800ace0:	9901      	ldr	r1, [sp, #4]
 800ace2:	9800      	ldr	r0, [sp, #0]
 800ace4:	9e08      	ldr	r6, [sp, #32]
 800ace6:	321a      	adds	r2, #26
 800ace8:	47b0      	blx	r6
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	d0e6      	beq.n	800acbc <_printf_common+0xa8>
 800acee:	3701      	adds	r7, #1
 800acf0:	e7d1      	b.n	800ac96 <_printf_common+0x82>
	...

0800acf4 <_printf_i>:
 800acf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acf6:	b08b      	sub	sp, #44	; 0x2c
 800acf8:	9206      	str	r2, [sp, #24]
 800acfa:	000a      	movs	r2, r1
 800acfc:	3243      	adds	r2, #67	; 0x43
 800acfe:	9307      	str	r3, [sp, #28]
 800ad00:	9005      	str	r0, [sp, #20]
 800ad02:	9204      	str	r2, [sp, #16]
 800ad04:	7e0a      	ldrb	r2, [r1, #24]
 800ad06:	000c      	movs	r4, r1
 800ad08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad0a:	2a78      	cmp	r2, #120	; 0x78
 800ad0c:	d807      	bhi.n	800ad1e <_printf_i+0x2a>
 800ad0e:	2a62      	cmp	r2, #98	; 0x62
 800ad10:	d809      	bhi.n	800ad26 <_printf_i+0x32>
 800ad12:	2a00      	cmp	r2, #0
 800ad14:	d100      	bne.n	800ad18 <_printf_i+0x24>
 800ad16:	e0c1      	b.n	800ae9c <_printf_i+0x1a8>
 800ad18:	2a58      	cmp	r2, #88	; 0x58
 800ad1a:	d100      	bne.n	800ad1e <_printf_i+0x2a>
 800ad1c:	e08c      	b.n	800ae38 <_printf_i+0x144>
 800ad1e:	0026      	movs	r6, r4
 800ad20:	3642      	adds	r6, #66	; 0x42
 800ad22:	7032      	strb	r2, [r6, #0]
 800ad24:	e022      	b.n	800ad6c <_printf_i+0x78>
 800ad26:	0010      	movs	r0, r2
 800ad28:	3863      	subs	r0, #99	; 0x63
 800ad2a:	2815      	cmp	r0, #21
 800ad2c:	d8f7      	bhi.n	800ad1e <_printf_i+0x2a>
 800ad2e:	f7f5 f9eb 	bl	8000108 <__gnu_thumb1_case_shi>
 800ad32:	0016      	.short	0x0016
 800ad34:	fff6001f 	.word	0xfff6001f
 800ad38:	fff6fff6 	.word	0xfff6fff6
 800ad3c:	001ffff6 	.word	0x001ffff6
 800ad40:	fff6fff6 	.word	0xfff6fff6
 800ad44:	fff6fff6 	.word	0xfff6fff6
 800ad48:	003600a8 	.word	0x003600a8
 800ad4c:	fff6009a 	.word	0xfff6009a
 800ad50:	00b9fff6 	.word	0x00b9fff6
 800ad54:	0036fff6 	.word	0x0036fff6
 800ad58:	fff6fff6 	.word	0xfff6fff6
 800ad5c:	009e      	.short	0x009e
 800ad5e:	0026      	movs	r6, r4
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	3642      	adds	r6, #66	; 0x42
 800ad64:	1d11      	adds	r1, r2, #4
 800ad66:	6019      	str	r1, [r3, #0]
 800ad68:	6813      	ldr	r3, [r2, #0]
 800ad6a:	7033      	strb	r3, [r6, #0]
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e0a7      	b.n	800aec0 <_printf_i+0x1cc>
 800ad70:	6808      	ldr	r0, [r1, #0]
 800ad72:	6819      	ldr	r1, [r3, #0]
 800ad74:	1d0a      	adds	r2, r1, #4
 800ad76:	0605      	lsls	r5, r0, #24
 800ad78:	d50b      	bpl.n	800ad92 <_printf_i+0x9e>
 800ad7a:	680d      	ldr	r5, [r1, #0]
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	2d00      	cmp	r5, #0
 800ad80:	da03      	bge.n	800ad8a <_printf_i+0x96>
 800ad82:	232d      	movs	r3, #45	; 0x2d
 800ad84:	9a04      	ldr	r2, [sp, #16]
 800ad86:	426d      	negs	r5, r5
 800ad88:	7013      	strb	r3, [r2, #0]
 800ad8a:	4b61      	ldr	r3, [pc, #388]	; (800af10 <_printf_i+0x21c>)
 800ad8c:	270a      	movs	r7, #10
 800ad8e:	9303      	str	r3, [sp, #12]
 800ad90:	e01b      	b.n	800adca <_printf_i+0xd6>
 800ad92:	680d      	ldr	r5, [r1, #0]
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	0641      	lsls	r1, r0, #25
 800ad98:	d5f1      	bpl.n	800ad7e <_printf_i+0x8a>
 800ad9a:	b22d      	sxth	r5, r5
 800ad9c:	e7ef      	b.n	800ad7e <_printf_i+0x8a>
 800ad9e:	680d      	ldr	r5, [r1, #0]
 800ada0:	6819      	ldr	r1, [r3, #0]
 800ada2:	1d08      	adds	r0, r1, #4
 800ada4:	6018      	str	r0, [r3, #0]
 800ada6:	062e      	lsls	r6, r5, #24
 800ada8:	d501      	bpl.n	800adae <_printf_i+0xba>
 800adaa:	680d      	ldr	r5, [r1, #0]
 800adac:	e003      	b.n	800adb6 <_printf_i+0xc2>
 800adae:	066d      	lsls	r5, r5, #25
 800adb0:	d5fb      	bpl.n	800adaa <_printf_i+0xb6>
 800adb2:	680d      	ldr	r5, [r1, #0]
 800adb4:	b2ad      	uxth	r5, r5
 800adb6:	4b56      	ldr	r3, [pc, #344]	; (800af10 <_printf_i+0x21c>)
 800adb8:	2708      	movs	r7, #8
 800adba:	9303      	str	r3, [sp, #12]
 800adbc:	2a6f      	cmp	r2, #111	; 0x6f
 800adbe:	d000      	beq.n	800adc2 <_printf_i+0xce>
 800adc0:	3702      	adds	r7, #2
 800adc2:	0023      	movs	r3, r4
 800adc4:	2200      	movs	r2, #0
 800adc6:	3343      	adds	r3, #67	; 0x43
 800adc8:	701a      	strb	r2, [r3, #0]
 800adca:	6863      	ldr	r3, [r4, #4]
 800adcc:	60a3      	str	r3, [r4, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	db03      	blt.n	800adda <_printf_i+0xe6>
 800add2:	2204      	movs	r2, #4
 800add4:	6821      	ldr	r1, [r4, #0]
 800add6:	4391      	bics	r1, r2
 800add8:	6021      	str	r1, [r4, #0]
 800adda:	2d00      	cmp	r5, #0
 800addc:	d102      	bne.n	800ade4 <_printf_i+0xf0>
 800adde:	9e04      	ldr	r6, [sp, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00c      	beq.n	800adfe <_printf_i+0x10a>
 800ade4:	9e04      	ldr	r6, [sp, #16]
 800ade6:	0028      	movs	r0, r5
 800ade8:	0039      	movs	r1, r7
 800adea:	f7f5 fa1d 	bl	8000228 <__aeabi_uidivmod>
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	3e01      	subs	r6, #1
 800adf2:	5c5b      	ldrb	r3, [r3, r1]
 800adf4:	7033      	strb	r3, [r6, #0]
 800adf6:	002b      	movs	r3, r5
 800adf8:	0005      	movs	r5, r0
 800adfa:	429f      	cmp	r7, r3
 800adfc:	d9f3      	bls.n	800ade6 <_printf_i+0xf2>
 800adfe:	2f08      	cmp	r7, #8
 800ae00:	d109      	bne.n	800ae16 <_printf_i+0x122>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	07db      	lsls	r3, r3, #31
 800ae06:	d506      	bpl.n	800ae16 <_printf_i+0x122>
 800ae08:	6863      	ldr	r3, [r4, #4]
 800ae0a:	6922      	ldr	r2, [r4, #16]
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	dc02      	bgt.n	800ae16 <_printf_i+0x122>
 800ae10:	2330      	movs	r3, #48	; 0x30
 800ae12:	3e01      	subs	r6, #1
 800ae14:	7033      	strb	r3, [r6, #0]
 800ae16:	9b04      	ldr	r3, [sp, #16]
 800ae18:	1b9b      	subs	r3, r3, r6
 800ae1a:	6123      	str	r3, [r4, #16]
 800ae1c:	9b07      	ldr	r3, [sp, #28]
 800ae1e:	0021      	movs	r1, r4
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	9805      	ldr	r0, [sp, #20]
 800ae24:	9b06      	ldr	r3, [sp, #24]
 800ae26:	aa09      	add	r2, sp, #36	; 0x24
 800ae28:	f7ff fef4 	bl	800ac14 <_printf_common>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d14c      	bne.n	800aeca <_printf_i+0x1d6>
 800ae30:	2001      	movs	r0, #1
 800ae32:	4240      	negs	r0, r0
 800ae34:	b00b      	add	sp, #44	; 0x2c
 800ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae38:	3145      	adds	r1, #69	; 0x45
 800ae3a:	700a      	strb	r2, [r1, #0]
 800ae3c:	4a34      	ldr	r2, [pc, #208]	; (800af10 <_printf_i+0x21c>)
 800ae3e:	9203      	str	r2, [sp, #12]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	6821      	ldr	r1, [r4, #0]
 800ae44:	ca20      	ldmia	r2!, {r5}
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	0608      	lsls	r0, r1, #24
 800ae4a:	d516      	bpl.n	800ae7a <_printf_i+0x186>
 800ae4c:	07cb      	lsls	r3, r1, #31
 800ae4e:	d502      	bpl.n	800ae56 <_printf_i+0x162>
 800ae50:	2320      	movs	r3, #32
 800ae52:	4319      	orrs	r1, r3
 800ae54:	6021      	str	r1, [r4, #0]
 800ae56:	2710      	movs	r7, #16
 800ae58:	2d00      	cmp	r5, #0
 800ae5a:	d1b2      	bne.n	800adc2 <_printf_i+0xce>
 800ae5c:	2320      	movs	r3, #32
 800ae5e:	6822      	ldr	r2, [r4, #0]
 800ae60:	439a      	bics	r2, r3
 800ae62:	6022      	str	r2, [r4, #0]
 800ae64:	e7ad      	b.n	800adc2 <_printf_i+0xce>
 800ae66:	2220      	movs	r2, #32
 800ae68:	6809      	ldr	r1, [r1, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	6022      	str	r2, [r4, #0]
 800ae6e:	0022      	movs	r2, r4
 800ae70:	2178      	movs	r1, #120	; 0x78
 800ae72:	3245      	adds	r2, #69	; 0x45
 800ae74:	7011      	strb	r1, [r2, #0]
 800ae76:	4a27      	ldr	r2, [pc, #156]	; (800af14 <_printf_i+0x220>)
 800ae78:	e7e1      	b.n	800ae3e <_printf_i+0x14a>
 800ae7a:	0648      	lsls	r0, r1, #25
 800ae7c:	d5e6      	bpl.n	800ae4c <_printf_i+0x158>
 800ae7e:	b2ad      	uxth	r5, r5
 800ae80:	e7e4      	b.n	800ae4c <_printf_i+0x158>
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	680d      	ldr	r5, [r1, #0]
 800ae86:	1d10      	adds	r0, r2, #4
 800ae88:	6949      	ldr	r1, [r1, #20]
 800ae8a:	6018      	str	r0, [r3, #0]
 800ae8c:	6813      	ldr	r3, [r2, #0]
 800ae8e:	062e      	lsls	r6, r5, #24
 800ae90:	d501      	bpl.n	800ae96 <_printf_i+0x1a2>
 800ae92:	6019      	str	r1, [r3, #0]
 800ae94:	e002      	b.n	800ae9c <_printf_i+0x1a8>
 800ae96:	066d      	lsls	r5, r5, #25
 800ae98:	d5fb      	bpl.n	800ae92 <_printf_i+0x19e>
 800ae9a:	8019      	strh	r1, [r3, #0]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9e04      	ldr	r6, [sp, #16]
 800aea0:	6123      	str	r3, [r4, #16]
 800aea2:	e7bb      	b.n	800ae1c <_printf_i+0x128>
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	1d11      	adds	r1, r2, #4
 800aea8:	6019      	str	r1, [r3, #0]
 800aeaa:	6816      	ldr	r6, [r2, #0]
 800aeac:	2100      	movs	r1, #0
 800aeae:	0030      	movs	r0, r6
 800aeb0:	6862      	ldr	r2, [r4, #4]
 800aeb2:	f000 fb57 	bl	800b564 <memchr>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d001      	beq.n	800aebe <_printf_i+0x1ca>
 800aeba:	1b80      	subs	r0, r0, r6
 800aebc:	6060      	str	r0, [r4, #4]
 800aebe:	6863      	ldr	r3, [r4, #4]
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9a04      	ldr	r2, [sp, #16]
 800aec6:	7013      	strb	r3, [r2, #0]
 800aec8:	e7a8      	b.n	800ae1c <_printf_i+0x128>
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	0032      	movs	r2, r6
 800aece:	9906      	ldr	r1, [sp, #24]
 800aed0:	9805      	ldr	r0, [sp, #20]
 800aed2:	9d07      	ldr	r5, [sp, #28]
 800aed4:	47a8      	blx	r5
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d0aa      	beq.n	800ae30 <_printf_i+0x13c>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	079b      	lsls	r3, r3, #30
 800aede:	d415      	bmi.n	800af0c <_printf_i+0x218>
 800aee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee2:	68e0      	ldr	r0, [r4, #12]
 800aee4:	4298      	cmp	r0, r3
 800aee6:	daa5      	bge.n	800ae34 <_printf_i+0x140>
 800aee8:	0018      	movs	r0, r3
 800aeea:	e7a3      	b.n	800ae34 <_printf_i+0x140>
 800aeec:	0022      	movs	r2, r4
 800aeee:	2301      	movs	r3, #1
 800aef0:	9906      	ldr	r1, [sp, #24]
 800aef2:	9805      	ldr	r0, [sp, #20]
 800aef4:	9e07      	ldr	r6, [sp, #28]
 800aef6:	3219      	adds	r2, #25
 800aef8:	47b0      	blx	r6
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	d098      	beq.n	800ae30 <_printf_i+0x13c>
 800aefe:	3501      	adds	r5, #1
 800af00:	68e3      	ldr	r3, [r4, #12]
 800af02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af04:	1a9b      	subs	r3, r3, r2
 800af06:	42ab      	cmp	r3, r5
 800af08:	dcf0      	bgt.n	800aeec <_printf_i+0x1f8>
 800af0a:	e7e9      	b.n	800aee0 <_printf_i+0x1ec>
 800af0c:	2500      	movs	r5, #0
 800af0e:	e7f7      	b.n	800af00 <_printf_i+0x20c>
 800af10:	0800bb53 	.word	0x0800bb53
 800af14:	0800bb64 	.word	0x0800bb64

0800af18 <_sbrk_r>:
 800af18:	2300      	movs	r3, #0
 800af1a:	b570      	push	{r4, r5, r6, lr}
 800af1c:	4d06      	ldr	r5, [pc, #24]	; (800af38 <_sbrk_r+0x20>)
 800af1e:	0004      	movs	r4, r0
 800af20:	0008      	movs	r0, r1
 800af22:	602b      	str	r3, [r5, #0]
 800af24:	f7f9 f842 	bl	8003fac <_sbrk>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d103      	bne.n	800af34 <_sbrk_r+0x1c>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d000      	beq.n	800af34 <_sbrk_r+0x1c>
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	200008d0 	.word	0x200008d0

0800af3c <__swbuf_r>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	0005      	movs	r5, r0
 800af40:	000e      	movs	r6, r1
 800af42:	0014      	movs	r4, r2
 800af44:	2800      	cmp	r0, #0
 800af46:	d004      	beq.n	800af52 <__swbuf_r+0x16>
 800af48:	6983      	ldr	r3, [r0, #24]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <__swbuf_r+0x16>
 800af4e:	f000 f9f9 	bl	800b344 <__sinit>
 800af52:	4b22      	ldr	r3, [pc, #136]	; (800afdc <__swbuf_r+0xa0>)
 800af54:	429c      	cmp	r4, r3
 800af56:	d12e      	bne.n	800afb6 <__swbuf_r+0x7a>
 800af58:	686c      	ldr	r4, [r5, #4]
 800af5a:	69a3      	ldr	r3, [r4, #24]
 800af5c:	60a3      	str	r3, [r4, #8]
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	071b      	lsls	r3, r3, #28
 800af62:	d532      	bpl.n	800afca <__swbuf_r+0x8e>
 800af64:	6923      	ldr	r3, [r4, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d02f      	beq.n	800afca <__swbuf_r+0x8e>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	6922      	ldr	r2, [r4, #16]
 800af6e:	b2f7      	uxtb	r7, r6
 800af70:	1a98      	subs	r0, r3, r2
 800af72:	6963      	ldr	r3, [r4, #20]
 800af74:	b2f6      	uxtb	r6, r6
 800af76:	4283      	cmp	r3, r0
 800af78:	dc05      	bgt.n	800af86 <__swbuf_r+0x4a>
 800af7a:	0021      	movs	r1, r4
 800af7c:	0028      	movs	r0, r5
 800af7e:	f000 f93f 	bl	800b200 <_fflush_r>
 800af82:	2800      	cmp	r0, #0
 800af84:	d127      	bne.n	800afd6 <__swbuf_r+0x9a>
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	3001      	adds	r0, #1
 800af8a:	3b01      	subs	r3, #1
 800af8c:	60a3      	str	r3, [r4, #8]
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	1c5a      	adds	r2, r3, #1
 800af92:	6022      	str	r2, [r4, #0]
 800af94:	701f      	strb	r7, [r3, #0]
 800af96:	6963      	ldr	r3, [r4, #20]
 800af98:	4283      	cmp	r3, r0
 800af9a:	d004      	beq.n	800afa6 <__swbuf_r+0x6a>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	07db      	lsls	r3, r3, #31
 800afa0:	d507      	bpl.n	800afb2 <__swbuf_r+0x76>
 800afa2:	2e0a      	cmp	r6, #10
 800afa4:	d105      	bne.n	800afb2 <__swbuf_r+0x76>
 800afa6:	0021      	movs	r1, r4
 800afa8:	0028      	movs	r0, r5
 800afaa:	f000 f929 	bl	800b200 <_fflush_r>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d111      	bne.n	800afd6 <__swbuf_r+0x9a>
 800afb2:	0030      	movs	r0, r6
 800afb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb6:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <__swbuf_r+0xa4>)
 800afb8:	429c      	cmp	r4, r3
 800afba:	d101      	bne.n	800afc0 <__swbuf_r+0x84>
 800afbc:	68ac      	ldr	r4, [r5, #8]
 800afbe:	e7cc      	b.n	800af5a <__swbuf_r+0x1e>
 800afc0:	4b08      	ldr	r3, [pc, #32]	; (800afe4 <__swbuf_r+0xa8>)
 800afc2:	429c      	cmp	r4, r3
 800afc4:	d1c9      	bne.n	800af5a <__swbuf_r+0x1e>
 800afc6:	68ec      	ldr	r4, [r5, #12]
 800afc8:	e7c7      	b.n	800af5a <__swbuf_r+0x1e>
 800afca:	0021      	movs	r1, r4
 800afcc:	0028      	movs	r0, r5
 800afce:	f000 f80b 	bl	800afe8 <__swsetup_r>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d0c9      	beq.n	800af6a <__swbuf_r+0x2e>
 800afd6:	2601      	movs	r6, #1
 800afd8:	4276      	negs	r6, r6
 800afda:	e7ea      	b.n	800afb2 <__swbuf_r+0x76>
 800afdc:	0800bb98 	.word	0x0800bb98
 800afe0:	0800bbb8 	.word	0x0800bbb8
 800afe4:	0800bb78 	.word	0x0800bb78

0800afe8 <__swsetup_r>:
 800afe8:	4b37      	ldr	r3, [pc, #220]	; (800b0c8 <__swsetup_r+0xe0>)
 800afea:	b570      	push	{r4, r5, r6, lr}
 800afec:	681d      	ldr	r5, [r3, #0]
 800afee:	0006      	movs	r6, r0
 800aff0:	000c      	movs	r4, r1
 800aff2:	2d00      	cmp	r5, #0
 800aff4:	d005      	beq.n	800b002 <__swsetup_r+0x1a>
 800aff6:	69ab      	ldr	r3, [r5, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <__swsetup_r+0x1a>
 800affc:	0028      	movs	r0, r5
 800affe:	f000 f9a1 	bl	800b344 <__sinit>
 800b002:	4b32      	ldr	r3, [pc, #200]	; (800b0cc <__swsetup_r+0xe4>)
 800b004:	429c      	cmp	r4, r3
 800b006:	d10f      	bne.n	800b028 <__swsetup_r+0x40>
 800b008:	686c      	ldr	r4, [r5, #4]
 800b00a:	230c      	movs	r3, #12
 800b00c:	5ee2      	ldrsh	r2, [r4, r3]
 800b00e:	b293      	uxth	r3, r2
 800b010:	0711      	lsls	r1, r2, #28
 800b012:	d42d      	bmi.n	800b070 <__swsetup_r+0x88>
 800b014:	06d9      	lsls	r1, r3, #27
 800b016:	d411      	bmi.n	800b03c <__swsetup_r+0x54>
 800b018:	2309      	movs	r3, #9
 800b01a:	2001      	movs	r0, #1
 800b01c:	6033      	str	r3, [r6, #0]
 800b01e:	3337      	adds	r3, #55	; 0x37
 800b020:	4313      	orrs	r3, r2
 800b022:	81a3      	strh	r3, [r4, #12]
 800b024:	4240      	negs	r0, r0
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	4b29      	ldr	r3, [pc, #164]	; (800b0d0 <__swsetup_r+0xe8>)
 800b02a:	429c      	cmp	r4, r3
 800b02c:	d101      	bne.n	800b032 <__swsetup_r+0x4a>
 800b02e:	68ac      	ldr	r4, [r5, #8]
 800b030:	e7eb      	b.n	800b00a <__swsetup_r+0x22>
 800b032:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <__swsetup_r+0xec>)
 800b034:	429c      	cmp	r4, r3
 800b036:	d1e8      	bne.n	800b00a <__swsetup_r+0x22>
 800b038:	68ec      	ldr	r4, [r5, #12]
 800b03a:	e7e6      	b.n	800b00a <__swsetup_r+0x22>
 800b03c:	075b      	lsls	r3, r3, #29
 800b03e:	d513      	bpl.n	800b068 <__swsetup_r+0x80>
 800b040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b042:	2900      	cmp	r1, #0
 800b044:	d008      	beq.n	800b058 <__swsetup_r+0x70>
 800b046:	0023      	movs	r3, r4
 800b048:	3344      	adds	r3, #68	; 0x44
 800b04a:	4299      	cmp	r1, r3
 800b04c:	d002      	beq.n	800b054 <__swsetup_r+0x6c>
 800b04e:	0030      	movs	r0, r6
 800b050:	f7ff fb9c 	bl	800a78c <_free_r>
 800b054:	2300      	movs	r3, #0
 800b056:	6363      	str	r3, [r4, #52]	; 0x34
 800b058:	2224      	movs	r2, #36	; 0x24
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	4393      	bics	r3, r2
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	2300      	movs	r3, #0
 800b062:	6063      	str	r3, [r4, #4]
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	2308      	movs	r3, #8
 800b06a:	89a2      	ldrh	r2, [r4, #12]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10b      	bne.n	800b08e <__swsetup_r+0xa6>
 800b076:	21a0      	movs	r1, #160	; 0xa0
 800b078:	2280      	movs	r2, #128	; 0x80
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	0089      	lsls	r1, r1, #2
 800b07e:	0092      	lsls	r2, r2, #2
 800b080:	400b      	ands	r3, r1
 800b082:	4293      	cmp	r3, r2
 800b084:	d003      	beq.n	800b08e <__swsetup_r+0xa6>
 800b086:	0021      	movs	r1, r4
 800b088:	0030      	movs	r0, r6
 800b08a:	f000 fa27 	bl	800b4dc <__smakebuf_r>
 800b08e:	220c      	movs	r2, #12
 800b090:	5ea3      	ldrsh	r3, [r4, r2]
 800b092:	2001      	movs	r0, #1
 800b094:	001a      	movs	r2, r3
 800b096:	b299      	uxth	r1, r3
 800b098:	4002      	ands	r2, r0
 800b09a:	4203      	tst	r3, r0
 800b09c:	d00f      	beq.n	800b0be <__swsetup_r+0xd6>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	60a2      	str	r2, [r4, #8]
 800b0a2:	6962      	ldr	r2, [r4, #20]
 800b0a4:	4252      	negs	r2, r2
 800b0a6:	61a2      	str	r2, [r4, #24]
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	6922      	ldr	r2, [r4, #16]
 800b0ac:	4282      	cmp	r2, r0
 800b0ae:	d1ba      	bne.n	800b026 <__swsetup_r+0x3e>
 800b0b0:	060a      	lsls	r2, r1, #24
 800b0b2:	d5b8      	bpl.n	800b026 <__swsetup_r+0x3e>
 800b0b4:	2240      	movs	r2, #64	; 0x40
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	3801      	subs	r0, #1
 800b0bc:	e7b3      	b.n	800b026 <__swsetup_r+0x3e>
 800b0be:	0788      	lsls	r0, r1, #30
 800b0c0:	d400      	bmi.n	800b0c4 <__swsetup_r+0xdc>
 800b0c2:	6962      	ldr	r2, [r4, #20]
 800b0c4:	60a2      	str	r2, [r4, #8]
 800b0c6:	e7ef      	b.n	800b0a8 <__swsetup_r+0xc0>
 800b0c8:	20000024 	.word	0x20000024
 800b0cc:	0800bb98 	.word	0x0800bb98
 800b0d0:	0800bbb8 	.word	0x0800bbb8
 800b0d4:	0800bb78 	.word	0x0800bb78

0800b0d8 <abort>:
 800b0d8:	2006      	movs	r0, #6
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	f000 fa88 	bl	800b5f0 <raise>
 800b0e0:	2001      	movs	r0, #1
 800b0e2:	f7f8 fef1 	bl	8003ec8 <_exit>
	...

0800b0e8 <__sflush_r>:
 800b0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ea:	898b      	ldrh	r3, [r1, #12]
 800b0ec:	0005      	movs	r5, r0
 800b0ee:	000c      	movs	r4, r1
 800b0f0:	071a      	lsls	r2, r3, #28
 800b0f2:	d45f      	bmi.n	800b1b4 <__sflush_r+0xcc>
 800b0f4:	684a      	ldr	r2, [r1, #4]
 800b0f6:	2a00      	cmp	r2, #0
 800b0f8:	dc04      	bgt.n	800b104 <__sflush_r+0x1c>
 800b0fa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	dc01      	bgt.n	800b104 <__sflush_r+0x1c>
 800b100:	2000      	movs	r0, #0
 800b102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b104:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b106:	2f00      	cmp	r7, #0
 800b108:	d0fa      	beq.n	800b100 <__sflush_r+0x18>
 800b10a:	2200      	movs	r2, #0
 800b10c:	2180      	movs	r1, #128	; 0x80
 800b10e:	682e      	ldr	r6, [r5, #0]
 800b110:	602a      	str	r2, [r5, #0]
 800b112:	001a      	movs	r2, r3
 800b114:	0149      	lsls	r1, r1, #5
 800b116:	400a      	ands	r2, r1
 800b118:	420b      	tst	r3, r1
 800b11a:	d034      	beq.n	800b186 <__sflush_r+0x9e>
 800b11c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	075b      	lsls	r3, r3, #29
 800b122:	d506      	bpl.n	800b132 <__sflush_r+0x4a>
 800b124:	6863      	ldr	r3, [r4, #4]
 800b126:	1ac0      	subs	r0, r0, r3
 800b128:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <__sflush_r+0x4a>
 800b12e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b130:	1ac0      	subs	r0, r0, r3
 800b132:	0002      	movs	r2, r0
 800b134:	6a21      	ldr	r1, [r4, #32]
 800b136:	2300      	movs	r3, #0
 800b138:	0028      	movs	r0, r5
 800b13a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b13c:	47b8      	blx	r7
 800b13e:	89a1      	ldrh	r1, [r4, #12]
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d106      	bne.n	800b152 <__sflush_r+0x6a>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	2b1d      	cmp	r3, #29
 800b148:	d831      	bhi.n	800b1ae <__sflush_r+0xc6>
 800b14a:	4a2c      	ldr	r2, [pc, #176]	; (800b1fc <__sflush_r+0x114>)
 800b14c:	40da      	lsrs	r2, r3
 800b14e:	07d3      	lsls	r3, r2, #31
 800b150:	d52d      	bpl.n	800b1ae <__sflush_r+0xc6>
 800b152:	2300      	movs	r3, #0
 800b154:	6063      	str	r3, [r4, #4]
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	04cb      	lsls	r3, r1, #19
 800b15c:	d505      	bpl.n	800b16a <__sflush_r+0x82>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	d102      	bne.n	800b168 <__sflush_r+0x80>
 800b162:	682b      	ldr	r3, [r5, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d100      	bne.n	800b16a <__sflush_r+0x82>
 800b168:	6560      	str	r0, [r4, #84]	; 0x54
 800b16a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b16c:	602e      	str	r6, [r5, #0]
 800b16e:	2900      	cmp	r1, #0
 800b170:	d0c6      	beq.n	800b100 <__sflush_r+0x18>
 800b172:	0023      	movs	r3, r4
 800b174:	3344      	adds	r3, #68	; 0x44
 800b176:	4299      	cmp	r1, r3
 800b178:	d002      	beq.n	800b180 <__sflush_r+0x98>
 800b17a:	0028      	movs	r0, r5
 800b17c:	f7ff fb06 	bl	800a78c <_free_r>
 800b180:	2000      	movs	r0, #0
 800b182:	6360      	str	r0, [r4, #52]	; 0x34
 800b184:	e7bd      	b.n	800b102 <__sflush_r+0x1a>
 800b186:	2301      	movs	r3, #1
 800b188:	0028      	movs	r0, r5
 800b18a:	6a21      	ldr	r1, [r4, #32]
 800b18c:	47b8      	blx	r7
 800b18e:	1c43      	adds	r3, r0, #1
 800b190:	d1c5      	bne.n	800b11e <__sflush_r+0x36>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0c2      	beq.n	800b11e <__sflush_r+0x36>
 800b198:	2b1d      	cmp	r3, #29
 800b19a:	d001      	beq.n	800b1a0 <__sflush_r+0xb8>
 800b19c:	2b16      	cmp	r3, #22
 800b19e:	d101      	bne.n	800b1a4 <__sflush_r+0xbc>
 800b1a0:	602e      	str	r6, [r5, #0]
 800b1a2:	e7ad      	b.n	800b100 <__sflush_r+0x18>
 800b1a4:	2340      	movs	r3, #64	; 0x40
 800b1a6:	89a2      	ldrh	r2, [r4, #12]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	81a3      	strh	r3, [r4, #12]
 800b1ac:	e7a9      	b.n	800b102 <__sflush_r+0x1a>
 800b1ae:	2340      	movs	r3, #64	; 0x40
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	e7fa      	b.n	800b1aa <__sflush_r+0xc2>
 800b1b4:	690f      	ldr	r7, [r1, #16]
 800b1b6:	2f00      	cmp	r7, #0
 800b1b8:	d0a2      	beq.n	800b100 <__sflush_r+0x18>
 800b1ba:	680a      	ldr	r2, [r1, #0]
 800b1bc:	600f      	str	r7, [r1, #0]
 800b1be:	1bd2      	subs	r2, r2, r7
 800b1c0:	9201      	str	r2, [sp, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	079b      	lsls	r3, r3, #30
 800b1c6:	d100      	bne.n	800b1ca <__sflush_r+0xe2>
 800b1c8:	694a      	ldr	r2, [r1, #20]
 800b1ca:	60a2      	str	r2, [r4, #8]
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	dc00      	bgt.n	800b1d4 <__sflush_r+0xec>
 800b1d2:	e795      	b.n	800b100 <__sflush_r+0x18>
 800b1d4:	003a      	movs	r2, r7
 800b1d6:	0028      	movs	r0, r5
 800b1d8:	9b01      	ldr	r3, [sp, #4]
 800b1da:	6a21      	ldr	r1, [r4, #32]
 800b1dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1de:	47b0      	blx	r6
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	dc06      	bgt.n	800b1f2 <__sflush_r+0x10a>
 800b1e4:	2340      	movs	r3, #64	; 0x40
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	89a2      	ldrh	r2, [r4, #12]
 800b1ea:	4240      	negs	r0, r0
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	e787      	b.n	800b102 <__sflush_r+0x1a>
 800b1f2:	9b01      	ldr	r3, [sp, #4]
 800b1f4:	183f      	adds	r7, r7, r0
 800b1f6:	1a1b      	subs	r3, r3, r0
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	e7e7      	b.n	800b1cc <__sflush_r+0xe4>
 800b1fc:	20400001 	.word	0x20400001

0800b200 <_fflush_r>:
 800b200:	690b      	ldr	r3, [r1, #16]
 800b202:	b570      	push	{r4, r5, r6, lr}
 800b204:	0005      	movs	r5, r0
 800b206:	000c      	movs	r4, r1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <_fflush_r+0x12>
 800b20c:	2500      	movs	r5, #0
 800b20e:	0028      	movs	r0, r5
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	2800      	cmp	r0, #0
 800b214:	d004      	beq.n	800b220 <_fflush_r+0x20>
 800b216:	6983      	ldr	r3, [r0, #24]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <_fflush_r+0x20>
 800b21c:	f000 f892 	bl	800b344 <__sinit>
 800b220:	4b14      	ldr	r3, [pc, #80]	; (800b274 <_fflush_r+0x74>)
 800b222:	429c      	cmp	r4, r3
 800b224:	d11b      	bne.n	800b25e <_fflush_r+0x5e>
 800b226:	686c      	ldr	r4, [r5, #4]
 800b228:	220c      	movs	r2, #12
 800b22a:	5ea3      	ldrsh	r3, [r4, r2]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0ed      	beq.n	800b20c <_fflush_r+0xc>
 800b230:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b232:	07d2      	lsls	r2, r2, #31
 800b234:	d404      	bmi.n	800b240 <_fflush_r+0x40>
 800b236:	059b      	lsls	r3, r3, #22
 800b238:	d402      	bmi.n	800b240 <_fflush_r+0x40>
 800b23a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b23c:	f000 f923 	bl	800b486 <__retarget_lock_acquire_recursive>
 800b240:	0028      	movs	r0, r5
 800b242:	0021      	movs	r1, r4
 800b244:	f7ff ff50 	bl	800b0e8 <__sflush_r>
 800b248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b24a:	0005      	movs	r5, r0
 800b24c:	07db      	lsls	r3, r3, #31
 800b24e:	d4de      	bmi.n	800b20e <_fflush_r+0xe>
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	059b      	lsls	r3, r3, #22
 800b254:	d4db      	bmi.n	800b20e <_fflush_r+0xe>
 800b256:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b258:	f000 f916 	bl	800b488 <__retarget_lock_release_recursive>
 800b25c:	e7d7      	b.n	800b20e <_fflush_r+0xe>
 800b25e:	4b06      	ldr	r3, [pc, #24]	; (800b278 <_fflush_r+0x78>)
 800b260:	429c      	cmp	r4, r3
 800b262:	d101      	bne.n	800b268 <_fflush_r+0x68>
 800b264:	68ac      	ldr	r4, [r5, #8]
 800b266:	e7df      	b.n	800b228 <_fflush_r+0x28>
 800b268:	4b04      	ldr	r3, [pc, #16]	; (800b27c <_fflush_r+0x7c>)
 800b26a:	429c      	cmp	r4, r3
 800b26c:	d1dc      	bne.n	800b228 <_fflush_r+0x28>
 800b26e:	68ec      	ldr	r4, [r5, #12]
 800b270:	e7da      	b.n	800b228 <_fflush_r+0x28>
 800b272:	46c0      	nop			; (mov r8, r8)
 800b274:	0800bb98 	.word	0x0800bb98
 800b278:	0800bbb8 	.word	0x0800bbb8
 800b27c:	0800bb78 	.word	0x0800bb78

0800b280 <std>:
 800b280:	2300      	movs	r3, #0
 800b282:	b510      	push	{r4, lr}
 800b284:	0004      	movs	r4, r0
 800b286:	6003      	str	r3, [r0, #0]
 800b288:	6043      	str	r3, [r0, #4]
 800b28a:	6083      	str	r3, [r0, #8]
 800b28c:	8181      	strh	r1, [r0, #12]
 800b28e:	6643      	str	r3, [r0, #100]	; 0x64
 800b290:	0019      	movs	r1, r3
 800b292:	81c2      	strh	r2, [r0, #14]
 800b294:	6103      	str	r3, [r0, #16]
 800b296:	6143      	str	r3, [r0, #20]
 800b298:	6183      	str	r3, [r0, #24]
 800b29a:	2208      	movs	r2, #8
 800b29c:	305c      	adds	r0, #92	; 0x5c
 800b29e:	f7ff f9c6 	bl	800a62e <memset>
 800b2a2:	4b05      	ldr	r3, [pc, #20]	; (800b2b8 <std+0x38>)
 800b2a4:	6224      	str	r4, [r4, #32]
 800b2a6:	6263      	str	r3, [r4, #36]	; 0x24
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <std+0x3c>)
 800b2aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2ac:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <std+0x40>)
 800b2ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2b0:	4b04      	ldr	r3, [pc, #16]	; (800b2c4 <std+0x44>)
 800b2b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b2b4:	bd10      	pop	{r4, pc}
 800b2b6:	46c0      	nop			; (mov r8, r8)
 800b2b8:	0800b631 	.word	0x0800b631
 800b2bc:	0800b659 	.word	0x0800b659
 800b2c0:	0800b691 	.word	0x0800b691
 800b2c4:	0800b6bd 	.word	0x0800b6bd

0800b2c8 <_cleanup_r>:
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	4902      	ldr	r1, [pc, #8]	; (800b2d4 <_cleanup_r+0xc>)
 800b2cc:	f000 f8ba 	bl	800b444 <_fwalk_reent>
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	46c0      	nop			; (mov r8, r8)
 800b2d4:	0800b201 	.word	0x0800b201

0800b2d8 <__sfmoreglue>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	2568      	movs	r5, #104	; 0x68
 800b2dc:	1e4a      	subs	r2, r1, #1
 800b2de:	4355      	muls	r5, r2
 800b2e0:	000e      	movs	r6, r1
 800b2e2:	0029      	movs	r1, r5
 800b2e4:	3174      	adds	r1, #116	; 0x74
 800b2e6:	f7ff fabd 	bl	800a864 <_malloc_r>
 800b2ea:	1e04      	subs	r4, r0, #0
 800b2ec:	d008      	beq.n	800b300 <__sfmoreglue+0x28>
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	002a      	movs	r2, r5
 800b2f2:	6001      	str	r1, [r0, #0]
 800b2f4:	6046      	str	r6, [r0, #4]
 800b2f6:	300c      	adds	r0, #12
 800b2f8:	60a0      	str	r0, [r4, #8]
 800b2fa:	3268      	adds	r2, #104	; 0x68
 800b2fc:	f7ff f997 	bl	800a62e <memset>
 800b300:	0020      	movs	r0, r4
 800b302:	bd70      	pop	{r4, r5, r6, pc}

0800b304 <__sfp_lock_acquire>:
 800b304:	b510      	push	{r4, lr}
 800b306:	4802      	ldr	r0, [pc, #8]	; (800b310 <__sfp_lock_acquire+0xc>)
 800b308:	f000 f8bd 	bl	800b486 <__retarget_lock_acquire_recursive>
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	46c0      	nop			; (mov r8, r8)
 800b310:	200008cd 	.word	0x200008cd

0800b314 <__sfp_lock_release>:
 800b314:	b510      	push	{r4, lr}
 800b316:	4802      	ldr	r0, [pc, #8]	; (800b320 <__sfp_lock_release+0xc>)
 800b318:	f000 f8b6 	bl	800b488 <__retarget_lock_release_recursive>
 800b31c:	bd10      	pop	{r4, pc}
 800b31e:	46c0      	nop			; (mov r8, r8)
 800b320:	200008cd 	.word	0x200008cd

0800b324 <__sinit_lock_acquire>:
 800b324:	b510      	push	{r4, lr}
 800b326:	4802      	ldr	r0, [pc, #8]	; (800b330 <__sinit_lock_acquire+0xc>)
 800b328:	f000 f8ad 	bl	800b486 <__retarget_lock_acquire_recursive>
 800b32c:	bd10      	pop	{r4, pc}
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	200008ce 	.word	0x200008ce

0800b334 <__sinit_lock_release>:
 800b334:	b510      	push	{r4, lr}
 800b336:	4802      	ldr	r0, [pc, #8]	; (800b340 <__sinit_lock_release+0xc>)
 800b338:	f000 f8a6 	bl	800b488 <__retarget_lock_release_recursive>
 800b33c:	bd10      	pop	{r4, pc}
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	200008ce 	.word	0x200008ce

0800b344 <__sinit>:
 800b344:	b513      	push	{r0, r1, r4, lr}
 800b346:	0004      	movs	r4, r0
 800b348:	f7ff ffec 	bl	800b324 <__sinit_lock_acquire>
 800b34c:	69a3      	ldr	r3, [r4, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <__sinit+0x14>
 800b352:	f7ff ffef 	bl	800b334 <__sinit_lock_release>
 800b356:	bd13      	pop	{r0, r1, r4, pc}
 800b358:	64a3      	str	r3, [r4, #72]	; 0x48
 800b35a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b35c:	6523      	str	r3, [r4, #80]	; 0x50
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <__sinit+0x68>)
 800b360:	4a13      	ldr	r2, [pc, #76]	; (800b3b0 <__sinit+0x6c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	62a2      	str	r2, [r4, #40]	; 0x28
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	42a3      	cmp	r3, r4
 800b36a:	d101      	bne.n	800b370 <__sinit+0x2c>
 800b36c:	2301      	movs	r3, #1
 800b36e:	61a3      	str	r3, [r4, #24]
 800b370:	0020      	movs	r0, r4
 800b372:	f000 f81f 	bl	800b3b4 <__sfp>
 800b376:	6060      	str	r0, [r4, #4]
 800b378:	0020      	movs	r0, r4
 800b37a:	f000 f81b 	bl	800b3b4 <__sfp>
 800b37e:	60a0      	str	r0, [r4, #8]
 800b380:	0020      	movs	r0, r4
 800b382:	f000 f817 	bl	800b3b4 <__sfp>
 800b386:	2200      	movs	r2, #0
 800b388:	2104      	movs	r1, #4
 800b38a:	60e0      	str	r0, [r4, #12]
 800b38c:	6860      	ldr	r0, [r4, #4]
 800b38e:	f7ff ff77 	bl	800b280 <std>
 800b392:	2201      	movs	r2, #1
 800b394:	2109      	movs	r1, #9
 800b396:	68a0      	ldr	r0, [r4, #8]
 800b398:	f7ff ff72 	bl	800b280 <std>
 800b39c:	2202      	movs	r2, #2
 800b39e:	2112      	movs	r1, #18
 800b3a0:	68e0      	ldr	r0, [r4, #12]
 800b3a2:	f7ff ff6d 	bl	800b280 <std>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	61a3      	str	r3, [r4, #24]
 800b3aa:	e7d2      	b.n	800b352 <__sinit+0xe>
 800b3ac:	0800ba90 	.word	0x0800ba90
 800b3b0:	0800b2c9 	.word	0x0800b2c9

0800b3b4 <__sfp>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	0007      	movs	r7, r0
 800b3b8:	f7ff ffa4 	bl	800b304 <__sfp_lock_acquire>
 800b3bc:	4b1f      	ldr	r3, [pc, #124]	; (800b43c <__sfp+0x88>)
 800b3be:	681e      	ldr	r6, [r3, #0]
 800b3c0:	69b3      	ldr	r3, [r6, #24]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d102      	bne.n	800b3cc <__sfp+0x18>
 800b3c6:	0030      	movs	r0, r6
 800b3c8:	f7ff ffbc 	bl	800b344 <__sinit>
 800b3cc:	3648      	adds	r6, #72	; 0x48
 800b3ce:	68b4      	ldr	r4, [r6, #8]
 800b3d0:	6873      	ldr	r3, [r6, #4]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	d504      	bpl.n	800b3e0 <__sfp+0x2c>
 800b3d6:	6833      	ldr	r3, [r6, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d022      	beq.n	800b422 <__sfp+0x6e>
 800b3dc:	6836      	ldr	r6, [r6, #0]
 800b3de:	e7f6      	b.n	800b3ce <__sfp+0x1a>
 800b3e0:	220c      	movs	r2, #12
 800b3e2:	5ea5      	ldrsh	r5, [r4, r2]
 800b3e4:	2d00      	cmp	r5, #0
 800b3e6:	d11a      	bne.n	800b41e <__sfp+0x6a>
 800b3e8:	0020      	movs	r0, r4
 800b3ea:	4b15      	ldr	r3, [pc, #84]	; (800b440 <__sfp+0x8c>)
 800b3ec:	3058      	adds	r0, #88	; 0x58
 800b3ee:	60e3      	str	r3, [r4, #12]
 800b3f0:	6665      	str	r5, [r4, #100]	; 0x64
 800b3f2:	f000 f847 	bl	800b484 <__retarget_lock_init_recursive>
 800b3f6:	f7ff ff8d 	bl	800b314 <__sfp_lock_release>
 800b3fa:	0020      	movs	r0, r4
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	0029      	movs	r1, r5
 800b400:	6025      	str	r5, [r4, #0]
 800b402:	60a5      	str	r5, [r4, #8]
 800b404:	6065      	str	r5, [r4, #4]
 800b406:	6125      	str	r5, [r4, #16]
 800b408:	6165      	str	r5, [r4, #20]
 800b40a:	61a5      	str	r5, [r4, #24]
 800b40c:	305c      	adds	r0, #92	; 0x5c
 800b40e:	f7ff f90e 	bl	800a62e <memset>
 800b412:	6365      	str	r5, [r4, #52]	; 0x34
 800b414:	63a5      	str	r5, [r4, #56]	; 0x38
 800b416:	64a5      	str	r5, [r4, #72]	; 0x48
 800b418:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b41a:	0020      	movs	r0, r4
 800b41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b41e:	3468      	adds	r4, #104	; 0x68
 800b420:	e7d7      	b.n	800b3d2 <__sfp+0x1e>
 800b422:	2104      	movs	r1, #4
 800b424:	0038      	movs	r0, r7
 800b426:	f7ff ff57 	bl	800b2d8 <__sfmoreglue>
 800b42a:	1e04      	subs	r4, r0, #0
 800b42c:	6030      	str	r0, [r6, #0]
 800b42e:	d1d5      	bne.n	800b3dc <__sfp+0x28>
 800b430:	f7ff ff70 	bl	800b314 <__sfp_lock_release>
 800b434:	230c      	movs	r3, #12
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	e7ef      	b.n	800b41a <__sfp+0x66>
 800b43a:	46c0      	nop			; (mov r8, r8)
 800b43c:	0800ba90 	.word	0x0800ba90
 800b440:	ffff0001 	.word	0xffff0001

0800b444 <_fwalk_reent>:
 800b444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b446:	0004      	movs	r4, r0
 800b448:	0006      	movs	r6, r0
 800b44a:	2700      	movs	r7, #0
 800b44c:	9101      	str	r1, [sp, #4]
 800b44e:	3448      	adds	r4, #72	; 0x48
 800b450:	6863      	ldr	r3, [r4, #4]
 800b452:	68a5      	ldr	r5, [r4, #8]
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	9b00      	ldr	r3, [sp, #0]
 800b458:	3b01      	subs	r3, #1
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	d504      	bpl.n	800b468 <_fwalk_reent+0x24>
 800b45e:	6824      	ldr	r4, [r4, #0]
 800b460:	2c00      	cmp	r4, #0
 800b462:	d1f5      	bne.n	800b450 <_fwalk_reent+0xc>
 800b464:	0038      	movs	r0, r7
 800b466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b468:	89ab      	ldrh	r3, [r5, #12]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d908      	bls.n	800b480 <_fwalk_reent+0x3c>
 800b46e:	220e      	movs	r2, #14
 800b470:	5eab      	ldrsh	r3, [r5, r2]
 800b472:	3301      	adds	r3, #1
 800b474:	d004      	beq.n	800b480 <_fwalk_reent+0x3c>
 800b476:	0029      	movs	r1, r5
 800b478:	0030      	movs	r0, r6
 800b47a:	9b01      	ldr	r3, [sp, #4]
 800b47c:	4798      	blx	r3
 800b47e:	4307      	orrs	r7, r0
 800b480:	3568      	adds	r5, #104	; 0x68
 800b482:	e7e8      	b.n	800b456 <_fwalk_reent+0x12>

0800b484 <__retarget_lock_init_recursive>:
 800b484:	4770      	bx	lr

0800b486 <__retarget_lock_acquire_recursive>:
 800b486:	4770      	bx	lr

0800b488 <__retarget_lock_release_recursive>:
 800b488:	4770      	bx	lr
	...

0800b48c <__swhatbuf_r>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	000e      	movs	r6, r1
 800b490:	001d      	movs	r5, r3
 800b492:	230e      	movs	r3, #14
 800b494:	5ec9      	ldrsh	r1, [r1, r3]
 800b496:	0014      	movs	r4, r2
 800b498:	b096      	sub	sp, #88	; 0x58
 800b49a:	2900      	cmp	r1, #0
 800b49c:	da08      	bge.n	800b4b0 <__swhatbuf_r+0x24>
 800b49e:	220c      	movs	r2, #12
 800b4a0:	5eb3      	ldrsh	r3, [r6, r2]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	602a      	str	r2, [r5, #0]
 800b4a6:	061b      	lsls	r3, r3, #24
 800b4a8:	d411      	bmi.n	800b4ce <__swhatbuf_r+0x42>
 800b4aa:	2380      	movs	r3, #128	; 0x80
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	e00f      	b.n	800b4d0 <__swhatbuf_r+0x44>
 800b4b0:	466a      	mov	r2, sp
 800b4b2:	f000 f92f 	bl	800b714 <_fstat_r>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	dbf1      	blt.n	800b49e <__swhatbuf_r+0x12>
 800b4ba:	23f0      	movs	r3, #240	; 0xf0
 800b4bc:	9901      	ldr	r1, [sp, #4]
 800b4be:	021b      	lsls	r3, r3, #8
 800b4c0:	4019      	ands	r1, r3
 800b4c2:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <__swhatbuf_r+0x4c>)
 800b4c4:	18c9      	adds	r1, r1, r3
 800b4c6:	424b      	negs	r3, r1
 800b4c8:	4159      	adcs	r1, r3
 800b4ca:	6029      	str	r1, [r5, #0]
 800b4cc:	e7ed      	b.n	800b4aa <__swhatbuf_r+0x1e>
 800b4ce:	2340      	movs	r3, #64	; 0x40
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	6023      	str	r3, [r4, #0]
 800b4d4:	b016      	add	sp, #88	; 0x58
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	ffffe000 	.word	0xffffe000

0800b4dc <__smakebuf_r>:
 800b4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4de:	2602      	movs	r6, #2
 800b4e0:	898b      	ldrh	r3, [r1, #12]
 800b4e2:	0005      	movs	r5, r0
 800b4e4:	000c      	movs	r4, r1
 800b4e6:	4233      	tst	r3, r6
 800b4e8:	d006      	beq.n	800b4f8 <__smakebuf_r+0x1c>
 800b4ea:	0023      	movs	r3, r4
 800b4ec:	3347      	adds	r3, #71	; 0x47
 800b4ee:	6023      	str	r3, [r4, #0]
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	6163      	str	r3, [r4, #20]
 800b4f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b4f8:	466a      	mov	r2, sp
 800b4fa:	ab01      	add	r3, sp, #4
 800b4fc:	f7ff ffc6 	bl	800b48c <__swhatbuf_r>
 800b500:	9900      	ldr	r1, [sp, #0]
 800b502:	0007      	movs	r7, r0
 800b504:	0028      	movs	r0, r5
 800b506:	f7ff f9ad 	bl	800a864 <_malloc_r>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d108      	bne.n	800b520 <__smakebuf_r+0x44>
 800b50e:	220c      	movs	r2, #12
 800b510:	5ea3      	ldrsh	r3, [r4, r2]
 800b512:	059a      	lsls	r2, r3, #22
 800b514:	d4ef      	bmi.n	800b4f6 <__smakebuf_r+0x1a>
 800b516:	2203      	movs	r2, #3
 800b518:	4393      	bics	r3, r2
 800b51a:	431e      	orrs	r6, r3
 800b51c:	81a6      	strh	r6, [r4, #12]
 800b51e:	e7e4      	b.n	800b4ea <__smakebuf_r+0xe>
 800b520:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <__smakebuf_r+0x84>)
 800b522:	62ab      	str	r3, [r5, #40]	; 0x28
 800b524:	2380      	movs	r3, #128	; 0x80
 800b526:	89a2      	ldrh	r2, [r4, #12]
 800b528:	6020      	str	r0, [r4, #0]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	9b00      	ldr	r3, [sp, #0]
 800b530:	6120      	str	r0, [r4, #16]
 800b532:	6163      	str	r3, [r4, #20]
 800b534:	9b01      	ldr	r3, [sp, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00d      	beq.n	800b556 <__smakebuf_r+0x7a>
 800b53a:	0028      	movs	r0, r5
 800b53c:	230e      	movs	r3, #14
 800b53e:	5ee1      	ldrsh	r1, [r4, r3]
 800b540:	f000 f8fa 	bl	800b738 <_isatty_r>
 800b544:	2800      	cmp	r0, #0
 800b546:	d006      	beq.n	800b556 <__smakebuf_r+0x7a>
 800b548:	2203      	movs	r2, #3
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	4393      	bics	r3, r2
 800b54e:	001a      	movs	r2, r3
 800b550:	2301      	movs	r3, #1
 800b552:	4313      	orrs	r3, r2
 800b554:	81a3      	strh	r3, [r4, #12]
 800b556:	89a0      	ldrh	r0, [r4, #12]
 800b558:	4307      	orrs	r7, r0
 800b55a:	81a7      	strh	r7, [r4, #12]
 800b55c:	e7cb      	b.n	800b4f6 <__smakebuf_r+0x1a>
 800b55e:	46c0      	nop			; (mov r8, r8)
 800b560:	0800b2c9 	.word	0x0800b2c9

0800b564 <memchr>:
 800b564:	b2c9      	uxtb	r1, r1
 800b566:	1882      	adds	r2, r0, r2
 800b568:	4290      	cmp	r0, r2
 800b56a:	d101      	bne.n	800b570 <memchr+0xc>
 800b56c:	2000      	movs	r0, #0
 800b56e:	4770      	bx	lr
 800b570:	7803      	ldrb	r3, [r0, #0]
 800b572:	428b      	cmp	r3, r1
 800b574:	d0fb      	beq.n	800b56e <memchr+0xa>
 800b576:	3001      	adds	r0, #1
 800b578:	e7f6      	b.n	800b568 <memchr+0x4>
	...

0800b57c <__malloc_lock>:
 800b57c:	b510      	push	{r4, lr}
 800b57e:	4802      	ldr	r0, [pc, #8]	; (800b588 <__malloc_lock+0xc>)
 800b580:	f7ff ff81 	bl	800b486 <__retarget_lock_acquire_recursive>
 800b584:	bd10      	pop	{r4, pc}
 800b586:	46c0      	nop			; (mov r8, r8)
 800b588:	200008cc 	.word	0x200008cc

0800b58c <__malloc_unlock>:
 800b58c:	b510      	push	{r4, lr}
 800b58e:	4802      	ldr	r0, [pc, #8]	; (800b598 <__malloc_unlock+0xc>)
 800b590:	f7ff ff7a 	bl	800b488 <__retarget_lock_release_recursive>
 800b594:	bd10      	pop	{r4, pc}
 800b596:	46c0      	nop			; (mov r8, r8)
 800b598:	200008cc 	.word	0x200008cc

0800b59c <_raise_r>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	0004      	movs	r4, r0
 800b5a0:	000d      	movs	r5, r1
 800b5a2:	291f      	cmp	r1, #31
 800b5a4:	d904      	bls.n	800b5b0 <_raise_r+0x14>
 800b5a6:	2316      	movs	r3, #22
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	4240      	negs	r0, r0
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}
 800b5b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d004      	beq.n	800b5c0 <_raise_r+0x24>
 800b5b6:	008a      	lsls	r2, r1, #2
 800b5b8:	189b      	adds	r3, r3, r2
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	d108      	bne.n	800b5d2 <_raise_r+0x36>
 800b5c0:	0020      	movs	r0, r4
 800b5c2:	f000 f831 	bl	800b628 <_getpid_r>
 800b5c6:	002a      	movs	r2, r5
 800b5c8:	0001      	movs	r1, r0
 800b5ca:	0020      	movs	r0, r4
 800b5cc:	f000 f81a 	bl	800b604 <_kill_r>
 800b5d0:	e7ed      	b.n	800b5ae <_raise_r+0x12>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	2a01      	cmp	r2, #1
 800b5d6:	d0ea      	beq.n	800b5ae <_raise_r+0x12>
 800b5d8:	1c51      	adds	r1, r2, #1
 800b5da:	d103      	bne.n	800b5e4 <_raise_r+0x48>
 800b5dc:	2316      	movs	r3, #22
 800b5de:	3001      	adds	r0, #1
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	e7e4      	b.n	800b5ae <_raise_r+0x12>
 800b5e4:	2400      	movs	r4, #0
 800b5e6:	0028      	movs	r0, r5
 800b5e8:	601c      	str	r4, [r3, #0]
 800b5ea:	4790      	blx	r2
 800b5ec:	0020      	movs	r0, r4
 800b5ee:	e7de      	b.n	800b5ae <_raise_r+0x12>

0800b5f0 <raise>:
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	4b03      	ldr	r3, [pc, #12]	; (800b600 <raise+0x10>)
 800b5f4:	0001      	movs	r1, r0
 800b5f6:	6818      	ldr	r0, [r3, #0]
 800b5f8:	f7ff ffd0 	bl	800b59c <_raise_r>
 800b5fc:	bd10      	pop	{r4, pc}
 800b5fe:	46c0      	nop			; (mov r8, r8)
 800b600:	20000024 	.word	0x20000024

0800b604 <_kill_r>:
 800b604:	2300      	movs	r3, #0
 800b606:	b570      	push	{r4, r5, r6, lr}
 800b608:	4d06      	ldr	r5, [pc, #24]	; (800b624 <_kill_r+0x20>)
 800b60a:	0004      	movs	r4, r0
 800b60c:	0008      	movs	r0, r1
 800b60e:	0011      	movs	r1, r2
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	f7f8 fc49 	bl	8003ea8 <_kill>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d103      	bne.n	800b622 <_kill_r+0x1e>
 800b61a:	682b      	ldr	r3, [r5, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d000      	beq.n	800b622 <_kill_r+0x1e>
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	200008d0 	.word	0x200008d0

0800b628 <_getpid_r>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	f7f8 fc37 	bl	8003e9c <_getpid>
 800b62e:	bd10      	pop	{r4, pc}

0800b630 <__sread>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	000c      	movs	r4, r1
 800b634:	250e      	movs	r5, #14
 800b636:	5f49      	ldrsh	r1, [r1, r5]
 800b638:	f000 f8a4 	bl	800b784 <_read_r>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	db03      	blt.n	800b648 <__sread+0x18>
 800b640:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b642:	181b      	adds	r3, r3, r0
 800b644:	6563      	str	r3, [r4, #84]	; 0x54
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	4a02      	ldr	r2, [pc, #8]	; (800b654 <__sread+0x24>)
 800b64c:	4013      	ands	r3, r2
 800b64e:	81a3      	strh	r3, [r4, #12]
 800b650:	e7f9      	b.n	800b646 <__sread+0x16>
 800b652:	46c0      	nop			; (mov r8, r8)
 800b654:	ffffefff 	.word	0xffffefff

0800b658 <__swrite>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	001f      	movs	r7, r3
 800b65c:	898b      	ldrh	r3, [r1, #12]
 800b65e:	0005      	movs	r5, r0
 800b660:	000c      	movs	r4, r1
 800b662:	0016      	movs	r6, r2
 800b664:	05db      	lsls	r3, r3, #23
 800b666:	d505      	bpl.n	800b674 <__swrite+0x1c>
 800b668:	230e      	movs	r3, #14
 800b66a:	5ec9      	ldrsh	r1, [r1, r3]
 800b66c:	2200      	movs	r2, #0
 800b66e:	2302      	movs	r3, #2
 800b670:	f000 f874 	bl	800b75c <_lseek_r>
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	4a05      	ldr	r2, [pc, #20]	; (800b68c <__swrite+0x34>)
 800b678:	0028      	movs	r0, r5
 800b67a:	4013      	ands	r3, r2
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	0032      	movs	r2, r6
 800b680:	230e      	movs	r3, #14
 800b682:	5ee1      	ldrsh	r1, [r4, r3]
 800b684:	003b      	movs	r3, r7
 800b686:	f000 f81f 	bl	800b6c8 <_write_r>
 800b68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b68c:	ffffefff 	.word	0xffffefff

0800b690 <__sseek>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	000c      	movs	r4, r1
 800b694:	250e      	movs	r5, #14
 800b696:	5f49      	ldrsh	r1, [r1, r5]
 800b698:	f000 f860 	bl	800b75c <_lseek_r>
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	1c42      	adds	r2, r0, #1
 800b6a0:	d103      	bne.n	800b6aa <__sseek+0x1a>
 800b6a2:	4a05      	ldr	r2, [pc, #20]	; (800b6b8 <__sseek+0x28>)
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	81a3      	strh	r3, [r4, #12]
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	2280      	movs	r2, #128	; 0x80
 800b6ac:	0152      	lsls	r2, r2, #5
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b6b4:	e7f8      	b.n	800b6a8 <__sseek+0x18>
 800b6b6:	46c0      	nop			; (mov r8, r8)
 800b6b8:	ffffefff 	.word	0xffffefff

0800b6bc <__sclose>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	230e      	movs	r3, #14
 800b6c0:	5ec9      	ldrsh	r1, [r1, r3]
 800b6c2:	f000 f815 	bl	800b6f0 <_close_r>
 800b6c6:	bd10      	pop	{r4, pc}

0800b6c8 <_write_r>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	0004      	movs	r4, r0
 800b6cc:	0008      	movs	r0, r1
 800b6ce:	0011      	movs	r1, r2
 800b6d0:	001a      	movs	r2, r3
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4d05      	ldr	r5, [pc, #20]	; (800b6ec <_write_r+0x24>)
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f8 fc1f 	bl	8003f1a <_write>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d103      	bne.n	800b6e8 <_write_r+0x20>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d000      	beq.n	800b6e8 <_write_r+0x20>
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	200008d0 	.word	0x200008d0

0800b6f0 <_close_r>:
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	b570      	push	{r4, r5, r6, lr}
 800b6f4:	4d06      	ldr	r5, [pc, #24]	; (800b710 <_close_r+0x20>)
 800b6f6:	0004      	movs	r4, r0
 800b6f8:	0008      	movs	r0, r1
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	f7f8 fc29 	bl	8003f52 <_close>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d103      	bne.n	800b70c <_close_r+0x1c>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d000      	beq.n	800b70c <_close_r+0x1c>
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	bd70      	pop	{r4, r5, r6, pc}
 800b70e:	46c0      	nop			; (mov r8, r8)
 800b710:	200008d0 	.word	0x200008d0

0800b714 <_fstat_r>:
 800b714:	2300      	movs	r3, #0
 800b716:	b570      	push	{r4, r5, r6, lr}
 800b718:	4d06      	ldr	r5, [pc, #24]	; (800b734 <_fstat_r+0x20>)
 800b71a:	0004      	movs	r4, r0
 800b71c:	0008      	movs	r0, r1
 800b71e:	0011      	movs	r1, r2
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	f7f8 fc20 	bl	8003f66 <_fstat>
 800b726:	1c43      	adds	r3, r0, #1
 800b728:	d103      	bne.n	800b732 <_fstat_r+0x1e>
 800b72a:	682b      	ldr	r3, [r5, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d000      	beq.n	800b732 <_fstat_r+0x1e>
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	bd70      	pop	{r4, r5, r6, pc}
 800b734:	200008d0 	.word	0x200008d0

0800b738 <_isatty_r>:
 800b738:	2300      	movs	r3, #0
 800b73a:	b570      	push	{r4, r5, r6, lr}
 800b73c:	4d06      	ldr	r5, [pc, #24]	; (800b758 <_isatty_r+0x20>)
 800b73e:	0004      	movs	r4, r0
 800b740:	0008      	movs	r0, r1
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	f7f8 fc1d 	bl	8003f82 <_isatty>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d103      	bne.n	800b754 <_isatty_r+0x1c>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d000      	beq.n	800b754 <_isatty_r+0x1c>
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	bd70      	pop	{r4, r5, r6, pc}
 800b756:	46c0      	nop			; (mov r8, r8)
 800b758:	200008d0 	.word	0x200008d0

0800b75c <_lseek_r>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	0004      	movs	r4, r0
 800b760:	0008      	movs	r0, r1
 800b762:	0011      	movs	r1, r2
 800b764:	001a      	movs	r2, r3
 800b766:	2300      	movs	r3, #0
 800b768:	4d05      	ldr	r5, [pc, #20]	; (800b780 <_lseek_r+0x24>)
 800b76a:	602b      	str	r3, [r5, #0]
 800b76c:	f7f8 fc12 	bl	8003f94 <_lseek>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d103      	bne.n	800b77c <_lseek_r+0x20>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d000      	beq.n	800b77c <_lseek_r+0x20>
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	bd70      	pop	{r4, r5, r6, pc}
 800b77e:	46c0      	nop			; (mov r8, r8)
 800b780:	200008d0 	.word	0x200008d0

0800b784 <_read_r>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	0004      	movs	r4, r0
 800b788:	0008      	movs	r0, r1
 800b78a:	0011      	movs	r1, r2
 800b78c:	001a      	movs	r2, r3
 800b78e:	2300      	movs	r3, #0
 800b790:	4d05      	ldr	r5, [pc, #20]	; (800b7a8 <_read_r+0x24>)
 800b792:	602b      	str	r3, [r5, #0]
 800b794:	f7f8 fba4 	bl	8003ee0 <_read>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d103      	bne.n	800b7a4 <_read_r+0x20>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d000      	beq.n	800b7a4 <_read_r+0x20>
 800b7a2:	6023      	str	r3, [r4, #0]
 800b7a4:	bd70      	pop	{r4, r5, r6, pc}
 800b7a6:	46c0      	nop			; (mov r8, r8)
 800b7a8:	200008d0 	.word	0x200008d0

0800b7ac <_init>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7b2:	bc08      	pop	{r3}
 800b7b4:	469e      	mov	lr, r3
 800b7b6:	4770      	bx	lr

0800b7b8 <_fini>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	46c0      	nop			; (mov r8, r8)
 800b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7be:	bc08      	pop	{r3}
 800b7c0:	469e      	mov	lr, r3
 800b7c2:	4770      	bx	lr
